/**
 * Resource helper
 *
 */
var Currency = require('dw/util/Currency');
var Site = require('dw/system/Site');
var ContentMgr = require('dw/content/ContentMgr');
var ProductAvailabilityModel = require('dw/catalog/ProductAvailabilityModel');

function ResourceHelper() {}
/**
 * Get the client-side constants
 * @param pageContext
 * @returns {Object} An objects key key-value pairs holding the constants
 */
ResourceHelper.getConstants = function(pageContext) {
    return {
        AVAIL_STATUS_IN_STOCK         : ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK,
        AVAIL_STATUS_PREORDER         : ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER,
        AVAIL_STATUS_BACKORDER         : ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER,
        AVAIL_STATUS_NOT_AVAILABLE     : ProductAvailabilityModel.AVAILABILITY_STATUS_NOT_AVAILABLE
    };
}
/**
 * Get the client-side resources of a given page
 * @param pageContext
 * @returns {Object} An objects key key-value pairs holding the resources
 */
ResourceHelper.getResources = function(pageContext) {
    var Resource = require('dw/web/Resource');

    // application resources
    var resources = {
        // Common
        I_AGREE                           : Resource.msg('global.i_agree', 'locale', null),
        CLOSE                             : Resource.msg('global.close', 'locale', null),
        NO_THANKS                         : Resource.msg('global.nothanks', 'locale', null),
        OK                                : Resource.msg('global.ok', 'locale', null),
        ARE_YOU_HUMAN                     : Resource.msg('global.captcha.areyouhuman', 'locale', null),

        // Checkout
        SHIP_QualifiesFor                 : Resource.msg('shipment.qualifiesfor', 'checkout', null),
        CC_LOAD_ERROR                     : Resource.msg('billing.creditcardloaderror', 'checkout', null),

        // Registry resources
        REG_ADDR_ERROR                    : Resource.msg('global.couldntloadaddress', 'locale', null),

         // bonus products messages
        BONUS_PRODUCT                     : Resource.msg('product.bonusproduct', 'product', null),
        BONUS_PRODUCTS                    : Resource.msg('product.bonusproducts', 'product', null),
        MISSING_VAL						  : Resource.msg('product.missingval','product',null),
        SELECT_BONUS_PRODUCTS             : Resource.msg('product.selectbonusproducts', 'product', null),
        SELECT_BONUS_PRODUCT              : Resource.msg('product.selectbonusproduct', 'product', null),
        BONUS_PRODUCT_MAX                 : Resource.msg('product.bonusproductsmax', 'product', null),
        BONUS_PRODUCT_TOOMANY             : Resource.msg('product.bonusproductstoomany', 'product', null),
        SIMPLE_SEARCH                     : Resource.msg('simplesearch.searchtext', 'search', null),
        SUBSCRIBE_EMAIL_DEFAULT           : Resource.msg('subscribe.email.default', 'forms', 'Email Address'),

        CURRENCY_SYMBOL                   : Currency.getCurrency(Site.current.getDefaultCurrency()).symbol,
        MISSINGVAL                        : Resource.msg('global.missingval', 'locale', null),
        SERVER_ERROR                      : Resource.msg('global.servererror', 'locale', null),
        MISSING_LIB                       : Resource.msg('global.missinglib', 'locale', null),
        BAD_RESPONSE                      : Resource.msg('global.badresponse', 'locale', null),
        INVALID_PHONE                     : Resource.msg('global.invalidphone', 'locale', null),
        REMOVE                            : Resource.msg('global.remove', 'locale', null),
        QTY                               : Resource.msg('global.qty', 'locale', null),
        EMPTY_IMG_ALT                     : Resource.msg('global.remove', 'locale', null),
        COMPARE_BUTTON_LABEL              : Resource.msg('productcomparewidget.compareitemsbutton', 'search', null),
        COMPARE_CONFIRMATION              : Resource.msg('productcomparewidget.maxproducts', 'search', null),
        COMPARE_REMOVE_FAIL               : Resource.msg('productcomparewidget.removefail', 'search', null),
        COMPARE_ADD_FAIL                  : Resource.msg('productcomparewidget.addfail', 'search', null),
        ADD_TO_CART_FAIL                  : Resource.msg('cart.unableToAdd', 'checkout', null),
        REGISTRY_SEARCH_ADVANCED_CLOSE    : Resource.msg('account.giftregistry.closeadvanced', 'account', null),
        GIFT_CERT_INVALID                 : Resource.msg('billing.giftcertinvalid', 'checkout', null),
        GIFT_CERT_BALANCE                 : Resource.msg('billing.giftcertbalance', 'checkout', null),
        GIFT_CERT_AMOUNT_INVALID          : Resource.msg('giftcert.amountvalueerror', 'forms', null),
        GIFT_CERT_MISSING                 : Resource.msg('billing.giftcertidmissing', 'checkout', null),
        INVALID_OWNER                     : Resource.msg('billing.ownerparseerror', 'checkout', null),
        COUPON_CODE_MISSING               : Resource.msg('cart.COUPON_CODE_MISSING', 'checkout',  null),
        GIFT_CERTIFICATE_CREDIT			  :	Resource.msg('minibillinginfo.giftcertificatecredit','checkout',null),
        COOKIES_DISABLED                  : Resource.msg('global.browsertoolscheck.cookies', 'locale', null),
        BML_AGREE_TO_TERMS                : Resource.msg('bml.termserror', 'forms', null),
        CHAR_LIMIT_MSG                    : Resource.msg('character.limit', 'forms', null),
        CONFIRM_DELETE                    : Resource.msg('confirm.delete', 'forms', null),
        TITLE_GIFTREGISTRY                : Resource.msg('title.giftregistry', 'forms', null),
        TITLE_ADDRESS                     : Resource.msg('title.address', 'forms', null),
        TITLE_CREDITCARD                  : Resource.msg('title.creditcard', 'forms', null),
        SERVER_CONNECTION_ERROR           : Resource.msg('global.serverconnection', 'locale', 'Server connection failed!'),
        IN_STOCK_DATE                     : Resource.msg('global.inStockDate', 'locale', null),
        ITEM_STATUS_NOTAVAILABLE          : Resource.msg('global.allnotavailable', 'locale', null),
        INIFINITESCROLL                   : Resource.msg('paginginformation.infinite-scroll', 'search', null),
        STORE_NEAR_YOU                    : Resource.msg('storelist.lightbox.whatsavailable', 'storepickup', 'What\'s available at a store near you'),
        SELECT_STORE                      : Resource.msg('storelist.lightbox.selectstore', 'storepickup', null),
        SELECTED_STORE                    : Resource.msg('storelist.lightbox.selectedstore', 'storepickup', null),
        PREFERRED_STORE                   : Resource.msg('storelist.lightbox.preferredstore', 'storepickup', null),
        SET_PREFERRED_STORE               : Resource.msg('storelist.lightbox.setpreferredstore', 'storepickup', null),
        ENTER_ZIP                         : Resource.msg('storelist.lightbox.enterzip', 'storepickup', null),
        INVALID_ZIP                       : Resource.msg('storelist.lightbox.invalidpostalcode', 'storepickup', null),
        SEARCH                            : Resource.msg('global.search', 'locale', null),
        CHANGE_LOCATION                   : Resource.msg('storelist.lightbox.changelocation', 'storepickup', null),
        CONTINUE_WITH_STORE               : Resource.msg('storelist.lightbox.continuewithstore', 'storepickup', null),
        CONTINUE                          : Resource.msg('global.continue', 'locale', null),
        SEE_MORE                          : Resource.msg('storelist.lightbox.seemore', 'storepickup', null),
        SEE_LESS                          : Resource.msg('storelist.lightbox.seeless', 'storepickup', null),
        QUICK_VIEW                        : Resource.msg('product.quickview', 'product', null),
        QUICK_VIEW_POPUP                  : Resource.msg('product.quickview.popup', 'product', null),
        TLS_WARNING                       : Resource.msg('global.browsertoolscheck.tls', 'locale', null),
        NOT_AVAILABLE					  : Resource.msg('global.allnotavailable', 'locale', null),
        BILLING_COUPONMIS				  : Resource.msg('billing.billingcouponmissing','checkout',null),
        COUPON_INVALID					  :	Resource.msg('billing.couponinvalid','checkout',null),
        GIFTCERT_NO						  : Resource.msg('billing.giftcertnomethod','checkout',null),
        ZERO_BALANCE					  : Resource.msg('billing.zerobalance','checkout',null),
        GIFTCERT_ERROR					  : Resource.msg('billing.giftcerterror','checkout',null),
        // Validation messages
        VALIDATE_REQUIRED                 : Resource.msg('validate.required', 'forms', null),
        VALIDATE_REMOTE                   : Resource.msg('validate.remote', 'forms', null),
        VALIDATE_EMAIL                    : Resource.msg('validate.email', 'forms', null),
        VALIDATE_URL                      : Resource.msg('validate.url', 'forms', null),
        VALIDATE_DATE                     : Resource.msg('validate.date', 'forms', null),
        VALIDATE_DATEISO                  : Resource.msg('validate.dateISO', 'forms', null),
        VALIDATE_NUMBER                   : Resource.msg('validate.number', 'forms', null),
        VALIDATE_DIGITS                   : Resource.msg('validate.digits', 'forms', null),
        VALIDATE_CREDITCARD               : Resource.msg('validate.creditcard', 'forms', null),
        VALIDATE_EQUALTO                  : Resource.msg('validate.equalTo', 'forms', null),
        VALIDATE_MAXLENGTH                : Resource.msg('validate.maxlength', 'forms', null),
        VALIDATE_MINLENGTH                : Resource.msg('validate.minlength', 'forms', null),
        VALIDATE_RANGELENGTH              : Resource.msg('validate.rangelength', 'forms', null),
        VALIDATE_RANGE                    : Resource.msg('validate.range', 'forms', null),
        VALIDATE_MAX                      : Resource.msg('validate.max', 'forms', null),
        VALIDATE_MIN                      : Resource.msg('validate.min', 'forms', null),

		// Store Locator resources
		STORE_DETAILS                     : Resource.msg('storelocator.storelocatorresults.storedetails', 'storelocator', null),
		STORE_DIRECTIONS                  : Resource.msg('storelocator.storelocatorresults.directions', 'storelocator', null),
		STORE_NO_RESULTS                  : Resource.msg('storelocator.results.none', 'storelocator', null),
		STORE_NO_RESULTS_GEO              : Resource.msg('storelocator.results.none.geolocation', 'storelocator', null),
		POSTAL_CODE                       : Resource.msg('storelocator.results.postalcode', 'storelocator', null),
		STORE_RESULTS_MULT                : Resource.msg('storelocator.results.storetext.mult', 'storelocator', null),
		STORE_RESULTS_ONE                 : Resource.msg('storelocator.results.storetext.one', 'storelocator', null),
		STORE_RESULTS_POSTAL_CODE         : Resource.msg('storelocator.results.postalcode', 'storelocator', null),

        LOW								  : Resource.msg('global.low','locale',null),
        BRAND_CATEGORY1					  :	Resource.msg('storelocator.storelocatorresults.brandscarried','storelocator',null),
        STORELOCATER_RAPALA				  : Resource.msg('storelocator.rapala','forms',null),
        STORELOCATER_VMC				  : Resource.msg('storelocator.vmc','forms',null),
        STORELOCATER_SUFIX				  : Resource.msg('storelocator.sufix','forms',null),
        STORELOCATER_STORM				  : Resource.msg('storelocator.storm','forms',null),
        STORELOCATER_TRIGGERX			  : Resource.msg('storelocator.triggerx','forms',null),
        STORELOCATER_LUHRJONSON			  : Resource.msg('storelocator.luhrjensen','forms',null),
        STORELOCATER_TERMINATOR			  : Resource.msg('storelocator.terminator','forms',null),
        STORELOCATER_BLUEFOX			  : Resource.msg('storelocator.bluefox','forms',null),
        STORELOCATER_WILLIAMSON			  : Resource.msg('storelocator.williamson','forms',null),
        STORELOCATER_MARCUM 			  : Resource.msg('storelocator.marcum','forms',null),
        STORELOCATER_STRIKEMASTER		  : Resource.msg('storelocator.strikemaster','forms',null),
        STORELOCATER_MAP				  : Resource.msg('storelocator.storelocatorresults.map','storelocator',null),
        STORELOCATER_WEBSITE			  : Resource.msg('storelocator.storelocatorresults.website','storelocator',null),
         //PREVAIL-Properties
		GA_CATEGORY_CART			    : Resource.msg('gAnalytics.events.cart','events',null),
		GA_ACTION_REMOVEPRODUCT  		: Resource.msg('gAnalytics.events.removeproduct','events',null),
		GA_ACTION_UPDATEPRODUCT 		: Resource.msg('gAnalytics.events.updateproduct','events',null),
		GA_ACTION_SEARCH        		: Resource.msg('gAnalytics.events.search','events',null),
		GA_ACTION_ADDPRODUCTPV 			: Resource.msg('gAnalytics.events.addproductpv','events',null),
		GA_ACTION_ADDPRODUCTQV 			: Resource.msg('gAnalytics.events.addproductqv','events',null),
		GA_CATEGORY_MINICART            : Resource.msg('gAnalytics.events.minicart','events',null),
		GA_ACTION_MINICART              : Resource.msg('gAnalytics.events.minicart.open','events',null),
		GA_ACTION_QUICKVIEW	            : Resource.msg('gAnalytics.events.quickview.open','events',null),
		GA_CATEGORY_QUICKVIEW	        : Resource.msg('gAnalytics.events.quickview','events',null),
		GA_ACTION_SIGNIN 	            : Resource.msg('gAnalytics.events.login','events',null),
		GA_CATEGORY_USER 	            : Resource.msg('gAnalytics.events.accessinfo','events',null),
		GA_ACTION_ADDPRODUCT 			: Resource.msg('gAnalytics.events.addproduct','events',null),
		GA_ACTION_ADDALLPRODUCT			: Resource.msg('gAnalytics.events.addalltocart','events',null),
		GA_ACTION_ADDALLPRODUCTQV       : Resource.msg('gAnalytics.events.addalltocartqv','events',null),
		GA_ACTION_ADDALLPRODUCTPV       : Resource.msg('gAnalytics.events.addalltocartpv','events',null),
		GA_CATEGORY_NAVIGATION          : Resource.msg('gAnalytics.events.navigation','events',null),
		GA_ACTION_CATEGORY		        : Resource.msg('gAnalytics.events.category','events',null),
	    GA_ACTION_LOGOUT                : Resource.msg('gAnalytics.events.logout','events',null),
	    GA_CATEGORY_PROMOTION           : Resource.msg('gAnalytics.events.promotion','events',null),
	    GA_ACTION_REMOVEPROMOTION       : Resource.msg('gAnalytics.events.removepromotion','events',null),
	    GA_CATEGORY_PDPVIEW             : Resource.msg('gAnalytics.events.pdpview','events',null),
	    GA_ACTION_PDPVIEW               : Resource.msg('gAnalytics.events.quickview','events',null),
	    GA_CATEGORY_BRAND				: Resource.msg('gAnalytics.events.brand', 'events', null),

	    ADYEN_CC_VALIDATE 				: Resource.msg('adyen.creditcard', 'adyen', null)
    };

    // additional resources
    resources[ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK] = Resource.msg('global.instock', 'locale', null);
    resources["QTY_" + ProductAvailabilityModel.AVAILABILITY_STATUS_IN_STOCK] = Resource.msg('global.quantityinstock', 'locale', null);
    resources[ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER] = Resource.msg('global.allpreorder', 'locale', null);
    resources["QTY_" + ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER] = Resource.msg('global.quantitypreorder', 'locale', null);
    resources["REMAIN_" + ProductAvailabilityModel.AVAILABILITY_STATUS_PREORDER] = Resource.msg('global.remainingpreorder', 'locale', null);
    resources[ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER] = Resource.msg('global.allbackorder', 'locale', null);
    resources["QTY_" + ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER] = Resource.msg('global.quantitybackorder', 'locale', null);
    resources["REMAIN_" + ProductAvailabilityModel.AVAILABILITY_STATUS_BACKORDER] = Resource.msg('global.remainingbackorder', 'locale', null);
    resources[ProductAvailabilityModel.AVAILABILITY_STATUS_NOT_AVAILABLE] = Resource.msg('global.allnotavailable', 'locale', null);
    resources["REMAIN_" + ProductAvailabilityModel.AVAILABILITY_STATUS_NOT_AVAILABLE] = Resource.msg('global.remainingnotavailable', 'locale', null);

    return resources;
}

/**
 * Get the client-side URLs of a given page
 * @returns {Object} An objects key key-value pairs holding the URLs
 */
ResourceHelper.getUrls = function(pageContext) {
    var URLUtils = require('dw/web/URLUtils');
    var Resource = require('dw/web/Resource');

    // application urls
    var urls =  {
        appResources                : URLUtils.url('Resources-Load').toString(),
        pageInclude                 : URLUtils.url('Page-Include').toString(),
        continueUrl                 : request.isHttpSecure() ? URLUtils.httpsContinue().toString() : URLUtils.httpContinue().toString(),
        staticPath                  : URLUtils.staticURL("/").toString(),
        addGiftCert                 : URLUtils.url('GiftCert-Purchase').toString(),
        minicartGC                  : URLUtils.url('GiftCert-ShowMiniCart').toString(),
        addProduct                  : URLUtils.url('Cart-AddProduct').toString(),
        editLineItem				: URLUtils.url('Cart-EditLineItem').toString(),
        minicart                    : URLUtils.url('Cart-MiniAddProduct').toString(),
        cartShow                    : URLUtils.url('Cart-Show').toString(),
        giftRegAdd                  : URLUtils.https('Address-GetAddressDetails', 'addressID', '').toString(),
        paymentsList                : URLUtils.https('PaymentInstruments-List').toString(),
        addressesList               : URLUtils.https('Address-List').toString(),
        wishlistAddress             : URLUtils.https('Wishlist-SetShippingAddress').toString(),
        deleteAddress               : URLUtils.url('Address-Delete').toString(),
        getProductUrl               : URLUtils.url('Product-Show').toString(),
        getBonusProducts            : URLUtils.url('Product-GetBonusProducts').toString(),
        addBonusProduct             : URLUtils.url('Cart-AddBonusProduct').toString(),
        getSetItem                  : URLUtils.url('Product-GetSetItem').toString(),
        productDetail               : URLUtils.url('Product-Detail').toString(),
        getAvailability             : URLUtils.url('Product-GetAvailability').toString(),
        getVariants					: URLUtils.url('Product-GetVariants').toString(),
        removeImg                   : URLUtils.staticURL('/images/icon_remove.gif').toString(),
        searchsuggest               : URLUtils.url('Search-GetSuggestions').toString(),
        productNav                  : URLUtils.url('Product-Productnav').toString(),
        summaryRefreshURL           : URLUtils.url('COBilling-UpdateSummary').toString(),
        billingSelectCC             : URLUtils.https('COBilling-SelectCreditCard').toString(),
        updateAddressDetails        : URLUtils.https('COShipping-UpdateAddressDetails').toString(),
        updateAddressDetailsBilling : URLUtils.https('COBilling-UpdateAddressDetails').toString(),
        shippingMethodsJSON         : URLUtils.https('COShipping-GetApplicableShippingMethodsJSON').toString(),
        shippingMethodsList         : URLUtils.https('COShipping-UpdateShippingMethodList').toString(),
        selectShippingMethodsList   : URLUtils.https('COShipping-SelectShippingMethod').toString(),
        resetPaymentForms           : URLUtils.url('COBilling-ResetPaymentForms').toString(),
        compareShow                 : URLUtils.url('Compare-Show').toString(),
        compareAdd                  : URLUtils.url('Compare-AddProduct').toString(),
        compareRemove               : URLUtils.url('Compare-RemoveProduct').toString(),
        compareEmptyImage           : URLUtils.staticURL('/images/comparewidgetempty.png').toString(),
        RemoveGiftCertificate		: URLUtils.https('COBilling-RemoveGiftCertificate').toString(),
        GetOrderTotalJson			: URLUtils.https('COBilling-GetOrderTotalJson').toString(),
        ClearCCForm					: URLUtils.url('COBilling-ClearCCForm').toString(),
        RefreshPaymentMethods		: URLUtils.url('COBilling-RefreshPaymentMethods').toString(),
        giftCardCheckBalance        : URLUtils.https('COBilling-GetGiftCertificateBalance').toString(),
        redeemGiftCert              : URLUtils.https('COBilling-RedeemGiftCertificateJson').toString(),
        addCoupon                   : URLUtils.https('Cart-AddCouponJson').toString(),
        RemoveCoupon				: URLUtils.https('COBilling-RemoveCoupon').toString(),
        storesInventory             : URLUtils.url('StoreInventory-Inventory').toString(),
        setPreferredStore           : URLUtils.url('StoreInventory-SetPreferredStore').toString(),
        getPreferredStore           : URLUtils.url('StoreInventory-GetPreferredStore').toString(),
        setStorePickup              : URLUtils.url('StoreInventory-SetStore').toString(),
        setZipCode                  : URLUtils.url('StoreInventory-SetZipCode').toString(),
        getZipCode                  : URLUtils.url('StoreInventory-GetZipCode').toString(),
        billing                     : URLUtils.url('COBilling-Start').toString(),
        setSessionCurrency          : URLUtils.url('Currency-SetSessionCurrency').toString(),
        addEditAddress              : URLUtils.url('COShippingMultiple-AddEditAddressJSON').toString(),
        cookieHint                  : URLUtils.url('Page-Show', 'cid', 'cookie_hint').toString(),
        rateLimiterReset            : URLUtils.url('RateLimiter-HideCaptcha').toString(),
        loadingSmallImg 			: URLUtils.staticURL('/images/loading-small.gif').toString(),
        sendToFriend				: URLUtils.https('SendToFriend-Start').toString(),
        formatMoney					: URLUtils.url('Product-FormatPrices').toString(),
        UpdateCartSummary			: URLUtils.url('COBilling-UpdateCartSummary').toString(),
        SuccessDisplayCoupon		: URLUtils.https('COBilling-DisplayCoupon').toString(),
        GetGiftCertificateBalance	: URLUtils.https('COBilling-GetGiftCertificateBalance').toString(),
        submitDialogURL				: URLUtils.url('Account-PasswordResetDialogForm').toString(),
        contactusnonus 				: URLUtils.url('Page-Show','cid','customer-contact-us-non-usa').toString(),
        vipInsider 				    : URLUtils.url('VIPInsider-Forms').toString(),
        vipInsiderDynamicForms      : URLUtils.url('VIPInsider-DynaForms').toString(),
        storeJson					: URLUtils.url('Stores-FindStoresJson').toString(),
        serviceStoreJson			: URLUtils.url('Stores-FindServiceStoresJson').toString(),
        rapalalogo					: URLUtils.staticURL('/images/logo-rapala.jpg').toString(),
        vmclogo						: URLUtils.staticURL('/images/logo-vmc.jpg').toString(),
        sufixlogo					: URLUtils.staticURL('/images/logo-sufix.jpg').toString(),
        stormlogo 					: URLUtils.staticURL('/images/logo-storm.jpg').toString(),
        triggerxlogo				: URLUtils.staticURL('/images/logo-triggerx.jpg').toString(),
        luhrjonsonlogo				: URLUtils.staticURL('/images/logo-luhrjensen.jpg').toString(),
        terminatorlogo				: URLUtils.staticURL('/images/logo-terminator.jpg').toString(),
        bluefoxlogo					: URLUtils.staticURL('/images/logo-bluefox.jpg').toString(),
        williamsonlogo				: URLUtils.staticURL('/images/logo-williamson.jpg').toString(),
        marcumlogo					: URLUtils.staticURL('/images/logo-marcum.jpg').toString(),
        strikemasterlogo			: URLUtils.staticURL('/images/logo-strikemaster.jpg').toString(),
        internationalHomeShow		: URLUtils.url('Home-Show').toString(),

        //Dymanic address update url
        getStateHtml                : URLUtils.url('Avs-GetStateHtml').toString(),
        getPhoneHtml                : URLUtils.url('Avs-GetPhoneHtml').toString()
    };
    return urls;
}
/**
 * Get the client-side preferences of a given page
 * @returns {Object} An objects key key-value pairs holding the preferences
 */
ResourceHelper.getPreferences = function(pageContext) {
    var cookieHintAsset = ContentMgr.getContent('cookie_hint');
    return {
        LISTING_INFINITE_SCROLL: (Site.getCurrent().getCustomPreferenceValue('enableInfiniteScroll') ? true : false),
        LISTING_REFINE_SORT: true,
        STORE_PICKUP: Site.getCurrent().getCustomPreferenceValue('enableStorePickUp'),
        COOKIE_HINT: (cookieHintAsset && cookieHintAsset.online) || false,
        CHECK_TLS: Site.getCurrent().getCustomPreferenceValue('checkTLS'),
        GTM_ENABLED: Site.getCurrent().getCustomPreferenceValue('enableGoogleTagManager'),
        STORELOCATOR_DISTANCE_UNIT: Site.getCurrent().getCustomPreferenceValue('storeLookupUnit').displayValue
    };
}
/**
 * Get the client-side preferences of a given page
 * @returns {Object} An objects key key-value pairs holding the preferences
 */
ResourceHelper.getSessionAttributes = function(pageContext) {
    return {
        SHOW_CAPTCHA: session.privacy.showCaptcha
    };
}
/**
 * Get the client-side user settings
 * @returns {Object} An objects key key-value pairs holding the settings
 */
ResourceHelper.getUserSettings = function(pageContext) {
    var ProductAvailabilityModel = require('dw/catalog/ProductAvailabilityModel');
    return {
        zip: session.custom.zipcode == "null" ? null : session.custom.zipcode,
        storeId: session.custom.storeId == "null" ? null : session.custom.storeId,
        geolocation : (!empty(request.geolocation)) ? {
            city            : request.geolocation.city,
            countryCode     : request.geolocation.countryCode,
            countryName     : request.geolocation.countryName,
            latitude        : request.geolocation.latitude,
            longitude       : request.geolocation.longitude,
            postalCode      : request.geolocation.postalCode,
            regionCode      : request.geolocation.regionCode,
            regionName      : request.geolocation.regionName
        } : null
    };
}

/**
 * Get the client-side Javascript settings
 * @returns {Object} An objects key key-value pairs holding the settings
 */
ResourceHelper.getScriptSettings = function (pageContext) {
    var URLUtils = require('dw/web/URLUtils');

    // Application Javascript files
    var scripts = {
        // Script paths
        storeLocator : {
            vars   : {
                zoomradius              : !empty(dw.system.Site.current.getCustomPreferenceValue("storeLocatorZoomRadius")) ? dw.system.Site.current.getCustomPreferenceValue("storeLocatorZoomRadius") : '{"0": 600000,"1": 600000,"2": 10000,"3": 6000,"4": 3000,"5": 1600,"6": 800,"7": 300,"8": 150,"9": 100,"10": 70,"11": 40,"12": 20,"13": 10,"14": 5,"15": 3,"16": 3,"17": 3,"18": 3,"19": 3,"20": 3}',
                storeurl                : URLUtils.url("Stores-Details").toString() + "?StoreID=",
                markerurl               : URLUtils.absStatic("images/marker.png").toString(),
                markerdetailurl         : URLUtils.absStatic("images/markerdetail.png").toString(),
                queryurl                : URLUtils.url("Stores-GetNearestStores").toString(),
                cookieurl               : URLUtils.url("Stores-SetGeoLocation").toString(),
                cookiename              : !empty(dw.system.Site.current.getCustomPreferenceValue("storeLocatorCookieName")) ? dw.system.Site.current.getCustomPreferenceValue("storeLocatorCookieName") : "CustomerLocation",
                defaultlocation         : !empty(dw.system.Site.current.getCustomPreferenceValue("storeLocatorDefaultLocation")) ? dw.system.Site.current.getCustomPreferenceValue("storeLocatorDefaultLocation") : "39.9502843, -74.9521867",
                maptype                 : !empty(dw.system.Site.current.getCustomPreferenceValue("storeLocatorMapType")) && !empty(dw.system.Site.current.getCustomPreferenceValue("storeLocatorMapType").value) ? dw.system.Site.current.getCustomPreferenceValue("storeLocatorMapType").value : "ROADMAP"
            }
        }
    };

    return scripts;
}