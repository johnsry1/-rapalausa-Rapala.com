/**
*
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.value );
importPackage( dw.order );
importScript("app_rapala_core:checkout/Utils.ds");
function handleAllotmentExp( customer, basket )
{
  try{
	   //var customer: Customer = args.Customer;
	   var allotmentExpired : Boolean = true;
	   //var basket : Basket = args.Basket;
	   var currencyCode : String = session.currency.currencyCode;
	   var paymentInstr : PaymentInstrument;
	   var today : Date = new Date();
	   if(!empty(customer.profile) && !empty(customer.profile.custom) && !empty(customer.profile.custom.allotmentExpires)){
		   if(today.getFullYear() < customer.profile.custom.allotmentExpires.getFullYear()){
					allotmentExpired = false;
		   }
		   else if(today.getFullYear() == customer.profile.custom.allotmentExpires.getFullYear()){
				if(today.getMonth() < customer.profile.custom.allotmentExpires.getMonth()){
					allotmentExpired = false;
				}else if(today.getMonth() == customer.profile.custom.allotmentExpires.getMonth()){
					if(today.getDate() <= customer.profile.custom.allotmentExpires.getDate()){
						allotmentExpired = false;
					}
				}
		   }
	   }
	   if(allotmentExpired){
	   		session.privacy.isProStaffAllotmentused = false;
	   		session.privacy.amountUsedFromProStaffAllowance = new Money(0.0, currencyCode);
	   		removeExistingPaymentInstruments( basket,  PaymentMgr.getPaymentMethod("ALLOTMENT").getName());
	   }else{
	   		if(!empty(customer.profile.custom)){
	 	 		var allowanceBalance : Number = customer.profile.custom.allotment;
	 	 		var typePaymentInstrs : Collection = basket.getPaymentInstruments("ALLOTMENT");
	   			if(typePaymentInstrs.length == 0 && allowanceBalance > 0.01){
	   				return false;
	   			}
	  	 	}
	   }
	   return true;
  }
  catch(e){
  		Logger.error("Error while executing the script HandleAllotmentExpiry.ds Error: "+e.message);
  		return false;
  }
}

module.exports={
	handleAllotmentExp : handleAllotmentExp
}
