/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );

function getSpecificationChart( thisProduct : Product )
{

	var SortAlphaNum = function (sortName, ascending) {
		if(ascending) {
			return function (prodA, prodB) {
				var reA = /[^a-zA-Z]/g,
					reN = /[^0-9]/g,
					a = prodA.custom[sortName],
					b = prodB.custom[sortName];
				if (!empty(a) && !empty(b)) {
					var aA = a.replace(reA, ""),
						bA = b.replace(reA, "");
					if(aA === bA) {
						var aN = parseInt(a.replace(reN, ""), 10),
							bN = parseInt(b.replace(reN, ""), 10);
						return aN === bN ? 0 : aN > bN ? 1 : -1;
					} else {
						return aA > bA ? 1 : -1;
					}
				} else {
					if(empty(a) && empty(b)) { return 0; }
					return empty(a) ? 1 : -1;
				}
			};
		} else {
			return function (prodA, prodB) {
				var reA = /[^a-zA-Z]/g,
					reN = /[^0-9]/g,
					a = prodA.custom[sortName],
					b = prodB.custom[sortName];
				if (!empty(a) && !empty(b)) {
					var aA = a.replace(reA, ""),
						bA = b.replace(reA, "");
					if(aA === bA) {
						var aN = parseInt(a.replace(reN, ""), 10),
							bN = parseInt(b.replace(reN, ""), 10);
						return aN === bN ? 0 : aN < bN ? 1 : -1;
					} else {
						return aA < bA ? 1 : -1;
					}
				} else {
					if(empty(a) && empty(b)) { return 0; }
					return empty(a) ? -1 : 1;
				}
			};
		}
	}
	var columnHeaders = [];
	// if specTable is not null
	if (thisProduct.custom.hasOwnProperty("specTable") && !empty(thisProduct.custom.specTable)) {
		// read the value of specTable.
		var vSpecTable = thisProduct.custom.specTable;
		// parse the value of specTable.
		var vSplitSpecTable = vSpecTable.split("|");
		// Check the split values
		var finalSpecArray = [];
		var finalIdx = 0;
		var specIdx = 0;
		// To handle the pipe at the end
		for (specIdx = 0; specIdx < vSplitSpecTable.length; specIdx += 1) {
			if (vSplitSpecTable[specIdx] !== "") {
				finalSpecArray[finalIdx] = vSplitSpecTable[specIdx];
				finalIdx += 1;
			}
		}
		// if the string is even then its correct
		if ((finalSpecArray.length % 2) === 0) {
			// we have matching string value pairs.
			var columnValueAttributes = [];
			var columnHeaderCount = 0;
			var columnValueAttributesCount = 0;
			var splitIdx = 0;
			var tabularClassName = [];
			var pToday = dw.util.DateUtils.nowForSite();
			for (splitIdx = 0; splitIdx < finalSpecArray.length; splitIdx += 1) {
				if (splitIdx % 2 === 0) {
					// COLUMN HEADER : 0th, 2nd, 4th ... even position values will be column names
					columnHeaders[columnHeaderCount] =  finalSpecArray[splitIdx];
					columnHeaderCount += 1;
				} else {
					// COLUMN ATTRIBUTE VALUES : 1st, 3rd, 5th ... odd positions will be the column values from the specTable string.
					columnValueAttributes[columnValueAttributesCount] = finalSpecArray[splitIdx];
					// collect first attribute of the column for tabular class name.
					if (columnValueAttributes[columnValueAttributesCount].indexOf(",") === -1) {
						// no comma and cannot be split
						tabularClassName[columnValueAttributesCount] = columnValueAttributes[columnValueAttributesCount];
					} else {
						var splitHolder = columnValueAttributes[columnValueAttributesCount].split(",");
						tabularClassName[columnValueAttributesCount] = splitHolder[0];
					}
					columnValueAttributesCount += 1;
				}
			}

			// now loop through the columnValueAttributes array to build the string.
			var vUniqueAttrName = "";

			// Split the string and get the first.
			var vPrimaryAttrubutes = "";

			vPrimaryAttrubutes = columnValueAttributes[0].split(",");
			vUniqueAttrName = vPrimaryAttrubutes[0];

			// Sorting the variants
			var preSortedVariants = thisProduct.variationModel.variants;
		
			var sortName = tabularClassName[0];
			var ascSort = true;
			if (thisProduct.custom.hasOwnProperty('specTableSort') && !empty(thisProduct.custom.specTableSort)) {
				var customSort = thisProduct.custom.specTableSort.split(' ');
				if (customSort.length >= 1) {
					sortName = customSort[0];
				}
				if (customSort.length >= 2 && customSort[1].toLowerCase() === "desc") {
					ascSort = false;
				}
			}

			// Getting all variants
			var mySorter = SortAlphaNum(sortName, ascSort);
			var allVariants = new dw.util.SortedSet(mySorter);
			
			var uniqueValues = new dw.util.HashSet();
			var tabularData = [];
			var cellString = "";
			var uniqueIdx = 0;
			var rowIdx = 0;
			var colIdx = 0;
			var variantIdx = 0;
			
			for (variantIdx = 0; variantIdx < preSortedVariants.length; variantIdx += 1) {
				allVariants.add(preSortedVariants[variantIdx]);
			}

			// Looping through all variants
			for (variantIdx = 0; variantIdx < allVariants.length; variantIdx += 1) {
				dw.system.Logger.debug("STOREFRONT  : Variation ID :"+allVariants[variantIdx].ID);
				if (allVariants[variantIdx].custom[vUniqueAttrName] == null || uniqueValues.contains(allVariants[variantIdx].custom[vUniqueAttrName])) {
					continue;
				} else {
					uniqueValues.add(allVariants[variantIdx].custom[vUniqueAttrName]);
					colIdx = 0;
					rowIdx = uniqueValues.length - 1;
					tabularData[rowIdx] = new Array();
					var attrIdx = 0;
					
					for (attrIdx = 0; attrIdx < columnValueAttributes.length; attrIdx += 1) {
						var newSnipe = "";
						var newUntilAttribute = "";
						
						var specAttributes = columnValueAttributes[attrIdx].split(",");
						if (specAttributes.length >1){
							// have to lookup multiple attributes and append the values seperated by "/" and store it in a cell.
							var cellIdx = 0;
							for (cellIdx = 0; cellIdx < specAttributes.length; cellIdx += 1) {
								
								if (!empty(allVariants[variantIdx].custom[specAttributes[cellIdx]])) {
									cellString += allVariants[variantIdx].custom[specAttributes[cellIdx]];
								}else {
									cellString += "";
								}
								if (cellIdx < specAttributes.length - 1) {
									if (cellString != "") {
										if (cellIdx == 0) {
											// get the newUntil for the first attribute if one exist.
											newUntilAttribute = specAttributes[0];
											if (specAttributes[0].indexOf("Lb") != -1) {
												newUntilAttribute = specAttributes[0].substring(0,specAttributes[0].indexOf("Lb"));
												newUntilAttribute += "Pound";
											}
											newUntilAttribute+="NewUntil";
											if (allVariants[variantIdx].custom.hasOwnProperty(newUntilAttribute) && allVariants[variantIdx].custom[newUntilAttribute] != null && allVariants[variantIdx].custom[newUntilAttribute] > pToday){
												newSnipe = "|new" ;
											}
										}
										cellString += " / " ;
									}
								}
							}
							if (cellString != "") {
								cellString += newSnipe;
								tabularData[rowIdx][colIdx] = cellString;
							}
						}else {
							// single attribute value
							if (allVariants[variantIdx].custom[specAttributes[0]] != null) {
								cellString += allVariants[variantIdx].custom[specAttributes[0]];
							} else {
								cellString += "";
							}
							newUntilAttribute = specAttributes[0];
							newUntilAttribute += "NewUntil";
							if (allVariants[variantIdx].custom.hasOwnProperty(newUntilAttribute) && allVariants[variantIdx].custom[newUntilAttribute] != null && allVariants[variantIdx].custom[newUntilAttribute] > pToday) {
								newSnipe += "|new" ;
							}
							if (cellString != "") {
								tabularData[rowIdx][colIdx] = cellString;
							}else {
								tabularData[rowIdx][colIdx] = "";
							}
						}
						cellString = "";
						colIdx += 1;
					}
				}
			}
		} else {
			// we do not have matching string value pairs.
			dw.system.Logger.error("STOREFRONT ERROR : Matching Key/Value pairs are not available to render spec table!!");
		}
	} else {
		// do not render spec table!
		
	}
	
	return tabularData;
}

function columnHeaders( thisProduct : Product )
{
	var columnHeaders = [];
	if (thisProduct.custom.hasOwnProperty("specTable") && !empty(thisProduct.custom.specTable)) {
		var vSpecTable = thisProduct.custom.specTable;
		var vSplitSpecTable = vSpecTable.split("|");
		var finalSpecArray = [];
		var finalIdx = 0;
		var specIdx = 0;
		for (specIdx = 0; specIdx < vSplitSpecTable.length; specIdx += 1) {
			if (vSplitSpecTable[specIdx] !== "") {
				finalSpecArray[finalIdx] = vSplitSpecTable[specIdx];
				finalIdx += 1;
			}
		}
		if ((finalSpecArray.length % 2) === 0) {
			var columnHeaderCount = 0;
			var splitIdx = 0;
			for (splitIdx = 0; splitIdx < finalSpecArray.length; splitIdx += 1) {
				if (splitIdx % 2 === 0) {
					columnHeaders[columnHeaderCount] =  finalSpecArray[splitIdx];
					columnHeaderCount += 1;
					} 
				}
			}
	}
	return columnHeaders;
}

module.exports = {
		getSpecificationChart : getSpecificationChart,
		columnHeaders : columnHeaders
		
	}