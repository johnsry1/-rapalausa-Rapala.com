/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*	 
*/
importPackage( dw.system );
importPackage(dw.order);
importPackage(dw.util);
importPackage(dw.value);

function getUDOOrderDetails( Order : dw.order.Order ) : Object
{
	return prepareudoorderAnalytics(Order);
}

function prepareudoorderAnalytics(order : dw.order.Order) : Object{
	var orderAnalytics : Object = new Object();
	if(order !=null){
		
			orderAnalytics.CID = dw.system.Site.getCurrent().getCustomPreferenceValue("CJTagCID");
			if(order.customer.authenticated){
			orderAnalytics.TYPE = dw.system.Site.getCurrent().getCustomPreferenceValue("CJTYPEReg");
			}
			else{
			orderAnalytics.TYPE = dw.system.Site.getCurrent().getCustomPreferenceValue("CJTYPE");
			} 
			
			//Order Discount
			var merchTotalExclOrderDiscounts : Money = order.getAdjustedMerchandizeTotalPrice(false);
			var merchTotalInclOrderDiscounts : Money = order.getAdjustedMerchandizeTotalPrice(true);
			var orderDiscount : Money = merchTotalExclOrderDiscounts.subtract( merchTotalInclOrderDiscounts );
			
			//Shipping Discount
			var shippingExclDiscounts : Money = order.shippingTotalPrice;
			var shippingInclDiscounts : Money = order.getAdjustedShippingTotalPrice();
			var shippingDiscount : Money = shippingExclDiscounts.subtract( shippingInclDiscounts );
			
			//Total Discount removing shipping discount
			//var totalDiscount : Money = orderDiscount.add(shippingDiscount);
			var totalDiscount : Money = orderDiscount;
			
		
		orderAnalytics.DISCOUNT = totalDiscount.toNumberString();
		orderAnalytics.OID = order.getOrderNo();
		
		orderAnalytics.CURRENCY = "USD";  
		
		var coupon : String ="";
		if(!empty(order.couponLineItems) && order.couponLineItems.length > 0){
			var itr : Iterator = order.couponLineItems.iterator();
			while( itr != null && itr.hasNext() ){
				var couponItem : CouponLineItem = itr.next();
				coupon = coupon.concat(couponItem.couponCode+",");
			}
			 
		}
		
		orderAnalytics.COUPON = coupon != "" ? coupon.substr(0, coupon.length-1) : ""; 
		var com_Jun_source_cookievalue = request.httpCookies["CJ_Source"];
		if(com_Jun_source_cookievalue !=null && com_Jun_source_cookievalue.value == "affiliate"){
			orderAnalytics.FIRECJ = "TRUE";
		}else{
			orderAnalytics.FIRECJ = "FALSE";
		}
		//orderAnalytics.FIRECJ = dw.system.Site.getCurrent().getCustomPreferenceValue("FIRECJ");
		
		orderAnalytics.PRODUCTLIST = [];
		
		var productInfo : Object = null;	
		var iter : Iterator = order.getProductLineItems().iterator();
		var i : Number = 0;
		var artPrice : Money;
		var artDiscountPrice : Money;
		
		while( iter != null && iter.hasNext() )
		{
			var prdLiItm : ProductLineItem = iter.next();
				if(!prdLiItm.bonusProductLineItem == true){
					productInfo = new Object();
					productInfo.ITEM = prdLiItm.productID;
					productInfo.AMT = prdLiItm.getBasePrice().toNumberString();
					productInfo.QTY = prdLiItm.quantity.value +"";					
					
					//calculate the base price for the qty 
					var basePrice : Number =  (prdLiItm.basePrice.value)*(prdLiItm.quantity.value);
					var basePriceMoney : Money = new Money(basePrice, "USD");
					//Total discount for the Item
					productInfo.DCNT = (basePriceMoney.subtract(prdLiItm.adjustedPrice)).toNumberString();
					orderAnalytics.PRODUCTLIST.push(productInfo) ;
			}
		}
		return orderAnalytics;
	}
	
}


