/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Basket : dw.order.Basket This is a sample comment.
*   @input CurrentBasket : dw.order.Basket This is a sample comment.
*-   @output ExampleOut : Number
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.rpc );
importPackage( dw.value );
importScript("app_rapala_core:checkout/Utils.ds");




function execute( args : PipelineDictionary ) : Number
{

try{
	var _basket : Basket = args.Basket;
	var _CurrentBasket : Basket = args.CurrentBasket;
	if(_basket != null && _CurrentBasket!=null ){
		for each(var payment : OrderPaymentInstrument in _basket.getPaymentInstruments()){
			_CurrentBasket.createPaymentInstrument( payment.getPaymentMethod(), payment.getPaymentTransaction().getAmount() );
			if(  payment.getPaymentTransaction().getAmount() != _basket.getMerchandizeTotalGrossPrice()){
				_CurrentBasket.createGiftCertificatePaymentInstrument("rev",  new Money(_basket.getMerchandizeTotalGrossPrice() - payment.getPaymentTransaction().getAmount(), _basket.currencyCode )  );
			}
		}
		copyAddressValues(_basket.getBillingAddress(), _CurrentBasket.billingAddress);
		for each(var shipment : Shipment in _basket.getShipments()){
			for each(var pli : ProductLineItem in shipment.getProductLineItems()){			
					createShipments(_basket, pli, _CurrentBasket,shipment.isDefault(),shipment);
			}
		}
	}
	
}catch(e){
	var error = e;
	var error2 = e;
}
   return PIPELET_NEXT;
}

function createShipments(_basket : Basket, pli : ProductLineItem,_CurrentBasket : Basket, isdefaultShipment : Boolean, srcShipment : Shipment){
	var currentDefaultShipment : Shipment = null;
	var oldDefaultShipment : Shipment = srcShipment;
	if(isdefaultShipment){
	currentDefaultShipment = _CurrentBasket.getDefaultShipment();
	}else{
		var newShipmentID : String = determineUniqueShipmentID( _CurrentBasket, "Shipment #" );
				currentDefaultShipment = _CurrentBasket.createShipment( newShipmentID );
				if(srcShipment.getShippingAddress() != null ){
					currentDefaultShipment.createShippingAddress(); 
					copyAddressValues(srcShipment.getShippingAddress(),currentDefaultShipment.getShippingAddress());
				}
				
	}
	currentDefaultShipment.createShippingAddress();
	copyAddressValues(oldDefaultShipment.getShippingAddress(),currentDefaultShipment.getShippingAddress());
	currentDefaultShipment.setShippingMethod(oldDefaultShipment.getShippingMethod());
	var plinew : ProductLineItem = _CurrentBasket.createProductLineItem(pli.product,(!empty(pli.optionModel)?pli.optionModel:null),currentDefaultShipment);

}
function copyAddressValues(fromAddress: OrderAddress,toAddress :  OrderAddress ){
		toAddress.setFirstName( fromAddress.firstName );
		toAddress.setLastName( fromAddress.lastName );
		toAddress.setAddress1( fromAddress.address1 );
		toAddress.setAddress2( fromAddress.address2 );
		toAddress.setCity( fromAddress.city );
		toAddress.setPostalCode( fromAddress.postalCode );
		toAddress.setStateCode( fromAddress.stateCode );
		toAddress.setCountryCode( fromAddress.countryCode );
		toAddress.setPhone( fromAddress.phone );	
}

