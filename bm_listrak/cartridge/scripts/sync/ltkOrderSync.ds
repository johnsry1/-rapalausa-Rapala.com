/**
* Purpose:	Exports Orders placed or modified since last successful export. Order file is sent to Listrak via FTP.
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
importPackage( dw.object );
importPackage( dw.catalog );

importScript( "objects/ltkOrder.ds" ); 
importScript( "sync/ltkExportUtils.ds" ); 

function execute( args : PipelineDictionary ) : Number
{
	var enabled : Boolean = dw.system.Site.current.preferences.custom.Listrak_OrderExport_Enabled;
	if (!empty(enabled) && !enabled)
	{
		return PIPELET_NEXT;
	}
	
	// Record the export start time
	var calendar = new Calendar();
	var currentExportStartTime = calendar.getTime().toISOString(); 
	
	// Load the date of the last successful export - If no date is found go back 5 yrs
	var lastExport = new ltkExportInfo("lastOrderExportDate");
	var lastExportDate : Date = lastExport.GetValueAsDate();

	calendar.set(Calendar.DATE , calendar.get(Calendar.DATE ) - 30); // 30 days before the current date
	var maxHistoryDate : Date = calendar.getTime();
		
	if (empty(lastExportDate) || maxHistoryDate > lastExportDate)
	{
		lastExportDate = maxHistoryDate;
	}

	
	// Get the orders ready for export
	var orders : SeekableIterator = OrderMgr.queryOrders("lastModified >= {1}", "orderNo", false, lastExportDate);
	
	if (orders.hasNext())
	{
		////////// Prepare order files //////////
		var orderfile = new ExportFile("orders_DW.txt");
		var itemfile = new ExportFile("orderItems_DW.txt");
		
		// order header row
		orderfile.AddRowItem('Email');
		orderfile.AddRowItem('OrderNumber');
		orderfile.AddRowItem('DateEntered');
		orderfile.AddRowItem('OrderTotal');
		orderfile.AddRowItem('ItemTotal');
		orderfile.AddRowItem('TaxTotal');
		orderfile.AddRowItem('ShippingTotal');
		orderfile.AddRowItem('Status');
		orderfile.AddRowItem('CouponCode');
		orderfile.AddRowItem('TrackingNumber');
		orderfile.WriteRow();
	
		// item header row
		itemfile.AddRowItem('OrderNumber');
		itemfile.AddRowItem('Sku');
		itemfile.AddRowItem('Quantity');
		itemfile.AddRowItem('Price');
		itemfile.AddRowItem('TrackingNumber');
		itemfile.WriteRow();
		
		// Process all orders
		for each(var order : order in orders)
		{
			var o = new ltkOrder();
			o.LoadOrder(order);
	
			// Add the order information to the order file		
			orderfile.AddRowItem(decodeURI(o.Order.EmailAddress), true);
			orderfile.AddRowItem(o.Order.OrderNumber, true);
			orderfile.AddRowItemAsDate(o.Order.OrderDate);
			orderfile.AddRowItem(o.orderTotal());
			orderfile.AddRowItem(o.Order.ItemTotal);
			orderfile.AddRowItem(o.Order.TaxTotal);
			orderfile.AddRowItem(o.Order.ShipTotal);
			
			var status = 'NotSet';
			switch (o.Order.Status) {
				case "NEW" :
				case "CREATED":
				case "OPEN" :
					status = 'Pending';
					break;				
				case "CANCELLED" :
					status = 'Canceled';
					break;				
				case "REPLACED" :
					status = 'Misc';					
					break;
				default :
					status = 'Unknown';
					break;
			}
						
			if (order.getShippingStatus().getDisplayValue() == 'SHIPPED')
				status = "Shipped";
			if (o.Order.Status == "COMPLETED")
				status = "Completed";
						
			orderfile.AddRowItem(status, true);
			orderfile.AddRowItem(o.Order.CouponCodes, true);
			orderfile.AddRowItem(o.Order.TrackingNumbers, true);
			
			orderfile.WriteRow();
			
			// Add the order items for this order to the items files
			for each(var i : ProductLineItem in o.Order.OrderItems)
			{
				itemfile.AddRowItem(o.Order.OrderNumber,true);
				itemfile.AddRowItem(i.Sku,true);
				itemfile.AddRowItem(i.Qty);
				itemfile.AddRowItem(i.Price);
				itemfile.AddRowItem(i.TrackingNumber, true);
				
				itemfile.WriteRow();
			}
			
		}
			
		// Write the files and submit via FTP to Listrak
		var orderResult = orderfile.SubmitFile();
		var itemResult = itemfile.SubmitFile();
		
		if (orderResult == false || itemResult == false)
		{
			return PIPELET_ERROR;
		}

		orderfile.Delete();
		itemfile.Delete();			
	}
	
	/* Close the SeekableIterator object. */
	orders.close();
		
	lastExport.SetValue(currentExportStartTime);
	

	
	return PIPELET_NEXT;
}
