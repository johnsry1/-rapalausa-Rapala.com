// Copyright © 2013 Priority Fulfillment Services, Inc. All rights reserved.
/**
 *
 * A library file for generic scripts.
 * This file is included by several script nodes using:
 *
 * importScript( "bc_common:util/ETEUtils.ds" );
 *
 *
 */
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.catalog);
importPackage(dw.io);
importPackage(dw.value);
importPackage(dw.object);
importPackage(dw.value);
importPackage(dw.order);
importPackage(dw.campaign);
importPackage(dw.net);
importPackage(dw.rpc);
importPackage(dw.web);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function addXMLElement(xWriter  : XMLIndentingStreamWriter, nodeName  : string, content  : string) {
	
	xWriter.writeStartElement(nodeName);
	
	if (content != null) {
		xWriter.writeCharacters(content);
	} else {
		xWriter.writeCharacters("");
	}
	
	xWriter.writeEndElement();
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function addXMLElementCDATA(xWriter  : XMLIndentingStreamWriter, nodeName  : string, content  : string) {
	
	xWriter.writeStartElement(nodeName);
	
	if (content != null) {
		xWriter.writeCData(content);
	} else {
		xWriter.writeCharacters("");
	}
	
	xWriter.writeEndElement();
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function createCustomObject(coType, coKey) {
	
	// Create a new custom object and initilize it with a value if it does not exist.
	try {
		Logger.debug("Creating a new custom object of type " + coType);
		var co  : CustomObject = CustomObjectMgr.createCustomObject(coType, coKey);
		return co;
	} catch (e) {
		Logger.error("Creation of custom object of type {0} failed", coType);
		return null;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function formatStringForFF(inputString  : String, flatFileFieldLength  : Number)  : String {

	var stringToFormat  : String = inputString;
	var padToLength  : Number = flatFileFieldLength;
	var formattedString  : String = "";

	//A very long string of spaces to pad with
	var paddingString  : String

	if (stringToFormat.length <= flatFileFieldLength) {
		var tempString  : String = stringToFormat + paddingString;
		var formattedString  : String = tempString.substr(0, padToLength);
	}
	return formattedString;
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function getJobExecutionTimeStamp(coType  : String, coKey  : String) {
	
	try {
		var co  : CustomObject = CustomObjectMgr.getCustomObject(coType, coKey);
		if (empty(co)) {
			co = createCustomObject(coType, coKey);
			var calendar  : dw.util.Calendar = new Calendar();
			calendar.add(Calendar.MINUTE, -180);
			var LowerBound = StringUtils.formatCalendar(calendar, "yyyy-MM-dd_HH:mm:ss").replace("_", "T");
			co.custom.UpperBoundFromLastExecution = calendar.getTime();
			return LowerBound;
		}
		
		if (!empty(co)) {
			var LowerBound = StringUtils.formatCalendar(Calendar(co.custom.UpperBoundFromLastExecution), "yyyy-MM-dd_HH:mm:ss").replace("_", "T");
			return LowerBound; // get the current counter value			
		} else {
			Logger.error("Custom object of type {0} not found", coType);
			return null;
		}
		
	} catch (e) {
		Logger.error("An error occured in ETEUtils.ds" + e.message);
		return null;
	}
}

/**
 * This function can be used to return a reference number from a custom object.
 * Input:
 * coType  : String - The type of custom object that you are wanting to retrieve a value from (for this function we are leveraging the CustomCounter object)
 * coKey   : String - The key for the value that you are wanting to retrieve (I.E. CJReference, PJReference, XXXXXReference)
 *
 **/
function getReferenceNumber(coType, coKey) {
	try {
		var coType = coType;
		var coKey = coKey;
		var co  : CustomObject = CustomObjectMgr.getCustomObject(coType, coKey);
		if (empty(co)) {
			co = createCustomObject(coType, coKey);
			co.custom.value = 1;
			return co.custom.value;
		}
		if (!empty(co)) {
			var value = co.custom.value;
			co.custom.value = value + 1;
			return value; // return the current counter value			
		} else {
			Logger.error("Custom object of type {0} not found", coType);
			return null;
		}
	} catch (e) {
		Logger.error("An error occured " + e.message);
		return null;
	}
}
/**
 *
 * This function can be called to strip any characters that are not valid in JD Edwards and replace them with a space character.
 *
 * Input:
 *	inputString  : String
 *
 * Output:
 * 	returns outputString  : String
 *
 */
function prepareStringForJDE(inputString  : String) {
	//Load inputString into a function variable
	var stringToPrepare  : String = inputString;
	//Define output string
	var outputString  : String = "";
	//Define Regular Expression and Scope
	var regularExpression = new RegExp("[^\u0000-\u00FF]", "\gm");
	//Main Action
	if (!empty(stringToPrepare)) {
		outputString = stringToPrepare.replace(regularExpression, " ");
	}
	return outputString;
	//End Main Action	
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function setJobExecutionTimeStamp(coType  : String, coKey  : String, value) {
	try {
		var coType = coType;
		var coKey = coKey;
		var co  : CustomObject = CustomObjectMgr.getCustomObject(coType, coKey);
		if (!empty(co)) {
			co.custom.UpperBoundFromLastExecution = value.getTime();
			return true;
		} else {
			Logger.error("Custom object of type {0} not found", coType);
			return false;
		}
	} catch (e) {
		Logger.error("An error occured " + e.message);
		return false;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function IsSDRMissing(currentOrder  : dw.order.Order) {
	var sdrToken  : String;
	var sdrSystemID  : String;
	var sdrFailure  : Boolean = false;
	for (var iPayInst  : Number = 1; iPayInst <= currentOrder.paymentInstruments.length; iPayInst++) {
		var payment  : OrderPaymentInstrument = currentOrder.paymentInstruments[iPayInst - 1];
		var paymentTransaction  : PaymentTransaction = payment.paymentTransaction;
		// Logger.debug("PaymentMethodID : {0}", payment.paymentMethod);
		if (payment.paymentMethod == "CREDIT_CARD" && ((empty(payment.paymentTransaction.paymentProcessor)) || (!empty(payment.paymentTransaction.paymentProcessor)))) {
			// Generate SDR Token if not taken care of by the CybersourceAuth 
			sdrToken = paymentTransaction.custom.PFSRepositoryToken;
			sdrSystemID = paymentTransaction.custom.PFSRepositorySystemID;
			if (empty(sdrToken) || sdrToken === '') {
				currentOrder.custom.iCommerceIsSDRFailure = true;
				Logger.debug("SDR token is missing for CC " + currentOrder.orderNo);
				return true;
				break;
			}
		}
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function IsCCAuthMissing(currentOrder  : dw.order.Order) {
	var shipmentIndex  : Number = 0;
	var resultValues  : HashMap;
	//get re-auth for shipment
	var countPaymentInstruments = currentOrder.paymentInstruments.length;
	var isPaymentOK  : Boolean = true;
	var shipment  : Shipment;
	for (var i  : Number = 1; i <= countPaymentInstruments; i++) {
		var payment  : dw.order.OrderPaymentInstrument = currentOrder.paymentInstruments[i - 1];
		var paymentTransaction  : dw.order.PaymentTransaction = payment.paymentTransaction;
		var transactionID  : String = paymentTransaction.transactionID || "";
		var payInstrument  : PaymentInstrument = currentOrder.paymentInstruments[i - 1];
		// Logger.debug("PaymentMethodID : {0}", payment.paymentMethod);
		if (payment.paymentMethod == "CREDIT_CARD") {
			try {
				if ('iCommerceAuthError' in currentOrder.custom && currentOrder.custom.iCommerceAuthError == "SEND_TO_JDE_FOR_AUTH") {
					return false;
				}
				if ((empty(payment.paymentTransaction.paymentProcessor)) || (!empty(payment.paymentTransaction.paymentProcessor))) {
					// Check for missing Cybersource authorization (based on transactionID and custom.requestToken)
					if (transactionID === "" || empty(paymentTransaction.custom.requestToken)) {
						//get the CC auth
						Logger.error("CC auth is missing for " + currentOrder.orderNo);
						return true;
					}
				}
			} catch (e) {
				var ex = e;
				Logger.error("Preorderexport  : error checking CC auth missing " + e.message);
				sendMail("", "", "PreOrderexport : error checking CC auth missing", "Failed for order  " + currentOrder.orderNo + ", Shipment  : " + shipment.ID + "," + e.message);
			}
		}
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function IsDiscountCalculationMissing(currentOrder  : Order) {
	var DiscountCalculationMissing  : Boolean = false;
	for each(var shipment  : Shipment in currentOrder.shipments) {
		if (!(shipment.custom.iCommerceDiscountCalulated == true)) {
			DiscountCalculationMissing = true;
			break;
		}
	}
	return DiscountCalculationMissing;
}

function CalculateDiscounts(currentOrder  : Order) {
	var shouldAvoidRounding  : Number = 0.00001;
	//for each (var shipment   : Shipment in currentOrder.shipments) {
	if ('jde_useProratedDiscountinOrderExport' in dw.system.Site.getCurrent().preferences.custom && dw.system.Site.getCurrent().preferences.custom.jde_useProratedDiscountinOrderExport) {
		/////////////////////////////////////////////
		// DW prorated
		/////////////////////////////////////////////
		// Check for Order Level Discounts jpm
		var discountGross  : Money = new Money(0, currentOrder.currencyCode);
		var orderDiscountNet  : Money = new Money(0, currentOrder.currencyCode);
		var orderDiscounts  : HashMap = new HashMap;
		var orderCoupons  : HashMap = new HashMap;
		var orderSourceCodes  : HashMap = new HashMap;
		var allproductCategories  : Collection;
		var productID  : String;
		var lineDiscountArray  : Array = null;
		lineDiscountArray = new Array();
		var hasDetailPromo  : Boolean = false;
		var promoNetDiscountAmountTotal  : Money = 0;
		var lineNetPriceValue  : Money = 0;
		var lineNetPriceDiff  : Money = 0;
		var finalNetUnitPrice  : Money = 0;
		var finalUnitDiscountedAmount  : Money = 0;
		var finalLineNetPrice  : Money = 0;
		var finalGrossUnitPrice  : Money = 0;
		var finalLineTax  : Money = 0;
		var priceAdjNetPrice  : Money = 0;
		var promoNetPriceAdj  : Money = 0;
		var prodDiscount  : Boolean = false;
		var discountTotal = 0;
		/*var Discount   : XML = new XML( 	<Discount ><DiscountName></DiscountName>
											     <DiscountCode></DiscountCode>
											     <DiscountQuantity></DiscountQuantity>
											     <DiscountAmount></DiscountAmount>
										     </Discount> );	*/
		for each(var shipment  : Shipment in currentOrder.shipments) {
				for each(var productLineItem  : ProductLineItem in shipment.productLineItems) {
						var Discount  : Object = new Object;
						var DiscountList  : Array = new Array();
						var DiscountNumber  : Number = 0;
						productLineItem.custom.iCommerceOrderExportDiscountXml = " ";
						if (productLineItem.proratedPriceAdjustmentPrices.size() == 0) {
							Logger.debug("No prorating for lineitems...");
						}
						var paVals;
						for each(var pa in productLineItem.proratedPriceAdjustmentPrices) {
							paVals = pa;
						}
						if (productLineItem.priceAdjustments.size() > 0) {
							// DiscountName
							for each(var priceadj  : PriceAdjustment in productLineItem.priceAdjustments) {
								if (priceadj.promotion.promotionClass == 'PRODUCT') {
									// DiscountName
									Discount.DiscountName = priceAdj.promotion.ID.substr(0, 20); // JDE can only accommodate 20 bytes
									//Discount Code
									var finalDiscountCode  : string = "";
									if (priceadj.basedOnCoupon) {
										finalDiscountCode = priceadj.couponLineItem.couponCode;
									}
									if (priceadj.promotion.isBasedOnSourceCodes() && !empty(currentOrder.sourceCodeGroup)) {
										var sourceCodeGroups  : Iterator = priceadj.promotion.getSourceCodeGroups()
											.iterator();
										while (sourceCodeGroups.hasNext()) {
											var sourceCodeGroup = sourceCodeGroups.next();
											if (sourceCodeGroup.ID == currentOrder.sourceCodeGroup.ID) {
												finalDiscountCode = currentOrder.sourceCode;
											}
										}
									}
									// DiscountCode
									Discount.DiscountCode = finalDiscountCode;
									//TODO
									//Discount Sales Ledger Code
									/*if ('sapcode' in priceadj.promotion.custom) {
							            			addXMLElement(xWriter, "DiscountSalesLedgerCode", priceadj.promotion.custom.sapcode.substr(0,20));
						            			}*/
									//Discount Amount
									discountTotal += priceadj.priceValue;
									Discount.DiscountAmount = priceadj.priceValue;
									DiscountNumber += 1;
									Discount.DiscountNumber = DiscountNumber;
									//productLineItem.custom.iCommerceOrderExportDiscountXml  += JSON.stringify(Discount); //Discount.toXMLString();
									DiscountList.push(Discount);
								}
							}
						}
						if (currentOrder.priceAdjustments.size() > 0) {
							for each(var i in currentOrder.priceAdjustments[0].proratedPrices.keySet()) {
								if (i.UUID == productLineItem.UUID) {
									//Discount Name
									//addXMLElement(xWriter, "DiscountProrateTest", "ProratedDiscount");
									//Discount Name
									Discount.DiscountName = currentOrder.priceAdjustments[0].promotionID.substr(0, 20); // JDE can only accommodate 20 bytes
									//Discount Code
									var finalDiscountCode  : string = "";
									if (currentOrder.priceAdjustments[0].basedOnCoupon) {
										finalDiscountCode = currentOrder.priceAdjustments[0].couponLineItem.couponCode;
									}
									if (currentOrder.priceAdjustments[0].promotion.isBasedOnSourceCodes() && !empty(currentOrder.sourceCodeGroup)) {
										var sourceCodeGroups  : Iterator = currentOrder.priceAdjustments[0].promotion.getSourceCodeGroups()
											.iterator();
										while (sourceCodeGroups.hasNext()) {
											var sourceCodeGroup = sourceCodeGroups.next();
											if (sourceCodeGroup.ID == currentOrder.sourceCodeGroup.ID) {
												finalDiscountCode = currentOrder.sourceCode;
											}
										}
									}
									Discount.DiscountCode = finalDiscountCode;
									//TODO
									//Discount Sales Ledger Code
									/*if ('sapcode' in currentOrder.priceAdjustments[0].promotion.custom) {
							            			addXMLElement(xWriter, "DiscountSalesLedgerCode", currentOrder.priceAdjustments[0].promotion.custom.sapcode.substr(0,20));
						            			}*/
									//Discount Amount
									discountTotal += currentOrder.priceAdjustments[0].proratedPrices.get(i)
										.value;
									Discount.DiscountAmount = currentOrder.priceAdjustments[0].proratedPrices.get(i)
										.value;
									DiscountNumber += 1;
									Discount.DiscountNumber = DiscountNumber;
									//productLineItem.custom.iCommerceOrderExportDiscountXml  +=  JSON.stringify(Discount); //Discount.toXMLString();
									DiscountList.push(Discount);
								}
							}
						}
						productLineItem.custom.iCommerceOrderExportDiscountXml = JSON.stringify(DiscountList);
					} // for each product line item
				shipment.custom.iCommerceDiscountCalulated = true;
			} //for each shipment
			///end discount test
	} else { // else for pfs_useProratedDiscountinOrderExport
		//Fallback to legacy discount splitting.
		//++++++++++++++++++++
		for each(var shipment  : Shipment in currentOrder.shipments) {
				// Check for Order Level Discounts jpm
				var discountGross  : Money = new Money(0, currentOrder.currencyCode);
				var orderDiscountNet  : Money = new Money(0, currentOrder.currencyCode);
				var orderDiscounts  : HashMap = new HashMap;
				var orderCoupons  : HashMap = new HashMap;
				var orderSourceCodes  : HashMap = new HashMap;
				if (!empty(currentOrder.priceAdjustments)) {
					var discountNet  : Money = new Money(0, currentOrder.currencyCode);
					var discountTax  : Money = new Money(0, currentOrder.currencyCode);
					for each(var priceAdjustment  : PriceAdjustment in currentOrder.priceAdjustments) {
						discountNet = discountNet.add(priceAdjustment.netPrice);
						discountTax = discountTax.add(priceAdjustment.tax);
						orderDiscountNet = priceAdjustment.netPrice;
						orderDiscounts.put(priceAdjustment.promotionID, orderDiscountNet.multiply(-1));
						if (priceAdjustment.isBasedOnCoupon()) {
							orderCoupons.put(priceAdjustment.promotionID, priceAdjustment.couponLineItem.couponCode);
						}
						var isSourceCodeBased  : Boolean = false;
						try {
							isSourceCodeBased = priceAdjustment.promotion.isBasedOnSourceCodes() && !empty(currentOrder.sourceCodeGroup);
						} catch (ex) {}
						if (isSourceCodeBased) {
							var sourceCodeGroups  : Iterator = priceAdjustment.promotion.getSourceCodeGroups()
								.iterator();
							while (sourceCodeGroups.hasNext()) {
								var sourceCodeGroup = sourceCodeGroups.next();
								if (sourceCodeGroup.ID == currentOrder.sourceCodeGroup.ID) {
									orderSourceCodes.put(priceAdjustment.promotionID, currentOrder.sourceCode);
								}
							}
						}
					}
					var discountGross  : Money = discountNet.multiply(-1);
					// Retrieve Merchandize Gross and Net Total
					var merchandizeGross  : Money = getTotalShipmentMerchandiseValue(currentOrder); //DG to check
					var merchandizeNet  : Money = currentOrder.adjustedMerchandizeTotalPrice;
					Logger.debug("discountGross={0}, merchandizeGross={1}, merchandizeNet={2}", discountGross, merchandizeGross, merchandizeNet);
				}
				// Check for Product Level Discounts jpm
				var productDiscounts  : HashMap = new HashMap; // Used for product lines that will use the consolidated product discounts
				var productPriceAdj  : HashMap = new HashMap; // Used for product lines that will use the the product lines price adjustments
				var productCoupons  : HashMap = new HashMap;
				for each(var productDiscount  : PriceAdjustment in shipment.allLineItems) {
						if (productDiscount.price < 0 && productDiscount.promotion != null) {
							if (productDiscount.promotion.promotionClass == 'PRODUCT') {
								if (productDiscounts.containsKey(productDiscount.promotionID)) { // If promotionID already exists on the productDiscount hashmap, move it to productPriceAdj.
									var proddiscprice  : Number = productDiscounts.get(productDiscount.promotionID);
									productDiscounts.put(productDiscount.promotionID, productDiscount.netPrice.value + proddiscprice);
								} else {
									if (!productPriceAdj.containsKey(productDiscount.promotionID)) {
										productDiscounts.put(productDiscount.promotionID, productDiscount.netPrice.value);
										if (productDiscount.isBasedOnCoupon()) {
											productCoupons.put(productDiscount.promotionID, productDiscount.couponLineItem.couponCode);
										}
									}
								}
							} else if (productDiscount.promotion.promotionClass == 'ORDER') { // Bonus product with price > 0; In this scenario, the promotion class is ORDER  
								productPriceAdj.put(productDiscount.promotionID, productDiscount.netPrice.value); // but it has a product level price adjustment.   
							}
						}
					}
					// Get Merchandize Total of Qualifying and Discounted Products for Product Level Discounts jpm
				var productTotalDiscounts  : HashMap = new HashMap;
				var bonusProduct  : HashMap = new HashMap;
				var merchandizeNetPromo  : Money = 0;
				for each(var productLineItem  : ProductLineItem in shipment.productLineItems) {
						if (productLineItem.product == null) {
							try {
								Logger.debug("ERROR processing product line item - product is null! {0}", productLineItem.productID);
							} catch (exProductNull) {}
							return false;
						}
						productLineItem.custom.iCommerceOrderExportDiscountXml = " ";
						var pDiscounts  : Array = new Array();
						// Check for Bonus Products on Order Level Discounts jpm
						for each(var priceAdjustment  : PriceAdjustment in productLineItem.priceAdjustments) {
							if (productLineItem.bonusProductLineItem) {
								bonusProduct.put(productLineItem.productID, productLineItem.productName);
								if (productDiscounts.containsKey(priceAdjustment.promotionID)) { // If promotionID already exists on the productDiscounts hashmap, move it to productPriceAdj.
									productDiscounts.remove(priceAdjustment.promotionID);
									productTotalDiscounts.remove(priceAdjustment.promotionID);
									if (!productPriceAdj.containsKey(priceAdjustment.promotionID)) {
										productPriceAdj.put(priceAdjustment.promotionID, priceAdjustment.netPrice.value);
									}
								}
							} else {
								if (bonusProduct.containsKey(productLineItem.productID)) {
									bonusProduct.remove(productLineItem.productID);
								}
							}
						}
						if (!bonusProduct.containsKey(productLineItem.productID)) {
							var promotionsProduct  : Iterator = PromotionMgr.getActivePromotions()
								.getProductPromotions(productLineItem.product)
								.iterator();
							while (promotionsProduct.hasNext()) {
								var promotionProduct = promotionsProduct.next();
								if (productDiscounts.containsKey(promotionProduct.ID)) {
									if (productTotalDiscounts.containsKey(promotionProduct.ID)) {
										merchandizeNetPromo = productTotalDiscounts.get(promotionProduct.ID);
										merchandizeNetPromo = merchandizeNetPromo + productLineItem.netPrice;
									} else {
										merchandizeNetPromo = productLineItem.netPrice;
									}
									productTotalDiscounts.put(promotionProduct.ID, merchandizeNetPromo);
								}
							}
						}
						// Check for Non-Qualifying Products on Order Level Discounts jpm
						if (!empty(currentOrder.priceAdjustments)) {
							var allproductCategories  : Collection;
							var productID  : String;
							if (productLineItem.product.categorized == false) {
								allproductCategories = productLineItem.product.masterProduct.allCategories;
								productID = productLineItem.product.masterProduct.ID;
							} else {
								allproductCategories = productLineItem.product.allCategories;
								productID = productLineItem.productID;
							}
							var isExcluded  : Boolean = checkOrderPromotion(currentOrder.priceAdjustments, productID, allproductCategories);
							if (isExcluded == true) {
								merchandizeGross = merchandizeGross - productLineItem.adjustedNetPrice;
								Logger.debug("New merchandizeGross={0}, Non-Qualifying Product={1}", merchandizeGross, productID);
							}
						}
					}
					/*var Discount   : XML = new XML( 	<Discount ><DiscountName></DiscountName>
											     <DiscountCode></DiscountCode>
											     <DiscountQuantity></DiscountQuantity>
											     <DiscountAmount></DiscountAmount>
										     </Discount> );*/
					//+++++++++++++++++++++++
				for each(var productLineItem  : ProductLineItem in shipment.productLineItems) {
						var DiscountList  : Array = new Array();
						var DiscountNumber  : Number = 0;
						var qty  : Number = productLineItem.quantity.value;
						var unitNetPrice  : Money = productLineItem.adjustedNetPrice.divide(qty);
						var unitGrossPrice  : Money = productLineItem.netPrice.divide(qty); // per Jeff's email this should be the "non-discounted unit price"
						var lineNetPrice  : Money = productLineItem.adjustedNetPrice;
						var discount  : Money = new Money(0, productLineItem.netPrice.currencyCode);
						var finalNetUnitPrice  : Money = 0.00 + shouldAvoidRounding;
						var finalUnitDiscountedAmount  : Money = 0.00 + shouldAvoidRounding;
						var finalLineNetPrice  : Money = 0.00 + shouldAvoidRounding;
						var finalGrossUnitPrice : Money = 0.00 + shouldAvoidRounding;
						var finalLineTax : Money = 0.00 + shouldAvoidRounding;
						for each(var priceAdjustment : PriceAdjustment in productLineItem.priceAdjustments) {
								discount = discount.add(priceAdjustment.netPrice);
							}
							/////////////////////////////////////////////
							// Discounts
							/////////////////////////////////////////////
						var lineDiscountArray : Array = null;
						lineDiscountArray = new Array();
						var hasDetailPromo : Boolean = false;
						var promoNetDiscountAmountTotal : Money = 0;
						var lineNetPriceValue : Money = 0;
						var lineNetPriceDiff : Money = 0;
						// Verify if product has product level promotions using product lines price adjustments jpm
						var priceAdjs : Iterator = productLineItem.priceAdjustments.iterator();
						while (priceAdjs.hasNext()) {
							var priceAdj = priceAdjs.next();
							if (!empty(priceAdj.promotion)) {
								if (productPriceAdj.containsKey(priceAdj.promotion.ID)) {
									var priceAdjNetPrice = priceAdj.netPrice * -1;
									promoNetDiscountAmountTotal = promoNetDiscountAmountTotal + priceAdjNetPrice;
									var promoNetPriceAdj : Money = productLineItem.netPrice - promoNetDiscountAmountTotal;
									finalNetUnitPrice = Math.round((promoNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
									finalLineNetPrice = promoNetPriceAdj;
									//lineItemRequest.netUnitPrice = Math.round((promoNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
									//lineItemRequest.lineNetPrice = promoNetPriceAdj;
									hasDetailPromo = true;
									// Add line level discount info jpm
									//xWriter.writeStartElement("Discount");
									//Discount.DiscountCode = ;
									// DiscountName
									var Discount : Object = new Object;
									Discount.DiscountName = priceAdj.promotion.ID.substr(0, 20); // JDE can only accommodate 20 bytes
									// DiscountCode
									var finalDiscountCode : string = "";
									if (priceAdj.basedOnCoupon) {
										finalDiscountCode = priceAdj.couponLineItem.couponCode;
									}
									if (priceAdj.promotion.isBasedOnSourceCodes() && !empty(currentOrder.sourceCodeGroup)) {
										var sourceCodeGroups : Iterator = priceAdj.promotion.getSourceCodeGroups()
											.iterator();
										while (sourceCodeGroups.hasNext()) {
											var sourceCodeGroup = sourceCodeGroups.next();
											if (sourceCodeGroup.ID == currentOrder.sourceCodeGroup.ID) {
												finalDiscountCode = currentOrder.sourceCode;
											}
										}
									}
									Discount.DiscountCode = finalDiscountCode;
									Discount.DiscountQuantity = productLineItem.quantity.value;
									// DiscountAmount
									Discount.DiscountAmount = priceAdjNetPrice;
									//productLineItem.custom.iCommerceOrderExportDiscountXml  +=  JSON.stringify(Discount);
									DiscountNumber += 1;
									Discount.DiscountNumber = DiscountNumber;
									DiscountList.push(Discount);
									//	xWriter.writeEndElement();  // Discount
									Logger.debug("Product Level Discount Name={0}, Discount Code={1}, Discount Quantity={2}, Discount Amount={3}", priceAdj.promotion.ID.substr(0, 20), finalDiscountCode, productLineItem.quantity.value, priceAdjNetPrice);
									Logger.debug("Promotion Net Price={0}, Promotion Net Total Price={1}, Promo Net Price Adj={2}", priceAdjNetPrice, finalNetUnitPrice, finalLineNetPrice);
								}
							} else {
								var priceAdjNetPrice = priceAdj.netPrice * -1;
								promoNetDiscountAmountTotal = promoNetDiscountAmountTotal + priceAdjNetPrice;
								var promoNetPriceAdj : Money = productLineItem.netPrice - promoNetDiscountAmountTotal;
								finalNetUnitPrice = Math.round((promoNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
								finalLineNetPrice = promoNetPriceAdj;
								//lineItemRequest.netUnitPrice = Math.round((promoNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
								//lineItemRequest.lineNetPrice = promoNetPriceAdj;
								hasDetailPromo = true;
								//xWriter.writeStartElement("Discount");
								var Discount : Object = new Object;
								// DiscountName
								Discount.DiscountName = priceAdj.promotionID.substr(0, 20); // JDE can only accommodate 20 bytes
								Discount.DiscountCode = priceAdj.promotionID.substr(0, 20);;
								Discount.DiscountQuantity = productLineItem.quantity.value;
								// DiscountAmount
								Discount.DiscountAmount = priceAdjNetPrice;
								//productLineItem.custom.iCommerceOrderExportDiscountXml += JSON.stringify(Discount); //Discount.toXMLString();
								DiscountNumber += 1;
								Discount.DiscountNumber = DiscountNumber;
								DiscountList.push(Discount);
								//xWriter.writeEndElement();  // Discount
								Logger.debug("Product Level Discount Name={0}, Discount Code={1}, Discount Quantity={2}, Discount Amount={3}", priceAdj.promotionID.substr(0, 20), finalDiscountCode, productLineItem.quantity.value, priceAdjNetPrice);
								Logger.debug("Promotion Net Price={0}, Promotion Net Total Price={1}, Promo Net Price Adj={2}", priceAdjNetPrice, finalNetUnitPrice, finalLineNetPrice);
							}
						}
						// Verify if product has product level promotions using consolidated discounts jpm
						if (!bonusProduct.containsKey(productLineItem.productID)) {
							var promotions : Iterator = PromotionMgr.getActivePromotions()
								.getProductPromotions(productLineItem.product)
								.iterator();
							while (promotions.hasNext()) {
								var promotion = promotions.next();
								if (productDiscounts.containsKey(promotion.ID) && !productPriceAdj.containsKey(promotion.ID)) {
									var promoNetPrice = productDiscounts.get(promotion.ID) * -1;
									var promoNetTotalPrice = productTotalDiscounts.get(promotion.ID);
									var promoNetDiscountAmount = (productLineItem.netPrice * (promoNetPrice / promoNetTotalPrice));
									promoNetDiscountAmountTotal = promoNetDiscountAmountTotal + promoNetDiscountAmount;
									var promoNetPriceAdj : Money = productLineItem.netPrice - promoNetDiscountAmountTotal;
									finalNetUnitPrice = Math.round((promoNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
									finalLineNetPrice = Math.round(promoNetPriceAdj * 100) / 100;
									//lineItemRequest.netUnitPrice = Math.round((promoNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
									//lineItemRequest.lineNetPrice = Math.round(promoNetPriceAdj * 100) / 100;
									hasDetailPromo = true;
									// Add line level discount info jpm
									//xWriter.writeStartElement("Discount");
									// DiscountName
									var Discount : Object = new Object;
									Discount.DiscountName = promotion.ID.substr(0, 20); // JDE can only accommodate 20 bytes
									// DiscountCode
									var finalDiscountCode : string = "";
									if (productCoupons.containsKey(promotion.ID)) {
										finalDiscountCode = productCoupons.get(promotion.ID);
									}
									if (promotion.isBasedOnSourceCodes() && !empty(currentOrder.sourceCodeGroup)) {
										var sourceCodeGroups : Iterator = promotion.getSourceCodeGroups()
											.iterator();
										while (sourceCodeGroups.hasNext()) {
											var sourceCodeGroup = sourceCodeGroups.next();
											if (sourceCodeGroup.ID == currentOrder.sourceCodeGroup.ID) {
												finalDiscountCode = currentOrder.sourceCode;
											}
										}
									}
									Discount.DiscountCode = finalDiscountCode;
									Discount.DiscountQuantity = productLineItem.quantity.value;
									// DiscountAmount
									Discount.DiscountAmount = Math.round(promoNetDiscountAmount * 100) / 100;;
									//productLineItem.custom.iCommerceOrderExportDiscountXml += JSON.stringify(Discount); //Discount.toXMLString();            		
									//xWriter.writeEndElement();  // Discount
									DiscountNumber += 1;
									Discount.DiscountNumber = DiscountNumber;
									DiscountList.push(Discount);
									Logger.debug("Product Level Discount Name={0}, Discount Code={1}, Discount Quantity={2}, Discount Amount={3}", promotion.ID.substr(0, 20), finalDiscountCode, productLineItem.quantity.value, Math.round(promoNetDiscountAmount * 100) / 100);
									Logger.debug("Promotion Net Price={0}, Promotion Net Total Price={1}, Promo Net Price Adj={2}", promoNetPrice, promoNetTotalPrice, promoNetPriceAdj);
								}
							}
						}
						// Order Level Discounts will be spread across all Product Line Items jpm
						if (!empty(currentOrder.priceAdjustments)) {
							// Check for Non-Qualifying Products on Order Level Discounts jpm
							if (productLineItem.product.categorized == false) {
								allproductCategories = productLineItem.product.masterProduct.allCategories;
								productID = productLineItem.product.masterProduct.ID;
							} else {
								allproductCategories = productLineItem.product.allCategories;
								productID = productLineItem.productID;
							}
							var isExcluded : Boolean = checkOrderPromotion(currentOrder.priceAdjustments, productID, allproductCategories);
							if (isExcluded == false) {
								//problem
								if (hasDetailPromo) {
									var lineNetDiscountAmount = promoNetPriceAdj * (discountGross / merchandizeGross);
									var lineNetPriceAdj : Money = promoNetPriceAdj - lineNetDiscountAmount;
								} else {
									var lineNetDiscountAmount = lineNetPrice.value * (discountGross / merchandizeGross);
									var lineNetPriceAdj : Money = lineNetPrice.value - lineNetDiscountAmount;
								}
								finalNetUnitPrice = Math.round((lineNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
								finalLineNetPrice = Math.round(lineNetPriceAdj * 100) / 100;
								//lineItemRequest.netUnitPrice = Math.round((lineNetPriceAdj / productLineItem.quantity.value) * 100) / 100;
								//lineItemRequest.lineNetPrice = Math.round(lineNetPriceAdj * 100) / 100;
								// Add line level discount info jpm
								for each(var discountID : String in orderDiscounts.keySet()) {
									var orderDiscountID : String = discountID;
									var orderDiscountAmount = orderDiscounts.get(discountID);
									// DiscountCode
									var finalDiscountCode : string = "";
									if (orderCoupons.containsKey(discountID)) {
										finalDiscountCode = orderCoupons.get(discountID);
									}
									if (orderSourceCodes.containsKey(discountID)) {
										finalDiscountCode = orderSourceCodes.get(discountID);
									}
									// DiscountAmount
									var finalDiscountAmount : Money = 0;
									if (hasDetailPromo) {
										finalDiscountAmount = Math.round(promoNetPriceAdj * (orderDiscountAmount / merchandizeGross) * 100) / 100;
									} else {
										finalDiscountAmount = Math.round(lineNetPrice.value * (orderDiscountAmount / merchandizeGross) * 100) / 100;
									}
									// Check and balance out the discount amount and unit price to match the gross line price (extended price)
									// Any difference will be added/subtracted from discount amount
									lineNetPriceValue = finalNetUnitPrice * productLineItem.quantity.value + finalDiscountAmount;
									lineNetPriceDiff = lineNetPrice - lineNetPriceValue;
									var discountsAdded : Boolean = false;
									if (lineNetPriceDiff != 0) {
										finalDiscountAmount = Math.round((finalDiscountAmount + lineNetPriceDiff) * 100) / 100;
										discountsAdded = true;
									}
									if (finalDiscountAmount > 0) {
										//xWriter.writeStartElement("Discount");
										var Discount : Object = new Object;
										Discount.DiscountName = orderDiscountID.substr(0, 20); // JDE can only accommodate 20 bytes
										Discount.DiscountCode = finalDiscountCode;
										Discount.DiscountQuantity = productLineItem.quantity.value;
										Discount.DiscountAmount = finalDiscountAmount;
										DiscountNumber += 1;
										Discount.DiscountNumber = DiscountNumber;
										DiscountList.push(Discount);
										//xWriter.writeEndElement();  // Discount
										Logger.debug("Order Level Discount Name={0}, Discount Code={1}, Discount Quantity={2}, Discount Amount={3}", orderDiscountID.substr(0, 20), finalDiscountCode, productLineItem.quantity.value, finalDiscountAmount);
									}
								}
							} else {
								if (!hasDetailPromo) {
									finalNetUnitPrice = Math.round(unitNetPrice.value * 100) / 100;
									finalLineNetPrice = Math.round(lineNetPrice.value * 100) / 100;
									//lineItemRequest.netUnitPrice = Math.round(unitNetPrice.value * 100) / 100;
									//lineItemRequest.lineNetPrice = Math.round(lineNetPrice.value * 100) / 100;
								}
							}
						} else {
							if (!hasDetailPromo) {
								finalNetUnitPrice = Math.round(unitNetPrice.value * 100) / 100;
								finalLineNetPrice = Math.round(lineNetPrice.value * 100) / 100;
								//lineItemRequest.netUnitPrice = Math.round(unitNetPrice.value * 100) / 100;
								//lineItemRequest.lineNetPrice = Math.round(lineNetPrice.value * 100) / 100;
							}
						}
						//xWriter.writeEndElement();  // Discounts
						finalGrossUnitPrice = Math.round(unitGrossPrice.value * 100) / 100;
						Logger.debug("grossUnitPrice={0}, netUnitPrice={1}, lineNetPrice={2}", finalGrossUnitPrice, finalNetUnitPrice, finalLineNetPrice);
						if (discount.value < 0) {
							finalUnitDiscountedAmount = discount.value - shouldAvoidRounding;
						} else {
							finalUnitDiscountedAmount = discount.value + shouldAvoidRounding;
						}
						finalLineTax = productLineItem.adjustedTax.value + shouldAvoidRounding;
						//populate the line item prices after discounts
						productLineItem.custom.iCommerceFinalGrossUnitPrice = finalGrossUnitPrice;
						productLineItem.custom.iCommerceFinalLineNetPrice = finalLineNetPrice;
						productLineItem.custom.iCommerceFinalLineTax = finalLineTax;
						productLineItem.custom.iCommerceFinalNetUnitPrice = finalNetUnitPrice;
						productLineItem.custom.iCommerceFinalUnitDiscountedAmount = finalUnitDiscountedAmount;
						productLineItem.custom.iCommerceOrderExportDiscountXml = JSON.stringify(DiscountList);
					} //for each productlinetItem
				shipment.custom.iCommerceDiscountCalulated = true;
			} //for each shipment
	} //else for usedwprorated condition.
} //end of function
	
	
/*
 *Check if product qualifies for the order level promotion jpm
 */
function checkOrderPromotion(priceAdjustments : Collection, productID : String, allproductCategories : Collection) : Boolean {
	try {
		var priceAdjustments : Collection = priceAdjustments;
		for each(var priceAdjustment : PriceAdjustment in priceAdjustments) {
			var promotion : Promotion = priceAdjustment.getPromotion();
			if (!empty(promotion) && 'nonqualifyingProducts' in promotion.custom) {
				var nonqualifyingProducts : ArrayList = promotion.custom.nonqualifyingProducts;
				for (var i : Number = 0; i < nonqualifyingProducts.length; i++) {
					if (productID == nonqualifyingProducts[i]) {
						return true;
					} else {
						var productCategories : Iterator = allproductCategories.iterator();
						while (productCategories.hasNext()) {
							var productCategory = productCategories.next();
							if (productCategory.ID == nonqualifyingProducts[i]) {
								return true;
							}
						}
					}
				}
			}
		}
	} catch (ex) {
		return false;
	}
	return false;
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function getTotalShipmentMerchandiseValue(currentOrder : Order) {
	var totMerchValue : Money = 0.00;
	for each(var shipment : Shipment in currentOrder.shipments) {
		totMerchValue = totMerchValue + shipment.adjustedMerchandizeTotalPrice;
	}
	return totMerchValue;
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function sendMail(receipientEmail : String, senderEmail : String, subject : String, emailMessageText : String) {
	var mail : Mail = new dw.net.Mail();
	var mSubject : String = getSytemType() + "::" + subject;
	if (empty(senderEmail)) {
		senderEmail = Site.getCurrent().getCustomPreferenceValue("ete_systemEmailAddress");
	}
	if (empty(receipientEmail)) {
		receipientEmail = Site.getCurrent().getCustomPreferenceValue("ete_adminEmailAddress");
	}
	mail.addTo(receipientEmail);
	mail.setFrom(senderEmail);
	mail.setSubject(mSubject);
	// sets the content of the mail as plain string
	mail.setContent(emailMessageText);
	mail.send();
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function getSytemType() {
	var systemType : String;
	if (System.getInstanceType() == System.PRODUCTION_SYSTEM) {
		systemType = "Production";
		return systemType;
	} else if (System.getInstanceType() == System.STAGING_SYSTEM) {
		systemType = "Staging";
		return systemType;
	} else if (System.getInstanceType() == System.DEVELOPMENT_SYSTEM) {
		systemType = "Development";
		return systemType;
	} else {
		systemType = System.getInstanceHostname();
		return systemType;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function getPaymentInstrumentsForShipment(basket : Basket, shipment : Shipment, PaymentMethod : String) {
	var paymentInstrForShipment : PaymentInstrument;
	var collPaymentInstr : Collection = new ArrayList();
	var numberOfOrderShipments = basket.getShipments()
		.size();
	if ((numberOfOrderShipments > 1) && ('jde_separateAuthPerShipment' in dw.system.Site.current.preferences.custom && dw.system.Site.current.preferences.custom.jde_separateAuthPerShipment)) {
		//we are keeping shipmentid reference in case of multiship to.
		for each(var paymentInstr : PaymentInstrument in basket.getPaymentInstruments(PaymentMethod)) {
			if (paymentInstr.custom.iCommerceShipmentRef == shipment.ID) {
				collPaymentInstr.add(paymentInstr);
			}
		}
	} else {
		paymentInstrForShipment = getCreditCardPaymentInstrument(basket);
		collPaymentInstr.add(paymentInstrForShipment);
	}
	// return payment Instrument ForShipment
	return collPaymentInstr;
}

function getShipmentForPaymentInstrument(basket : Basket, ForPaymentInstrument : OrderPaymentInstrument, PaymentMethod : String) {
	var Shipment : Shipment = basket.getShipment(ForPaymentInstrument.custom.iCommerceShipmentRef);
	return Shipment;
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*function fillPrimaryInfo(cyberSourceRequest : Object, basket : Basket, OrderNumber : String, ForShipment : Shipment) {
	//MC declare the variable to capture the decisionManagerShipMethod
	var freightMethodDM : String;
	Logger.debug("initial freight method {0}", freightMethodDM);
	cyberSourceRequest['merchantRefNumber'] = OrderNumber;
	cyberSourceRequest['firstname'] = basket.billingAddress.firstName;
	cyberSourceRequest['lastname'] = basket.billingAddress.lastName;
	//test only
	//if(ForShipment.custom.iCommerceIsStorePickup){
	//  									cyberSourceRequest['lastname'] = "REJECT";
	//									}
	cyberSourceRequest['phone'] = basket.billingAddress.phone;
	cyberSourceRequest['companyName'] = basket.billingAddress.companyName;
	cyberSourceRequest['email'] = basket.customerEmail;
}

//--------------------------------------------------------------------------------------------------------------------------------------------
function fillFingerPrintingInfo(cyberSourceRequest : Object, basket : Basket) {
	// rkb 2013-03-20 - add device fingerprint id if site configured as such
	if (Site.getCurrent().getCustomPreferenceValue("cs_DeviceFingerprintEnabled")) {
		var fingerprint : String = session.sessionID;
		cyberSourceRequest['device_fingerprint_id'] = fingerprint;
	}
}

//---------------------------------------------------------------------------------------------------------------------------------------------
function fillBillingInfo(cyberSourceRequest : Object, basket : Basket) {
	cyberSourceRequest['billingAddress'] = new Object();
	cyberSourceRequest['billingAddress']['address1'] = basket.billingAddress.address1;
	cyberSourceRequest['billingAddress']['address2'] = basket.billingAddress.address2;
	cyberSourceRequest['billingAddress']['city'] = basket.billingAddress.city;
	cyberSourceRequest['billingAddress']['countryCode'] = basket.billingAddress.countryCode;
	cyberSourceRequest['billingAddress']['stateCode'] = basket.billingAddress.stateCode;
	cyberSourceRequest['billingAddress']['postalCode'] = basket.billingAddress.postalCode;
	cyberSourceRequest['currencyCode'] = basket.getCurrencyCode();
	cyberSourceRequest['basketTotal'] = basket.totalGrossPrice.value;
}

//--------------------------------------------------------------------------------------------------------------------------------------------
function fillShippingInfo(cyberSourceRequest : Object, basket : Basket, ForShipment : Shipment) {
	//MC declare the variable to capture the decisionManagerShipMethod
	var freightMethodDM : String;
	cyberSourceRequest['shippingAddress'] = new Object();
	cyberSourceRequest['shippingAddress']['firstname'] = "";
	cyberSourceRequest['shippingAddress']['lastname'] = "";
	cyberSourceRequest['shippingAddress']['address1'] = "";
	cyberSourceRequest['shippingAddress']['address2'] = "";
	cyberSourceRequest['shippingAddress']['city'] = "";
	cyberSourceRequest['shippingAddress']['countryCode'] = "";
	cyberSourceRequest['shippingAddress']['stateCode'] = "";
	cyberSourceRequest['shippingAddress']['postalCode'] = "";
	cyberSourceRequest['shippingCost'] = 0;
	cyberSourceRequest['shippingTax'] = 0;
	var shipment : dw.order.Shipment = ForShipment;
	if (!shipment.getProductLineItems()
		.empty) {
		cyberSourceRequest.shippingAddress.firstname = shipment.shippingAddress.firstName;
		cyberSourceRequest.shippingAddress.lastname = shipment.shippingAddress.lastName;
		//test only
		//if(ForShipment.custom.iCommerceIsStorePickup){
		//	cyberSourceRequest.shippingAddress.lastname = "REJECT";
		//}
		cyberSourceRequest.shippingAddress.address1 = shipment.shippingAddress.address1;
		cyberSourceRequest.shippingAddress.address2 = shipment.shippingAddress.address2;
		cyberSourceRequest.shippingAddress.city = shipment.shippingAddress.city;
		cyberSourceRequest.shippingAddress.countryCode = shipment.shippingAddress.countryCode;
		cyberSourceRequest.shippingAddress.stateCode = shipment.shippingAddress.stateCode;
		cyberSourceRequest.shippingAddress.postalCode = shipment.shippingAddress.postalCode;
		cyberSourceRequest.shippingCost = shipment.adjustedShippingTotalNetPrice.value;
		cyberSourceRequest.shippingTax = shipment.adjustedShippingTotalTax.value;
		cyberSourceRequest.shippingTax = shipment.adjustedShippingTotalTax.value;
		cyberSourceRequest.giftwrap = shipment.custom.giftWrappingFlag;
		
		//MC 01-26-09 get the custom attribute decisionmanagerShipMethod and add it to CyberSource request
		if (empty(freightMethodDM)) {
			try {
				if (!empty(shipment.getShippingMethod().custom.CybersouceShippingID)) {
					if (shipment.getShippingMethod().custom.CybersouceShippingID.getValue() != null) {
						freightMethodDM = shipment.getShippingMethod().custom.CybersouceShippingID.getValue();
					}
				}
			} catch (e) {
				freightMethodDM = "";
			}
		}
	}
	if (ForShipment.custom.iCommerceIsStorePickup) {
		freightMethodDM = "pickup";
	} else {
		freightMethodDM = "other";
	}
	Logger.debug("shipping method {0}", freightMethodDM);
	if (!empty(freightMethodDM)) {
		cyberSourceRequest['shipping_method'] = freightMethodDM;
	} else {
		cyberSourceRequest['shipping_method'] = "";
	}
	//end MC 01-26-09
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
function fillCustomerBrowserInfo(cyberSourceRequest : Object, basket : Basket, CurrentSession : dw.system.Session, CurrentRequest : dw.system.Request) {
	//cyberSourceRequest['customerHostname'] = pdict.CurrentRequest.httpRemoteAddress;
	if (CurrentSession != null && CurrentSession.userName == 'storefront') {
		cyberSourceRequest['customerIPAddress'] = CurrentRequest.httpRemoteAddress;
		cyberSourceRequest['customerBrowser'] = CurrentRequest.httpUserAgent;
		cyberSourceRequest['ecommerceIndicator'] = "internet";
		cyberSourceRequest['browserEmail'] = basket.customerEmail;
		cyberSourceRequest['sendBrowserInfo'] = true;
	} else {
		if (CurrentRequest != null) {
			cyberSourceRequest['customerIPAddress'] = CurrentRequest.httpRemoteAddress;
			cyberSourceRequest['customerBrowser'] = CurrentRequest.httpUserAgent;
		}
		cyberSourceRequest['ecommerceIndicator'] = "internet";
		cyberSourceRequest['browserEmail'] = basket.customerEmail;
		cyberSourceRequest['sendBrowserInfo'] = false;
	}
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------
function fillCreditCardInfo(cyberSourceRequest : Object, basket : Basket, ForShipment : Shipment, CurrentSession : dw.system.Session) {
	cyberSourceRequest['creditcard'] = new Object();
	cyberSourceRequest['creditcard']['type'] = "";
	cyberSourceRequest['creditcard']['month'] = "";
	cyberSourceRequest['creditcard']['year'] = "";
	cyberSourceRequest['creditcard']['number'] = "";
	cyberSourceRequest['creditcard']['cvn'] = "";
	var pi : PaymentInstrument = null;
	creditCardAmount = 0.00;
	var GCAmount : Number;
	//DG for multiple shipment
	// creditCardAmount = 0.00 ;
	var collPayInstr : Collection = getPaymentInstrumentsForShipment(basket, ForShipment, PaymentInstrument.METHOD_CREDIT_CARD);
	for each(var paymentInstrument : PaymentInstrument in collPayInstr) {
		if (paymentInstrument.getPaymentMethod() == PaymentInstrument.METHOD_CREDIT_CARD) {
			cyberSourceRequest.creditcard.type = Resource.msg("creditcard." + paymentInstrument.creditCardType, 'cybersourceCreditCardTypes', null);
			cyberSourceRequest.creditcard.month = paymentInstrument.creditCardExpirationMonth;
			cyberSourceRequest.creditcard.year = paymentInstrument.creditCardExpirationYear;
			cyberSourceRequest.creditcard.number = getDecryptedCCNumber(paymentInstrument);
			cyberSourceRequest.creditcard.cvn = getDecryptedCVN(CurrentSession);
			creditCardAmount += paymentInstrument.paymentTransaction.amount.value;
			//Logger.error("CyberSourceAuthorization.ds : CCN={0}",cyberSourceRequest.creditcard.number);
			//Logger.error("CyberSourceAuthorization.ds : CVN={0}",cyberSourceRequest.creditcard.cvn);
			pi = paymentInstrument;
		}
	} //end for
	
	//
	// reset basketTotal if there are gift card payment instruments
	//
	cyberSourceRequest['basketTotal'] = creditCardAmount;
}

//--------------------------------------------------------------------------------------------------------------------------------------------
function AddAdditionalCharges(cyberSourceRequest : Object, basket : Basket, shipment : Shipment) : Number {
	cyberSourceRequest['productLineItems'] = new ArrayList();
	for each(var productLineItem : ProductLineItem in shipment.productLineItems) {
		var pli : Object = new Object();
		var pliAdjustedNetPrice : Number = productLineItem.adjustedNetPrice.value;
		var quantity : Number = productLineItem.quantityValue;
		pli['unitAdjustedNetPrice'] = pliAdjustedNetPrice / quantity;
		pli['adjustedTaxAmount'] = productLineItem.adjustedTax.value;
		pli['quantity'] = quantity;
		if (!productLineItem.optionProductLineItem) {
			pli['sku'] = productLineItem.product.ID;
			pli['name'] = productLineItem.product.name;
		}
		if (productLineItem.optionProductLineItem) {
			try {
				pli['sku'] = productLineItem.optionID;
				pli['name'] = productLineItem.optionValueID;
				creditCardAmount += productLineItem.price * quantity;
			} catch (e) {
				var ex = e;
				Logger.error("CyberSourceAuthorization.ds : Error for product option - " & e.message);
			}
		}
		if ('isMonogram' in productLineItem.custom) {
			if (!empty(productLineItem.custom.isMonogram) && productLineItem.custom.isMonogram) {
				creditCardAmount += productLineItem.custom.monogramUnitPrice * quantity;
				creditCardAmount += productLineItem.custom.monoTaxAmount1 + productLineItem.custom.monoTaxAmount2;
			}
		}
		if ('isLineLevelGift' in productLineItem.custom) {
			if (!empty(productLineItem.custom.isLineLevelGift) && productLineItem.custom.isLineLevelGift) {
				creditCardAmount += productLineItem.custom.lineLevelGiftPrice;
				creditCardAmount += productLineItem.custom.giftTaxAmount1 + productLineItem.custom.giftTaxAmount2;
			}
		}
		cyberSourceRequest.productLineItems.add(pli);
		cyberSourceRequest['basketTotal'] = creditCardAmount;
	}
}*/

//********************************************************************************************************************************
//Helper functions
//********************************************************************************************************************************
function getDecryptedCCNumber(paymentInstrument : PaymentInstrument) {
	var cNumber = "";
	if (paymentInstrument.creditCardNumber != null) {
		var encryptedNumber : String = paymentInstrument.getEncryptedCreditCardNumber(dw.order.PaymentInstrument.ENCRYPTION_ALGORITHM_RSA, Site.getCurrent().getPreferences().custom.ete_cs_PublicKey);
		cNumber = new dw.crypto.Cipher().decrypt(encryptedNumber, Site.getCurrent().getPreferences().custom.ete_cs_PrivateKey, dw.order.PaymentInstrument.ENCRYPTION_ALGORITHM_RSA, null, 1);
	}
	return cNumber.replace(/\s+/g, '');
}

//--------------------------------------------------------------------------------------------------------------------------------------------
/**
 *  Try to the the decrypted CVN from session. If this is not in the session, we return empty string.
 *
 */
function getDecryptedCVN(CurrentSession : dw.system.Session) {
	return "";
}

//--------------------------------------------------------------------------------------------------------------------------------------------
function getCreditCardPaymentInstrument(CurrentOrder : Order) {
	var pi : PaymentInstrument = null;
	for each(var paymentInstrument : PaymentInstrument in CurrentOrder.getPaymentInstruments()) {
		if (paymentInstrument.getPaymentMethod() == PaymentInstrument.METHOD_CREDIT_CARD) {
			pi = paymentInstrument;
		}
	}
	return pi;
}