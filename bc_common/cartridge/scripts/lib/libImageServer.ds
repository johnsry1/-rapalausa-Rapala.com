/*
* to import this script:
*
* importScript("app_storefront_core:catalog/libImageServer.ds");
*
* Requirements/Dependents:
*	libImageServerSettings.ds
*/
importPackage(dw.system);
importPackage(dw.io);
importPackage(dw.web);

//make sure you have this file. This is the settings script
importScript("bc_common:lib/libImageServerSettings.ds");

var CATALOG_ID = dw.system.Site.getCurrent().getCustomPreferenceValue("fluid_CatalodID"),
	CUSTOMER_KEY = dw.system.Site.getCurrent().getCustomPreferenceValue("fluid_CustomerKey");

////////////////////////////////////////////////////////////////////////////////////////////////////////
///// getMediaURL() - This method can be used for sites having images relative to the catalog webdav,
/////					meaning they have images assigned for each view type for the product in the BM  
////////////////////////////////////////////////////////////////////////////////////////////////////////

function getMediaURL(type : String, mediaURL : String) {
  	if (empty(mediaURL)) {
    	return null;
  	}
	var imageURL : String;
  	var https = ("https"==request.httpProtocol) ? true : false;

	var mediaURLImage : String;
	var mediaImageStart : Number;
	var mediaCatalog : String;
	mediaImageStart = mediaURL.search('/images');
	mediaURLImage = mediaURL.substr(mediaImageStart);
		
	if (mediaURL.search('apparel-catalog')==-1) {
		mediaCatalog = 'electronics-catalog';
	} else {
		mediaCatalog = 'apparel-catalog';
	}
  	var baseURL = mediaURLImage;

	//var productSettings = getProductImageSettings(type);
	
	var productSettings : Object = productSettings = JSON.parse(dw.system.Site.getCurrent().getCustomPreferenceValue(type));
	
	imageURL = https ?
             URLUtils.httpsImage(URLUtils.CONTEXT_CATALOG, mediaCatalog, baseURL,productSettings):
             URLUtils.httpImage(URLUtils.CONTEXT_CATALOG, mediaCatalog, baseURL,productSettings);

	if(!(new File(dw.io.File.CATALOGS + "/"+mediaCatalog+"/default/" + mediaURLImage).exists())) {
		imageURL = URLUtils.staticURL('/images/noimagesmall.png');
	} 

	return imageURL.toString();
}

/*
////////////////////////////////////////////////////////////////////////////////////////////////////
///// getImageURL() - This method can be used for sites having images static in the catalog webdav 
////////////////////////////////////////////////////////////////////////////////////////////////////

//add attribute if really needed
function getImageURL(type : String, style : String, color : String, mediaURL : String) {
  //
  // check function parameters
  //
  if (empty(type) || empty(style)) {
    return null;
  }
  
  //
  // to avoid mixed HTTP & HTTPS content
  //
  var https = ("https"==request.httpProtocol) ? true : false;
  
  //
  // set up variables
  //
	var baseURL   = "/images/large/"; //change the DIR if using other folders than hi-res
	var catalog   = "apparel-catalog";
	var imageType = ".jpg";
	var imageURL  = null;
	var path : String = "/apparel-catalog/default/images/large/";
	var temp : String;
	var productSettings = getProductImageSettings(type);

  //
  // acess static images:
  //
  // for production, URLUtils.staticURL() (relative URL) must be used for Akamai.
  // for product feed & OrderExport, use URLUtils.httpStatic() (absolute URL)
  //
  // access image server:
  //
  //   httpImage & imageURL returns the same URL
  //   httpsImage returns a different URL (with demandware.net domain name)
  //
  
 	temp = empty(color) ? style + imageType : style + "_" + color + imageType; //if color exist or not
	baseURL += temp;
	  
	imageURL = https ?
             URLUtils.httpsImage(URLUtils.CONTEXT_CATALOG, catalog, baseURL,{scaleWidth:productSettings.width, scaleHeight:productSettings.height, sharpness:productSettings.sharpness, quality:productSettings.quality}):
             URLUtils.httpImage(URLUtils.CONTEXT_CATALOG, catalog, baseURL,{scaleWidth:productSettings.width, scaleHeight:productSettings.height, sharpness:productSettings.sharpness, quality:productSettings.quality});
    
	if(!(new File(dw.io.File.CATALOGS + path + temp).exists())) { //more likely it will search in CATALOG/apparel-catalog/default/images/hi-res/ then image name
		imageURL = "";
	} 
	
	return imageURL.toString();
}*/

/**
 * 
 * Build URL for image by specific parameters of product
 * 
 * @param type : String
 * @param productID : String
 * @param color : String
 * @param view : String
 * @param httpStatic : Boolean
 * 
 * @return String image URL
 * 
 */

function getImageURL(type : String, productID : String, color : String, httpStatic : Boolean, view : String) : String {
	
	var basePath : String = CATALOG_ID +"/default/" + CUSTOMER_KEY + productID + "/";
	
	var baseURL : String = httpStatic ? URLUtils.httpsStatic(URLUtils.CONTEXT_CATALOG, CATALOG_ID, CUSTOMER_KEY + productID + "/").toString() : 
									URLUtils.staticURL(URLUtils.CONTEXT_CATALOG, CATALOG_ID, CUSTOMER_KEY  + productID + "/").toString();
	baseURL = baseURL.replace("/"+request.getLocale()+"/", "/default/");
	
	var relativePath : String = getRelativePathByType(type, productID, color, view);
	
	if (new File(File.CATALOGS + "/" + basePath + relativePath).exists()) {
	    return baseURL + relativePath;
	} else {
	    return "";
	}
	
}

/**
 * Checks the existence of the image by parameters below:
 *
 * @param type : String (mandatory) type of images
 * @param productID : String (mandatory) ID of product
 * @param color : String (mandatory) color identifier
 * @param view : String (optional)
 *
 * @return String relative path to image
 *
 */

function isImageExist(type : String, productID : String, color : String, view : String) {
	var relativePath : String = getRelativePathByType(type, productID, color, view),
		basePath : String = CATALOG_ID +"/default/" + CUSTOMER_KEY + productID + "/";
	return new File(File.CATALOGS + "/" + basePath + relativePath).exists();
}

/**
 * Returns relative path of image by image's type
 *
 * @param type : String (mandatory) type of images
 * @param productID : String (mandatory) ID of product
 * @param color : String (mandatory) color identifier
 * @param view : String (optional)
 *
 * @return String relative path to image
 *
 */
 
function getRelativePathByType(type : String, productID : String, color : String, view : String) {
	switch(type) {
	
		case "MiniThumb" :
			return "generated/" + productID + "_" + color + "_a_55x55.jpg";
	
		case "SmallThumb" :
			return "generated/" + productID + "_" + color + "_a_55x55.jpg";
		
		case "SmallThumb_" :
			return "generated/" + productID + "_" + color + "_a_120x120.jpg";
		
		case "PDPThumb" :
			return productID + "_pdp2/thumb_variation_" + color + "_view_" + view + "_55x55.jpg";

		case "PDPLarge" :
			return productID + "_pdp2/main_variation_" + color + "_view_" + view + "_579x579.jpg";
			
		case "Zoom" :
			return productID + "_pdp2/zoom_variation_" + color + "_view_" + view + "_2027x2027.jpg";
	
		case "ViewAllThumb" :
			return "generated/" + productID + "_" + color + "_a_130x130.jpg";

		case "Thumb" :
			return "generated/" + productID + "_" + color + "_a_135x135.jpg";
		
		case "Thumb1" :
			return "generated/" + productID + "_" + color + "_a_475x475.jpg";
		
		case "Thumb2" :
			return "generated/" + productID + "_" + color + "_b_475x475.jpg";
		
		case "Thumb3" :
			return "generated/" + productID + "_" + color + "_c_475x475.jpg";
		
		case "Thumb4" :
			return "generated/" + productID + "_" + color + "_d_475x475.jpg";

		case "SquareGrid" :
			return "generated/" + productID + "_" + color + "_a_170x170.jpg";
		
		case "ReverseSquareGrid" :
			return "generated/" + productID + "_" + color + "_b_170x170.jpg";
	
		case "SquareGridLarge" :
			return "generated/" + productID + "_" + color + "_a_250x250.jpg";
		
		case "ReverseSquareGridLarge" :
			return "generated/" + productID + "_" + color + "_b_250x250.jpg";
		
		case "RecProdSet" :
			return "generated/" + productID + "_" + color + "_1_231x344.jpg";
		
		case "ProductSetMain" :
			return "generated/" + productID + "_" + color + "_1_368x549.jpg";
		 	
		case "gridLarge" :
			return "generated/" + productID + "_" + color + "_a_340x340.jpg";
	
		case "ProductMain" :
			return "generated/" + productID + "_" + color + "_a_340x340.jpg";
	
		case "ProductMainAlt2" :
			return "generated/" + productID + "_" + color + "_b_340x340.jpg";
	
		case "ProductMainAlt3" :
			return "generated/" + productID + "_" + color + "_c_340x340.jpg";
	
		case "ProductMainReverse" :
			return "generated/" + productID + "_" + color + "_b_340x340.jpg";
	
		case "ProductLarge" :
			return "generated/" + productID + "_" + color + "_" + view + "_475x475.jpg";		
	
		case "ProductLargeReverse" :
			return "generated/" + productID + "_" + color + "_b_475x475.jpg";
	
		case "ProductThumbReverse" :
			return "generated/" + productID + "_" + color + "_b_55x55.jpg";
	
		case "ProductSmall" :
			return "generated/" + productID + "_" + color + "_a_55x55.jpg";
		
		case "productMiniCart" :
			return "generated/" + productID + "_" + color + "_a_80x80.jpg";
	
		case "Swatch" :
			return productID + "_swatches/thumb_variation_" + color + "_14x14.jpg";
	
		case "refineSwatch" :
			return productID + "_swatches/thumb_variation_" + color + "_14x14.jpg";
		
		case "OrderExport":
			return "generated/" + productID + "_" + color + "_a_80x80.jpg";
		
		case "ShopToItMain" :
			return "generated/" + productID + "_" + color + "_a_340x340.jpg";
		
		case "ShopToItRev" :
			return "generated/" + productID + "_" + color + "_b_340x340.jpg";
			
		case "QuickView" :
			return "generated/" + productID + "_" + color + "_a_374x374.jpg";
		
		default :
			return "";
	}
}