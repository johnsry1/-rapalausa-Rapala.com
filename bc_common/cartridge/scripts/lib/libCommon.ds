// Copyright © 2013 Priority Fulfillment Services, Inc. All rights reserved.
/**
 *
 * A library file for web service communication.
 * This file is included by several script nodes using:
 *
 * importScript("libCommon.ds");
 *
 */
importPackage(dw.system);
importPackage(dw.order);
importPackage(dw.catalog);
importPackage(dw.rpc);
importPackage(dw.util);
importPackage(dw.value);
importPackage(dw.io);

importScript("bc_common:lib/libOrderExportSFTP.ds");
importScript("bc_common:lib/libOrderHistory.ds");
importScript("bc_common:lib/libRepository.ds");
importScript("bc_common:lib/libLogon.ds");
importScript("bc_common:lib/libCyberSourceAuth.ds");


var serviceHelper = null;

// Helper method to export the helper
function getServiceHelper(): Object {
    if (serviceHelper == null) {
        serviceHelper = new serviceHelperFunction();
    }
    return serviceHelper;
}

function serviceHelperFunction() {
	
	 /**************************/
  	 /**      Variables       **/
  	 /**************************/

    //WebServiceReference to be used for all service calls
    var exp: String = getWebServiceWSDL();
    if (exp.split(".")[0] == "webreferences") {
        this.serviceReference = webreferences[exp.split(".")[1]];
    } else {
        this.serviceReference = webreferences[exp];
    }

    // hold errorCodes
    this.serviceErrors = new HashMap();
    
    // preserve session token for multiple WS calls without calling Logon for every request
  	this.sessionToken = null;

    /**************************/
    /** Preference accessors **/
    /**************************/

	 //Gets the BusinessUnit ID valid for the site
  	this.getStoreID = getStoreID;
  
    //Gets the AccountNumber valid for the site
    this.getAccountNumber = getAccountNumber;

    //Gets the Password valid for the site
    this.getPassword = getPassword;

    //Gets the User Name valid for the site
    this.getUserName = getUserName;

	//Gets the timeout override for Order Search (defaults to general timeout)
  	this.getTimeOutOrderSearch = getTimeOutOrderSearch;
	
    //Gets the timeout override for Order Summary (defaults to general timeout)
    this.getTimeOutOrderSummary = getTimeOutOrderSummary;
  
    //Gets the timeout for the site
    this.getTimeOut = getTimeOut;
    
    //Gets the maximum retries for requests
    this.getMaxRetries = getMaxRetries;
    
    //Gets the maximum amount for orders to export
  	this.getMaxExportOrderNumber = getMaxExportOrderNumber;
    
    
    
    /**************************/
    /** Interface functions  **/
    /**************************/

	/**
     * requests the CybersourceAuth for the basket
     * @SEE int_etecybersource:library/libCyberSourceAuth.ds
     */
  //	this.cyberSourceAuth = cyberSourceAuth;
  	
  	/**
     * exports an order via SFTP for MULTISHIP
     * @SEE bc_common:lib/libOrderExport.ds
     */
    this.sendOrdersSFTP = sendOrdersSFTP;
 	 
 	/**
	 * generates an SDR Token for a secure piece of data (e.g., credit card number)
	 * @SEE bc_common:lib/libRepository.ds
	 */
    this.repositoryInsertData = repositoryInsertData;
    
   /**
    * Gets the Session Token valid for the request
    * @SEE  bc_common:lib/libLogon.ds
   */
    this.retrieveSessionToken = retrieveSessionToken;
   
   /**
    * Call the OrderSearch web service method
    * @SEE  bc_common:lib/libOrderHistory.ds
   */
    this.orderSearch = orderSearch; 
    
    /**
     * Call the CompleteOrderSummary web service method
     * @SEE  bc_common:lib/libOrderHistory.ds
    */
    this.completeOrderSummary = completeOrderSummary;
  
    /**
    * Call the CompleteOrderSummaryOrderData web service method
    * @SEE  bc_common:lib/libOrderHistory.ds
    */
    this.completeOrderSummaryOrderData = completeOrderSummaryOrderData;
  
    /**
     *  Adds a error to the Service context
     *  @SEE below
     */
    this.setWebServiceURL = setWebServiceURL;
    
  /**
   *  Adds a error to the Service context
   *  @SEE below
   */
   this.addError = addError;

}


/**
* Gets the Store ID configured in Site Preferences.
*/
function getStoreID() : String {
  return Site.getCurrent().getCustomPreferenceValue("jde_storeID");
}

/**
* Gets the maximum amount for orders to export
*/
function getMaxExportOrderNumber() : Number {
  return Site.getCurrent().getCustomPreferenceValue("jde_maxExportOrderNumber");
}

/**
 * Gets the WebService URL configured in Site Preferences.
 */
function getWebServiceURL(): String {
    return Site.getCurrent().getCustomPreferenceValue("ete_webServiceURL");
}

/**
 * Gets the WebService URL configured in Site Preferences.
 */
function getWebServiceWSDL(): String {
    try {
        return Site.getCurrent().getCustomPreferenceValue("ete_webServiceWSDL");
    } catch (e) {
        return "webreferences.E2EService";
    }
}

/**
 * Gets the JDE Order export method. 
 */
function getOrderExportMethod() : String {
	return Site.getCurrent().getCustomPreferenceValue("jde_orderExportMethod");
}

/**
 * Gets the Account Number configured in Site Preferences.
 */
function getAccountNumber(): String {
    return Site.getCurrent().getCustomPreferenceValue("ete_accountNumber");
}

/**
 * Gets the Password configured in Site Preferences.
 */
function getPassword(): String {
    return Site.getCurrent().getCustomPreferenceValue("ete_password");
}

/**
 * Gets the User Name configured in Site Preferences.
 */
function getUserName(): String {
    return Site.getCurrent().getCustomPreferenceValue("ete_userName");
}

/**
* Gets the Order Search Timeout configured in Site Preferences and falls back to general timeout.
*/
function getTimeOutOrderSearch() : String
{
	if ("jde_timeOutOrderSearch" in Site.getCurrent().preferences.custom) {
		return Site.getCurrent().getCustomPreferenceValue("jde_timeOutOrderSearch");
	}
	else {
		return getTimeOut();
	}
}

/**
* Gets the Order Summary Timeout configured in Site Preferences and falls back to general timeout.
*/
function getTimeOutOrderSummary() : String
{
	if ("jde_timeOutOrderSummary" in Site.getCurrent().preferences.custom) {
		return Site.getCurrent().getCustomPreferenceValue("jde_timeOutOrderSummary");
	}
	else {
		return getTimeOut();
	}
}

/**
 * Gets the Timeout configured in Site Preferences.
 */
function getTimeOut(): String {
    return Site.getCurrent().getCustomPreferenceValue("ete_timeOut");
}

/**
* Gets the Retries for requests.
*/
function getMaxRetries() : Number
{
  return Site.getCurrent().getCustomPreferenceValue("ete_maxErrorRetries");
}

/**
 * sets the configured webservice URL
 */
function setWebServiceURL(service: Stub) {
    var url: String = getWebServiceURL();
    service._setProperty(Stub.ENDPOINT_ADDRESS_PROPERTY, url);
}

/**
* Adds a error to the Service context
*/
function addError(num : String, message : String, severity: Number) {
  Logger.debug("Adding Error - Sev: {0}, Number: {1}, Message: {2}", severity, num, message);
  if(this.serviceErrors.containsKey(severity)) {
    this.serviceErrors.get(severity).add(message);
  } else {
    var content : ArrayList = new ArrayList();
    content.add(message);
    this.serviceErrors.put(severity, content);
  }
}