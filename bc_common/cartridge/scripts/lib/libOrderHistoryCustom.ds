/**
* The purpose of this script is to provide customization hooks for customizable order elements.
*/
importPackage( dw.system );
importPackage( dw.rpc );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.order );
importPackage( dw.catalog );

/**
 * Adding header information to the order object.
 *
 */
function addOrderHeader(currentOrderObject : Object, orderInquiryObject : Object, storeID : String, dwOrder : Order) {
	
	var pfsOrderNo : String = orderInquiryObject.Reference1;
	var orderNo : String = pfsOrderNo;
	Logger.debug("libOrderHistoryCustom.ds - addOrderHeader() for {0}", orderNo);
	
	currentOrderObject['orderNo'] = orderNo;
	currentOrderObject['orderNumber'] = orderInquiryObject.OrderNumber;
	currentOrderObject['orderType'] = orderInquiryObject.OrderType;
	currentOrderObject['orderDate'] = orderInquiryObject.OrderDate;
	currentOrderObject['customerEmail'] = orderInquiryObject.EmailAddress;
	currentOrderObject['shippingInfo'] = dwOrder.getShipments();
	
	// try to get the currency code from one of the detail lines
	var currencyCode : String = null;
	// for each (var key : String in orderInquiryObject.orderInquiryDetails.keySet()) {
		// var detailLine : Object = orderInquiryObject.orderInquiryDetails.get(key);
	for each (var key : String in orderInquiryObject.customerServiceInquiryDetails.keySet()) {
		var detailLine : Object = orderInquiryObject.customerServiceInquiryDetails.get(key);
		currencyCode = detailLine.CurrencyCode;
		if (!empty(currencyCode)) break; // hopefully all line items have the same currency code so we can stop here if we have one
	}
	// if currency code is still empty, we take site currency code
	if (empty(currencyCode))
		currencyCode = session.getCurrency().getCurrencyCode();
	
	currentOrderObject['currencyCode'] = currencyCode;
	
	currentOrderObject['totalTax'] = new Money(0, currentOrderObject.currencyCode);
	currentOrderObject['orderTotal'] = new Money(0, currentOrderObject.currencyCode);
	currentOrderObject['merchandiseTotal'] = new Money(0, currentOrderObject.currencyCode);
	currentOrderObject['shippingTotal'] = new Money(0, currentOrderObject.currencyCode);
	currentOrderObject['discountTotal'] = new Money(0, currentOrderObject.currencyCode);
	
}
/**
 *	Add billing address information to order object.
 *
 */
function addBillingAddress(currentOrderObject : Object, orderInquiryObject : Object) {

	Logger.debug("libOrderHistoryCustom.ds - addBillingAddress() for {0}", currentOrderObject.orderNo);
	
	var billingAddress : Object = new Object();
	billingAddress['address1'] = orderInquiryObject.SoldToAddressLine1;
	billingAddress['address2'] = orderInquiryObject.SoldToAddressLine2;
	billingAddress['city'] = orderInquiryObject.SoldToCity;
	billingAddress['companyName'] = "";
	billingAddress['countryCode'] = orderInquiryObject.SoldToCounty;
	billingAddress['firstName'] = "";
	billingAddress['lastName'] = orderInquiryObject.SoldToMailingName;
	billingAddress['postalCode'] = orderInquiryObject.SoldToPostalCode;
	billingAddress['stateCode'] = orderInquiryObject.SoldToState;
	billingAddress['countryCode'] = StringUtils.trim(orderInquiryObject.SoldToCountry);
	billingAddress['phone'] = orderInquiryObject.SoldToAddressLine4;
	
	currentOrderObject['billingAddress'] = billingAddress;
}

/**
 *	Add shipments to order object
 *
 */
function addShipments(currentOrderObject : Object, orderShipments : ArrayList) {
	
	Logger.debug("libOrderHistoryCustom.ds - addShipments() for {0}", currentOrderObject.orderNo);
	
	var shipments : ArrayList = new ArrayList();
		
	for each (var shipment : Object in orderShipments) {
		
		var shipmentObject : Object = new Object();
		
		// Create Shipping Address
		var shippingAddress : Object = new Object();
		shippingAddress['address1'] = shipment.ShipToAddressLine1;
		shippingAddress['address2'] = shipment.ShipToAddressLine2;
		shippingAddress['city'] = shipment.ShipToCity;
		shippingAddress['companyName'] = "";
		shippingAddress['countryCode'] = shipment.ShipToCounty;
		shippingAddress['firstName'] = "";
		shippingAddress['lastName'] = shipment.ShipToMailingName;
		shippingAddress['postalCode'] = shipment.ShipToPostalCode;
		shippingAddress['stateCode'] = shipment.ShipToState;
		shippingAddress['phone'] = shipment.ShipToAddressLine4;
	
		shipmentObject['shippingAddress'] = shippingAddress;
		// End Create Shipping Address
		
		// Create product line items
		var productLineItems : ArrayList = new ArrayList();
		
		for each (var lineItemDetail in shipment.ShipmentInformationDetails) { 	
			productLineItems.add(getLineItem(lineItemDetail));
		}
		
		shipmentObject['productLineItems'] = productLineItems;
		// End create product line items
		
		// Update carrier name and ID
		shipmentObject['carrierName'] = shipment.CarrierName;
		shipmentObject['carrierNumber'] = new String(shipment.CarrierNumber);
		// End update carrier name and ID
		
		// Update tracking info
		shipmentObject['trackingNumber'] = shipment.TrackingNumber;
		// End update tracking info
		
		// Create shipping date
		shipmentObject['dateShipped'] = shipment.ShippedDate;
		// End create shipping date
		
		shipments.add(shipmentObject);
	}
	
	currentOrderObject['shipments'] = shipments;
}

/**
 *	Add a 'default' shipping address to the current order object taken from orderInquiry
 *
 */
function addShippingAddress(currentOrderObject : Object, orderInquiryObject : Object) {
	
	Logger.debug("libOrderHistoryCustom.ds - addShippingAddress() for {0}", currentOrderObject.orderNo);
	
	var shippingAddress : Object = new Object();
		shippingAddress['address1'] = orderInquiryObject.ShipToAddressLine1;
		shippingAddress['address2'] = orderInquiryObject.ShipToAddressLine2;
		shippingAddress['city'] = orderInquiryObject.ShipToCity;
		shippingAddress['companyName'] = "";
		shippingAddress['countryCode'] = orderInquiryObject.ShipToCounty;
		shippingAddress['firstName'] = "";
		shippingAddress['lastName'] = orderInquiryObject.ShipToMailingName;
		shippingAddress['postalCode'] = orderInquiryObject.ShipToPostalCode;
		shippingAddress['stateCode'] = orderInquiryObject.ShipToState;
		shippingAddress['countryCode'] = StringUtils.trim(orderInquiryObject.ShipToCountry);
		shippingAddress['phone'] = orderInquiryObject.ShipToAddressLine4;
	
	currentOrderObject['shippingAddress'] = shippingAddress;		
}

/**
 * Add payment information to the order object.
 *
 */
function addPaymentInstrument(currentOrderObject : Object, orderInquiryObject : Object, dwOrder : Order) {
	
	Logger.debug("libOrderHistoryCustom.ds - addPaymentInstrument() for {0}", currentOrderObject.orderNo);
	
	// var paymentInstrument : Object = new Object();
	// paymentInstrument['creditCardNumber'] = orderInquiryObject.CreditCardNumber;
	
	currentOrderObject['giftcardPaymentInstrument'] = new ArrayList();
	var paymentInstrument : Collection = dwOrder.getPaymentInstruments();
	for each (var pi : PaymentInstrument in paymentInstrument) {
		if (pi.paymentMethod == dw.order.PaymentInstrument.METHOD_CREDIT_CARD) {
			currentOrderObject['maskedCreditCardNumber'] = pi.getMaskedCreditCardNumber();
			currentOrderObject['creditCardAmount'] = pi.paymentTransaction.amount;
			
		}
		if (pi.paymentMethod == "PROTOBASE_GIFTCARD") {
			var giftcard : Object = new Object();
			giftcard["balace"] = pi.custom.giftCardBalance;
			giftcard["number"] = pi.custom.giftCardNumber;
			giftcard["amount"] = pi.paymentTransaction.amount;
			currentOrderObject['giftcardPaymentInstrument'].add(giftcard);
		}
	}
	currentOrderObject['paymentInstruments'] = dwOrder.getPaymentInstruments();
}

/**
 *	Add all detail lines from order inquiry response to order object. Added will be shipping line items and product line items.
 *
 */
function addLineItems(currentOrderObject : Object, orderInquiryObject : Object, dwOrder : Order) {

	currentOrderObject['productLineItems'] = new ArrayList();
	currentOrderObject['shippingLineItems'] = new ArrayList();
	currentOrderObject['discountLineItems'] = new ArrayList();
	
	// for each (var key : String in orderInquiryObject.orderInquiryDetails.keySet()) {
		// var detailLine : Object = orderInquiryObject.orderInquiryDetails.get(key);
	for each (var key : String in orderInquiryObject.customerServiceInquiryDetails.keySet()) {
		var detailLine : Object = orderInquiryObject.customerServiceInquiryDetails.get(key);
		
		if (StringUtils.trim(detailLine.ItemNumberAnyFormat) == "FREIGHT") { // this is shipping
			Logger.debug("libOrderHistoryCustom.ds - addLineItems: Adding detail ({0}) to shipping line items", detailLine.ItemNumberAnyFormat);
			currentOrderObject.shippingLineItems.add(getLineItem(detailLine, dwOrder));
		} else {
			if (StringUtils.trim(detailLine.ItemNumberAnyFormat) == "DISCOUNT") { // this is discount
				Logger.debug("libOrderHistoryCustom.ds - addLineItems: Adding detail ({0}) to discount line items", detailLine.ItemNumberAnyFormat);
				currentOrderObject.discountLineItems.add(getLineItem(detailLine, dwOrder));
			} else {
				Logger.debug("libOrderHistoryCustom.ds - addLineItems: Adding detail ({0}) to product line items", detailLine.ItemNumberAnyFormat);
				currentOrderObject.productLineItems.add(getLineItem(detailLine, dwOrder));
			}
		}
	}
}

/**
 *	Assuming all line item details coming from the web service have the same structure, here we create a object from this.
 *
 */
function getLineItem(detailLine : Object, dwOrder : Order) : Object {
	
	var lineItem : Object = new Object();
	lineItem['quantity'] = detailLine.QuantityOrdered;
	lineItem['basePrice'] = new Money(detailLine.UnitPrice, detailLine.CurrencyCode);
	lineItem['grossPrice'] = new Money(detailLine.ExtendedPrice, detailLine.CurrencyCode);
	
	var itemNumber : String = StringUtils.trim(detailLine.ItemNumberAnyFormat);
	var style : String = itemNumber.substring(0,11);
	style = style.replace(/\s/g, "");
	var giftPackaging : String = itemNumber.replace(/\s/g, "");    			
	var productID : String;
	
	if (!empty(dwOrder)) {
		if (giftPackaging == "GIFTPACKAGING") {
			productID = "GIFT PACKAGING";
		} else {
    		var a : Collection = dwOrder.getShipments();
    		var b : Iterator = a.iterator();
    		while (b.hasNext()) {
    			var c = b.next();
        		var d : Collection = c.productLineItems;
        		var e : Iterator = d.iterator();
        			while (e.hasNext()) {
            			var f = e.next();
            			var color : String = itemNumber.substring(12,15);
            			color = color.replace(/\s/g, "");
        				var size : String = itemNumber.substring(15,18);
        				size = size.replace(/\s/g, "");
    					var fproduct = empty(f.product) ? ProductMgr.getProduct(f.productID) : f.product;
                		if (fproduct.custom.style == style && fproduct.custom.color == color && fproduct.custom.size == size) {	
                  			productID = fproduct.ID;
                		}
             		}
    		}
		}
	} else {
		productID = detailLine.CatalogNumber;
	}
	
    if (empty(productID)) {
    	productID = style;
    }

	var product : Product = ProductMgr.getProduct(productID);
	if (product != null) {
		lineItem['product'] = product;
		lineItem['productName'] = product.name;
	} else {
		lineItem['product'] = null;
		lineItem['productName'] = detailLine.ItemDescription1;
	}
	
	lineItem['productID'] = detailLine.ItemNumberAnyFormat;
	lineItem['description'] = detailLine.ItemDescription2;
	lineItem['custom'] = new Object;
	
	if (!empty(detailLine.status))
		lineItem['status'] = detailLine.status;

	return lineItem;
}

/**
 *	Determine the order status.
 *		1 = OPEN
 *		2 = SHIPPED
 *		3 = OPEN and SHIPPED
 *
 */
function determineOrderStatus(currentOrderObject : Object) {
	
	Logger.debug("libOrderHistoryCustom.ds - determineOrderStatus() for {0}", currentOrderObject.orderNo);	
	var orderStatus = null; // cancelled
	
	for each (var productLineItem in currentOrderObject.productLineItems) {
		var status : Number = productLineItem.status;
		if (orderStatus != 3){ // if the order is open and shipped	
			if ((status == 1) && (orderStatus != 2)){   // if the item is open and order is not shipped
				orderStatus = 1; // open
			}else if ((status == 2) && (orderStatus != 1)){ // if the item is shipped and the order is not open
				orderStatus = 2; // shipped
			}else if ((status == 1) && (orderStatus == 2)){ // if the item is open and the order is shipped
				orderStatus = 3; // open and shipped
			}else if ((status == 2) && (orderStatus == 1)){ // if the item is shipped and the order is open
				orderStatus = 3; // open and shipped
			}
		}
		Logger.debug("libOrderHistoryCustom.ds - determineproductLineStatus() set status for {0} to {1}", currentOrderObject.orderNo, status);
	}
	Logger.debug("libOrderHistoryCustom.ds - determineOrderStatus() set status for {0} to {1}", currentOrderObject.orderNo, orderStatus);
	currentOrderObject['status'] = orderStatus;
}

/**
 *	Determining order total by looping through all product and shipping line items and summing up the price
 */
function determineOrderTotal(orderObject : Object, dwOrder : Order) {

	for each (var productLineItem in orderObject.productLineItems) {
		if (productLineItem.grossPrice == 0) {
			orderObject.orderTotal = orderObject.orderTotal.add(new Money(productLineItem.quantity * productLineItem.basePrice, orderObject.currencyCode));
			orderObject.merchandiseTotal = orderObject.merchandiseTotal.add(new Money(productLineItem.quantity * productLineItem.basePrice, orderObject.currencyCode));
		} else {
			orderObject.orderTotal = orderObject.orderTotal.add(productLineItem.grossPrice);
			orderObject.merchandiseTotal = orderObject.merchandiseTotal.add(productLineItem.grossPrice);
		}		
	}
	
	for each (var shippingLineItem in orderObject.shippingLineItems) {
		orderObject.orderTotal = orderObject.orderTotal.add(shippingLineItem.grossPrice);
		orderObject.shippingTotal = orderObject.shippingTotal.add(shippingLineItem.grossPrice);	
	}
	
	for each (var discountLineItem in orderObject.discountLineItems) {
	orderObject.orderTotal = orderObject.orderTotal.add(discountLineItem.grossPrice);
	orderObject.discountTotal = orderObject.discountTotal.add(discountLineItem.grossPrice);	
	}
	
	if (orderObject.status != null) {
		orderObject.totalTax = dwOrder.totalTax;
		orderObject.orderTotal = orderObject.orderTotal.add(dwOrder.totalTax);
	}
}
/**
* Gets a Javascript object with basic order data that has the structure required by the order history page.
*
* @param currentOrder order that needs to be reflected by the returned object
* @return javascript object
*/
function getBasicOrderData( currentOrder: Order) : Object
{
	if (!empty(currentOrder))
	{
		var newOrderObject : Object = new Object();
		var shipments : ArrayList = new ArrayList();
		var shipment : Object = new Object();
		var productLineItems : ArrayList = new ArrayList();
		for each (var shipment : Shipment in currentOrder.shipments)
		{
			var newShipment = new Object();
			newShipment["shippingAddress"] = shipment.shippingAddress;
			var shippingLineItems : ArrayList = new ArrayList();
 	 		for each (var productLineItem : ProductLineItem in shipment.productLineItems)
			{
				var newProductLineItem : Object = new Object();
				newProductLineItem['product'] = new Object();
				newProductLineItem['uuid'] = productLineItem.UUID;
				newProductLineItem['product']['ID'] = productLineItem.productID;
				newProductLineItem['quantityValue'] = productLineItem.quantityValue;
				newProductLineItem['adjustedPrice']= productLineItem.adjustedPrice;
				newProductLineItem['custom'] = new Object();
				newProductLineItem['trackingNumber'] = null;
				newProductLineItem['shippingMethodName'] = !empty(shipment.shippingMethod)?shipment.shippingMethod.displayName:null;
				if(!empty(productLineItem.custom.recipe))
				{
					newProductLineItem['custom']['recipe'] = productLineItem.custom.recipe;
				}
				else
				{
					newProductLineItem['custom']['recipe'] = "";
				}
				newProductLineItem['quantityOrdered'] = productLineItem.quantityValue;
				newProductLineItem['quantityShipped'] = new Number(0);
				newProductLineItem['quantityCancelled'] = new Number(0);
				newProductLineItem['status'] = "0";
				productLineItems.add(newProductLineItem);
				shippingLineItems.add(newProductLineItem);
			}
			newShipment["productLineItems"] = shippingLineItems;
			shipments.add(newShipment);
		}
		newOrderObject['shipments'] = shipments;
		newOrderObject['productLineItems'] = productLineItems;
		newOrderObject['orderNo'] = currentOrder.orderNo;
		
		// amount
		newOrderObject['billingAddress'] = currentOrder.billingAddress;
		//Order['creationDate']= Date.parse(omOrder.OrderHeader.OrderDate.toString());
		newOrderObject['creationDate'] = currentOrder.creationDate;
		// payments
		newOrderObject['paymentInstruments'] = currentOrder.paymentInstruments;
		newOrderObject['status'] = "0";

		//totals
		newOrderObject['adjustedMerchandizeTotalNetPrice'] = currentOrder.adjustedMerchandizeTotalNetPrice;
		newOrderObject['adjustedMerchandizeTotalTax'] = currentOrder.adjustedMerchandizeTotalTax;
		newOrderObject['adjustedShippingTotalGrossPrice'] = currentOrder.adjustedShippingTotalGrossPrice;
		newOrderObject['totalGrossPrice'] = currentOrder.totalGrossPrice;

		return newOrderObject;
	}
	return null;
}

/**
 *	Mask the CC number that is coming from web service.
 */
function maskCCNumber(ccNumber : String) {
	
	if (empty(ccNumber))
		return "";
	else {
		var length : Number = ccNumber.length;
		var clearString : String = ccNumber.substr(length - 4, 4);
		var maskedString : String = "";
		for (var i : Number = 0; i < length - 4; i++) {
			maskedString += "*";
		}
		return maskedString + clearString;
	}
}

/**
 *
 *	THIS IS KAY's IDEA OF MAPPING DWORDER WITH PFSORDER, WE KEEP THIS AS A SAMPLE
 *
 *
if ( !empty(dwOrder) )
	{
		var orderObject : Object = getBasicOrderData(dwOrder);
		if (!empty(orderObject))
		{
			
			if (!empty(orderInquiryResult))
			{
				//order is know by PFS so we give it at least the open status
				orderObject['status'] = "1";
				Logger.debug("enrich orderNo: " + dwOrder.orderNo);
				if (!empty(orderInquiryResult["orderInquiryDetails"]))
				{
					var orderInquiryDetails : Object = orderInquiryResult["orderInquiryDetails"];
					var orderStatus = 0;
					for each(var productLineItem : ProductLineItem in orderObject.productLineItems)
					{
						if (!empty(orderInquiryDetails[productLineItem['product']['ID']]))
						{
							var orderInquiryDetail : Object = orderInquiryDetails[productLineItem['product']['ID']];
							productLineItem['quantityShipped'] = orderInquiryDetail["QuantityShipped"];
							productLineItem['quantityCancelled'] = orderInquiryDetail["QuantityCancelled"];
							productLineItem['status'] = orderInquiryDetail["status"];
						}

						//determine order status
						//assumption partly shipped status for line items overrides complete (3) and open (1) status
						//status 1 and 7 are considered 'open' status's (1)
						var status : String = productLineItem['status'];
						Logger.debug("line status: " + status);
						if ((status == 1 || status == 7) && orderStatus != 2)
						{
							Logger.debug("set order status to: 1");
							orderStatus = 1;
						//status 5 and 6 are considered 'partly shipped' status's (2)
						} else if ((status == 5 || status == 6)) {
							Logger.debug("set order status to: 2");
							orderStatus = 2;
						//status 2, 3 and 4 are considered 'closed' status's (3)
						} else if ((status == 2 || status == 3 || status == 4) && orderStatus != 2) {
							Logger.debug("set order status to: 3");
							orderStatus = 3;
						} else {
							Logger.debug("set order status to: 4");
							orderStatus = 4;
							//if the line status is still '0' something went wrong and we better set it to 'Unknown' state
							if (status==0)
							{
								productLineItem['status'] = 8;
							}
						}
					}
					orderObject['status'] = orderStatus;
				} else {
					//since the order is know by PFS we can set all statuses a least to processing
					for each(var newProductLineItem : Object in orderObject.productLineItems)
					{
						newProductLineItem['status'] = "1";
					}
				}
			}
			
			if (!empty(orderShipmentResult))
			{
				//grabbing all tracking numbers from the detailed information 
				for each(var orderShipment : Object in orderShipmentResult)
				{
					for each(var shipmentLine : Object in orderShipment.ShipmentInformationDetails)
					{
						for each(var productLineItem in orderObject.productLineItems)
						{
							if (!empty(shipmentLine.ItemNumberAnyFormat) && !empty(productLineItem.product.ID) && productLineItem.product.ID == shipmentLine.ItemNumberAnyFormat)
							{
								productLineItem['trackingNumber'] = !empty(productLineItem['trackingNumber'])?productLineItem['trackingNumber'] + ";":"" + orderShipment['TrackingNumber'] + "; ";
								
								if (empty(productLineItem['shipmentTrackings']))
								{
									productLineItem['shipmentTrackings'] = new ArrayList();
								}
								var shipmentTrackings : ArrayList = productLineItem['shipmentTrackings'];
								
								var shipmentTracking : Object = new Object();
								shipmentTracking['trackingNumber'] = orderShipment['TrackingNumber'];
								var shipDate : Calendar = new Calendar();
								
								//ship date calculation
								if (!empty(orderShipment['ShippedDate']) && (""+orderShipment['ShippedDate']).length==8)
								{ 
									var shipDateString : String = (""+orderShipment['ShippedDate']);
									var year : Number = new Number(shipDateString.substr(0,4));
									var month : Number = new Number(shipDateString.substr(4,2));
									var day : Number = new Number(shipDateString.substr(6,2));
									shipDate.set(year, month-1, day);
									shipmentTracking['date'] = shipDate.getTime();
								} else {
									shipmentTracking['date'] = orderShipment['ShippedDate'];
								}
								
								if (!empty(orderShipment['CarrierName']))
								{
									shipmentTracking['carrierName'] = orderShipment['CarrierName'];
									if (!empty(orderShipment['CarrierName'].match(new RegExp("\^UPS"))))
									{
										//UPS
										shipmentTracking['trackingURL'] = Site.getCurrent().preferences.custom.tr_UPSTrackingURL + shipmentTracking['trackingNumber'];
									} else {
										//FedEx
										shipmentTracking['trackingURL'] = Site.getCurrent().preferences.custom.tr_FedExTrackingURL + shipmentTracking['trackingNumber'];
									}
								}
								shipmentTrackings.add(shipmentTracking);								
								break;
							}
						}
					}
				}
			}
			
		}
		return orderObject;
	}
	return null;
*/