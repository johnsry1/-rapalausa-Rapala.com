/**
*
* This script creates a helper object that stores all constants, utility helper functions to get or
* pivot off of site preferences based on values
*
*/

var dwsystem	= require ("dw/system");
var URLUtils = require('dw/web/URLUtils');

var InterstitialHelper : Object = {
	getPopupShownCookie : function() {
		return request.httpCookies['CountrySelectorViewed'];
	},
	setPopupShownCookie : function() {
		setCookie('CountrySelectorViewed','true');
		return;
	},
	getInterstitialSiteCookie: function () {
		return request.httpCookies['preferredRegion'];
	},
	setInterstitialSiteCookie: function (request) {
		var id = "rapala-";
		if (request.httpPath.indexOf('rapalaEU') != -1) {
			id = 'rapalaEU-';
		} else if (request.httpPath.indexOf('rapalaCA') != -1) {
		    if (empty(request.httpParameterMap.locale)) {
				id = 'rapalaCA-';
			} else if (request.httpParameterMap.locale == 'eu-en') {
				id = 'rapalaEU-';
			}
		} 
		session.custom.interstitialSiteId = id;
		setCookie('preferredRegion',id);
		if (id == 'rapalaEU-') {
			var country = (request.geolocation != null) ? request.geolocation.getCountryCode() : 'default';
			var json = dw.system.Site.getCurrent().getCustomPreferenceValue("countriesDefaultCurrency");
			var currencies = JSON.parse(json);
			var params = request;
			if (params.locale) {
				country = params.locale.slice(-2).toUpperCase();
			}
			if (!empty(currencies)) {
				if (country in currencies) {
					var availableCurrency = dw.system.Site.getCurrent().getAllowedCurrencies();
					var currency = currencies[country];
					if (params.httpPath.indexOf('UpdateCurrency') != -1) {
						currency = params.httpParameterMap.currencyCode.value;
						session.custom.currencyUpdated = true;
						session.setCurrency(dw.util.Currency.getCurrency(currency));
					}
					if (!session.custom.currencyUpdated) {
						if (availableCurrency.indexOf(currency) != -1) {
							session.setCurrency(dw.util.Currency.getCurrency(currency));
						} else {
							session.setCurrency(dw.util.Currency.getCurrency(currencies['default']));
						}
					}
				} else {
					session.setCurrency(dw.util.Currency.getCurrency(currencies['default']));
				}
			} else {
				logMessage += 'Empty JSON default currency config \n';
			}
		} else if (id == 'rapalaCA-') {
			session.setCurrency(dw.util.Currency.getCurrency('CAD'));
		}
		return;
	},
	setRedirectUrl: function (request) {
		var url, id, newHost;
		var params = request.httpParameterMap;
		var tempUrl = URLUtils.url('Home-SetLocale');
		newHost = request.httpCookies['preferredRegion'].value;

		if (request.httpPath.indexOf('rapalaEU') != -1) {
			id = 'rapalaEU-';
		} else if (request.httpPath.indexOf('rapalaCA') != -1) {
			id = 'rapalaCA-';
		} else {
			id = 'rapala-';
		}

		if (params.isParameterSubmitted('pid')) {
			let pid = params.pid.value;
			tempUrl = URLUtils.url('Product-ShowInLocale', 'pid', pid, 'sessionRedirect', true);
		} else if (params.isParameterSubmitted('cgid')) {
			let cgid = params.cgid.value;
			tempUrl = URLUtils.url('Search-ShowInLocale', 'cgid', cgid, 'sessionRedirect', true);
		} else if (params.isParameterSubmitted('fdid')) {
			let fdid = params.fdid.value;
			tempUrl = URLUtils.url('Search-ShowInLocale', 'fdid', fdid, 'sessionRedirect', true);
		} else if (params.isParameterSubmitted('cid')) {
			let cid = params.cid.value;
			tempUrl = URLUtils.url('Page-ShowInLocale', 'cid', cid, 'sessionRedirect', true);
		}
		if (tempUrl) {
			url = tempUrl.toString().replace(id, newHost);
		}

		return url;
	},
	constructCountryLink: function(activeCountryJSON, request) {
		let defaultLink = 'http://www.rapala.com';
		let activeCountry = activeCountryJSON.country;
		let currentSite = dw.system.Site.getCurrent();
		let protocol = "https://";
		let countryLink;
		let locale = request.locale;

		if (activeCountry == "ca" && (activeCountry != "us"  || activeCountry != "eu")) {
			countryLink = protocol + activeCountryJSON.domain + "/";
		} else if (activeCountry == "us") {
			countryLink = protocol + activeCountryJSON.domain + "/";
			//Need to build the setLocale url for the case of moving from EU or CA sites	
			if (currentSite.ID == 'rapalaEU') {
				countryLink=URLUtils.url('Home-SetLocale', 'locale', 'default');
                countryLink="https://" + activeCountryJSON.domain + countryLink.toString().replace('rapalaEU', 'rapala').replace(locale, 'default');
			} else if (currentSite.ID == 'rapalaCA') {
				countryLink=URLUtils.url('Home-SetLocale', 'locale', 'default');
                countryLink=countryLink.toString().replace('rapalaCA', 'rapala');
                countryLink="https://" + activeCountryJSON.domain + countryLink.toString().replace('en_CA', 'default');
			}
		} else {
			let params = "?countrySelect=true&locale=";
			// construct a url based of the global custom preference json config
			// example: https://devXX.rapala.com/fi-fi?countrySelect=true&locale=fi_FI
			if (!empty(activeCountryJSON.sitePath) && activeCountryJSON.sitePath !== 'undefined') {
				countryLink = protocol + 
						  activeCountryJSON.domain + "/" + 
						  activeCountryJSON.sitePath + 
						  params + 
						  activeCountryJSON.localeID;
			} else {
				countryLink = protocol + 
						  activeCountryJSON.domain + "/" + 
						  params + 
						  activeCountryJSON.localeID;
			}
		}

		// default the URL to US Production in the event we failed to construct a url beforehand.
		if (countryLink.length <= 0 || countryLink.indexOf('undefined') > -1) {
			countryLink = "https://www.rapala.com/";
		}
		return countryLink;
	},
	getCurrentCountryCode: function(request) {
		var currentCountry = 'us'; // default to US site view
		var currentSite = dw.system.Site.getCurrent().ID;
		if (currentSite.indexOf('CA') != -1) {
			currentCountry = 'ca';
		} else if (currentSite.indexOf('EU') != -1) {
			//Default to EU
			currentCountry = 'eu'
			var locale = dw.util.Locale.getLocale(request.locale);
			if (!empty(locale.country)) {
				currentCountry = locale.country.toLowerCase();
			}
		}
		return currentCountry;
 	}
}

function setCookie(name, value, age) {
	let maxAge = !empty(age) ? age : 86400*30;
	let cookie : dw.web.Cookie = new dw.web.Cookie(name, value);
	if (!empty(request.httpCookies[name])) {
		cookie = request.httpCookies[name];
		cookie.setValue(value);
	}

	cookie.setMaxAge(maxAge);
	cookie.setPath("/");
	response.addHttpCookie(cookie);
}

module.exports=InterstitialHelper;