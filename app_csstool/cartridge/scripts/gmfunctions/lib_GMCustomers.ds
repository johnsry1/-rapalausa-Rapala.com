/*
*
* USAGE: importScript("app_csstool:gmservice/lib_GMSubscriptions.ds");
*
*/

importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.web );
importPackage( dw.io );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.customer );
importPackage( dw.rpc );
importPackage( dw.object );
importPackage( dw.svc );

var CSSService = function() {
	
	this.serviceHostName = Site.getCurrent().getCustomPreferenceValue("CSSServiceHostName");
	this.usersURL = Site.getCurrent().getCustomPreferenceValue("CSSServiceUserURL");
	this.servicePrivateKey = Site.getCurrent().getCustomPreferenceValue("CSSServicePrivateKey");
	this.serviceClientID = Site.getCurrent().getCustomPreferenceValue("CSSServiceClientID");
	this.serviceUserAgent = "Demandware";
	
	return true;
};

CSSService.prototype = {
	
	serviceHostName : String,
	usersURL : String,
	servicePrivateKey : String,
	serviceClientID : String,
	serviceUserAgent : String,
	
	getAuthenticationData : function(contentType : String) {
		
		var privateKey : Bytes = new Bytes(this.servicePrivateKey);
		var httpDate : String = "";
		var publicKey : Bytes = new Bytes("n" + this.serviceHostName + "\\n" + httpDate + "\\n" + this.serviceUserAgent + "\\n" + contentType);
		
		var encryptor : Mac = new Mac(Mac.HMAC_SHA_1);
		var authDataByte : Bytes = encryptor.digest(publicKey, privateKey);
		var authData : String = Encoding.toBase64(authDataByte);
		var authKey : String = this.serviceClientID + ":" + authData;
		
		return authKey;
	},
	
	createCustomerRecordV2 : function(customer : Customer, emptyObject : Object) {
		
		
		var $this = this;
		
		//Get the service object
		var svc : HTTPService = ServiceRegistry.get("csstool.http.gmcustomer.post");
	
		//Prepare Params Object
		var params : Object = {"customer": customer, "emptyObject":emptyObject, "$this":$this};
		
		//Execute the service	
		var result : Result = svc.call(params);
		
		//Check for service availability.
		if(result.status == Result.SERVICE_UNAVAILABLE){
			return PIPELET_ERROR;
		}
		
		var httpClient : HTTPClient = result.object;
		
		var success : Boolean = false;
		var errorMessage : String = "";
		
		if(!empty(httpClient) && httpClient.statusCode == 200) {
			success = true;
		} else {
			errorMessage = this.getRESTError(result.getError());
		}
	  	
	  	var response : Object = {
	   		successFlag: success,
	   		errorMessage: errorMessage,
	   	};
	   	
	   	return response;
	},

	getEmpty : function () {
	  	
		
		var $this = this;
		
		//Get the service object
		var svc : HTTPService = ServiceRegistry.get("csstool.http.getemptyobject.get");
	
		//Prepare Params Object
		var params : Object = {"$this":$this};
		
		//Execute the service	
		var result : Result = svc.call(params);
		
		var httpClient : HTTPClient = result.object;
		
		var emptyDetails : Object = null;
		var errorMessage : String = "";
		
		if(!empty(httpClient) && httpClient.statusCode == 200) {
			emptyDetails = httpClient.text;
		} else {
			errorMessage = this.getRESTError(result.getError());
		}   	
	   	
	   	return emptyDetails;
	},

		
	getRESTError : function(httpStatusCode) {
		
		var errorMessage = "SERVICE RETURNED " + httpStatusCode + " # ";
	   		
	   	switch( httpStatusCode ) {
			case 404:	errorMessage += "PAGE NOT FOUND"; break;
			case 403:	errorMessage += "PERMISSION DENIED"; break;
			case 417:	errorMessage += "ACCESS DENIED"; break;
			default:	errorMessage += "ERROR"; break;
		}
		
		return errorMessage;
	}
};
	
	