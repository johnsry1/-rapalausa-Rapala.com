/**
* Demandware Script File
* This script takes in a session id that is passed in from GM CSS tool and makes rest service calls back to it. the response is a CSR login/pwd and a customer number
* for use in logging in ob behalf of customer.

*  @input SessionID : String e.g, B2A5537F-8095-4814-95A7-B229B5D4E937
*  @output DWAcct : String
*  @output CSSUser : String
*  @output CSSPword : String
*  @output RequestedPage : String
*  @output RequestedPageQueryString : String
*  @output RelatedOrder : String
*  @output PromotionCode : String
*  @output ReturnExchangeDiscount : String
*  @output WarrantyProducts : Array
*  @output RequestedProduct :  String
*  @output ReasonCode : String
*  @output OrderType : String
*  @output ErrorMessage : String
*  @output StoreNumber : String
*  @output SourceCode : String
*  @output LanguageCode : String
*
*/
importPackage( dw.system );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.customer );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.svc );

function execute( args : PipelineDictionary) : Number {

	try {
		
	   	var errorMessage : String = ""; 
		var CSSCustomerResponse : Object = null;
		var CSSCredentials : String = "";
		var CSSAgentReponse : Object = null;
		var CSSAgentName : String = "";
		var CSSPasswordResponse : Object = null;
		var CSSAgentPassword : String = "";
		var CSSRequestedPage : String = "";
		var CSSPromotionCode : String = "";
		var CSSReturnExchangeDiscount : String = "";
		var CSSRelatedOrder : String = "";
		var CSSWarrantyProducts : String = "";
		var CSSRequestedProduct : String = "";
		var CSSSubscriptionReasonCode : String = "";
		var CSSOrderType : String = "";
		var CSSStoreNumber : String = "";
		var CSSSourceCode : String = "";
		var CSSLanguageCode : String = "";
		var ICAAdminUser : String = "";
		var ICAAdminPassword : String = "";

		var serviceHostName : String = Site.getCurrent().getCustomPreferenceValue("CSSServiceHostName");
		var servicePrivateKey : String = Site.getCurrent().getCustomPreferenceValue("CSSServicePrivateKey");
		var serviceClientID : String = Site.getCurrent().getCustomPreferenceValue("CSSServiceClientID");
		var url : String = Site.getCurrent().getCustomPreferenceValue("CSSServiceURL") + "/";
		var serviceUserAgent : String = "Demandware";
		
		var serviceDataKeys : String;
		if ("CSSDataKeys" in Site.getCurrent().preferences.custom && (Site.getCurrent().getCustomPreferenceValue("CSSDataKeys").length > 1) ) {
			serviceDataKeys = Site.getCurrent().getCustomPreferenceValue("CSSDataKeys");
		} 
		else {
			serviceDataKeys= "CSSLOGIN";
		}
			
		//////////// AGENT USER, AGENT PWD, CUSTOMER ID //////////////
		//Get the service object
		var svc : HTTPService = ServiceRegistry.get("csstool.http.sessiondataretrieval.get");
	
		//Prepare Params Object
		var params : Object =   {
								    "serviceHostName": serviceHostName,
								    "url": url + '?SessionID=' + args.SessionID + '&Name=' + serviceDataKeys + '&format=json',
								    "serviceUserAgent": serviceUserAgent,
								    "authenticationData": getAuthenticationData(servicePrivateKey, serviceHostName, serviceUserAgent, serviceClientID, "")
								};
		//Execute the service	
		var result : Result = svc.call(params);
		
		var getCSSCustomer : HTTPClient = result.object;
		
		if (!empty(getCSSCustomer) && getCSSCustomer.statusCode == 200) {
			CSSCustomerResponse = JSON.parse(getCSSCustomer.text);
			try {
				for (var i = 0 ; i < CSSCustomerResponse.length ; i++) {
					var CSSResponsePair : Object = CSSCustomerResponse[i];
										
					switch (CSSResponsePair.valueOf().Name) {
						case ("ICAADMINUSER") :
							ICAAdminUser = CSSResponsePair.valueOf().Value;
							break;
						case ("ICAADMINPASSWORD") :
							ICAAdminPassword = CSSResponsePair.valueOf().Value;
							break;
						case ("CSSLOGIN") : 
							CSSCredentials = CSSResponsePair.valueOf().Value;
							break;
						case ("PAGEREQUEST") : 
							CSSRequestedPage = CSSResponsePair.valueOf().Value;							
							break;
						case ("PROMOCODE") : 
							CSSPromotionCode = CSSResponsePair.valueOf().Value;
							break;
						case ("RETEXCHDISCOUNT") : 
							CSSReturnExchangeDiscount = CSSResponsePair.valueOf().Value;
							break;
						case ("RELATEDORDER") : 
							CSSRelatedOrder = CSSResponsePair.valueOf().Value;							
							break;
						case ("WTYPRODUCTS") : 
							CSSWarrantyProducts = CSSResponsePair.valueOf().Value;							
							break;
						case ("PIDREQUEST") : 
							CSSRequestedProduct = CSSResponsePair.valueOf().Value;
							break;	
						case ("ORDERTYPE") :
							CSSOrderType = CSSResponsePair.valueOf().Value; 
							break;
						case ("REASONCODE") :
							CSSSubscriptionReasonCode = CSSResponsePair.valueOf().Value; 
							break;
						case ("STORENUMBER") :
							CSSStoreNumber = CSSResponsePair.valueOf().Value;
							break;
						case ("SOURCECODE") :
							CSSSourceCode = CSSResponsePair.valueOf().Value;
							break;
						case ("LANGUAGECODE") :
							CSSLanguageCode = CSSResponsePair.valueOf().Value;
							break;
					}	
				}
					
			} 
			catch (e) {
				//do nothing for now
			}
	   	} 
	   	else {
	   		
	   		errorMessage = "SERVICE RETURNED " + result.getError()+ " # ";
	   		
	   		switch( result.getError() ) {
				case 404:	errorMessage += "PAGE NOT FOUND"; break;
				case 403:	errorMessage += "PERMISSION DENIED"; break;
				case 417:	errorMessage += "ACCESS DENIED"; break;
				default:	errorMessage += "ERROR"; break;
			
			}
			args.ErrorMessage = errorMessage;
			return PIPELET_ERROR;
		}
		
		// Get the DW Account for login on behalf
		if (CSSCredentials != "") {
			args.DWAcct = StringUtils.trim(CSSCredentials.split("|")[2]);
		}
		else {
			args.ErrorMessage = "Error extracting CSS Credentials.";
	 		return PIPELET_ERROR;
		}
		
		// Get the DW Agent credentials (i.e., Business Manager user)
		if (CSSCredentials != "") {
			args.CSSUser = StringUtils.trim(CSSCredentials.split("|")[0]);
			args.CSSPword = StringUtils.trim(CSSCredentials.split("|")[1]);
			session.privacy.overrideAgentID = args.CSSUser;
		}
		// override using the ICAAdmin
		if (ICAAdminUser != "" && ICAAdminPassword != "") {
			args.CSSUser = ICAAdminUser;
			args.CSSPword = ICAAdminPassword;
		}
		
		if (args.CSSUser == "" || args.CSSPword == "") {
			args.ErrorMessage = "Error extracting Agent Credentials - Check DW Business Manager login ability for agent or icaadminuser account.";
			return PIPELET_ERROR;
		}
		
		args.RequestedPageQueryString = '';
		if (CSSRequestedPage != "") {
			var posQS = CSSRequestedPage.indexOf('?');
			if (posQS > -1) {
				args.RequestedPageQueryString = CSSRequestedPage.substr(posQS);
				args.RequestedPage = CSSRequestedPage.substr(0, posQS);
			}
			else {
				args.RequestedPage = CSSRequestedPage;
			}
		} 
		else {
			args.RequestedPage = "Home-Show";
		}  
		
		if (CSSPromotionCode != "") { 
			args.PromotionCode = CSSPromotionCode;	
		}
		
		if (CSSReturnExchangeDiscount != "") { 
			args.ReturnExchangeDiscount = CSSReturnExchangeDiscount;	
		}
		
		if (CSSRequestedProduct != "") { 
			args.RequestedProduct = CSSRequestedProduct;	
		}
		
		if (CSSWarrantyProducts != "") {
			var test = CSSWarrantyProducts.split(",");
			args.WarrantyProducts = CSSWarrantyProducts.split(","); 	
		}
		
		if (CSSSubscriptionReasonCode != "") { 
			args.ReasonCode = CSSSubscriptionReasonCode;	
		}		
		
		if (CSSOrderType != "") {
			args.OrderType = CSSOrderType;	
		}
		
		if (CSSStoreNumber != "") {
			args.StoreNumber = CSSStoreNumber;	
		}
		
		args.SourceCode = '';
		if (CSSSourceCode != "") {
			args.SourceCode = CSSSourceCode;	
		}
		
		args.LanguageCode = '';
		if (CSSLanguageCode != "") {
			// Convert from hyphen to underscore (i.e., fr-CA becomes fr_CA as DW expects)
			var locale : String = CSSLanguageCode.replace("-", "_");
			
			// Trim to single locale
			if (locale.length > 5) {
				locale = locale.substr(0, 5);
			}
			
			// Change country to upper case
			if (locale.length == 5) {
				locale = locale.substr(0, 3) + locale.charAt(3).toUpperCase() + locale.charAt(4).toUpperCase();
			}
			
			args.LanguageCode = locale;
		}
						
		
	} 
	catch (e) {
 		Logger.error(e.name + " " + e.message + e.stacktrace);
 		args.ErrorMessage = e.name + " " + e.message + e.stacktrace;
 		return PIPELET_ERROR;
 	}

   return PIPELET_NEXT;
}

function getAuthenticationData(servicePrivateKey : String, serviceHostName : String, serviceUserAgent : String, serviceClientID : String, contentType : String) {
		
	var privateKey : Bytes = new Bytes(servicePrivateKey);
	var httpDate : String = "";
	var publicKey : Bytes = new Bytes("n" + serviceHostName + "\\n" + httpDate + "\\n" + serviceUserAgent + "\\n" + contentType);
		
	var encryptor : Mac = new Mac(Mac.HMAC_SHA_1);
	var authDataByte : Bytes = encryptor.digest(publicKey, privateKey);
	var authData : String = Encoding.toBase64(authDataByte);
	var authKey : String = serviceClientID + ":" + authData;
		
	return authKey;
}
