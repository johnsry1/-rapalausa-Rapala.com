/**
*	CSS Daily Customer Export v2
*	Revision 1
*
*	2014-06-01 RB - Use newer APIs instead of old "readyForExport" method
* 
*	@input CustomersPerFile : String		Allows for you to control the number of customers in each XML file generated.  Defaults to 100.
*	@input NumberOfDays : String			Number of days of customer creation history to query.  Defaults to 2.
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.object );

var SCRIPT_NAME='** cssDailyCustomerExport2.ds - ';

function execute( args : PipelineDictionary ) : Number {

	// Define the customers to export based on date range
	var numberOfHours : Number = -48;
	
	try {
		numberOfHours = new Number(args.NumberOfDays) * -24;
	}
	catch (e) {
	}
	var cal : Calendar = new Calendar(new Date());
	cal.add(dw.util.Calendar.HOUR, numberOfHours);
	var sql : String = "lastModified >= "+ StringUtils.formatCalendar(cal, "yyyy-MM-dd'T'HH:mm:ss");     // 2010-08-26T00:00:00
	
	var totalCount : Number;
	var iterResults : SeekableIterator;
    try {
    	iterResults = CustomerMgr.searchProfiles(sql, "customerNo ASC");
    	totalCount = iterResults.count;
    }
    catch (e) {
    	Logger.error(SCRIPT_NAME + "error doing searchProfiles for totalCount: " + e.message);
    }
    
    if (totalCount <= 0) {
		Logger.error(SCRIPT_NAME + "no customers found for export");
		return PIPELET_NEXT;
	}

	// Allow for users per file override from job parameter
	var iterLimit = args.CustomersPerFile;
    
    var GMClientID = Site.getCurrent().getCustomPreferenceValue("CSSServiceClientID");
    var addiCaNotes = false;
    if (!empty(Site.getCurrent().getCustomPreferenceValue("iCaNotesGroup"))) {
	    var groupLabel = Site.getCurrent().getCustomPreferenceValue("iCaNotesGroup");
		// retrieve the Attribute Grouping "iCaNotes" from the CustomerAddress system object
		var notesGroup : ObjectAttributeGroup = SystemObjectMgr.describe("CustomerAddress").getAttributeGroup(groupLabel);
		// get the collection of attribute definitions in the group
		if (notesGroup != null) {
			var noteAttributes : Collection = notesGroup.getAttributeDefinitions();
			if (noteAttributes.length > 0) {
				addiCaNotes = true;
			}
		}
    }
    
    var attDefs : Object = null;
    var profileGroup : ObjectAttributeGroup = SystemObjectMgr.describe("Profile").getAttributeGroup("iCA");
	if (profileGroup != null) {
		attDefs = profileGroup.getAttributeDefinitions();
	}
		
	var fileWriter : FileWriter;
	var xmlWriter : XMLIndentingStreamWriter;
	var pos : Number = 0;
	var filePos : Number = 0;
    while (iterResults.hasNext()) {
    	
    	if (pos % iterLimit == 0) {
    		
    		if (pos != 0) {
	    		xmlWriter.writeEndElement(); //GlobalMerchant
				xmlWriter.writeEndDocument();
				xmlWriter.flush();
				xmlWriter.close();
				fileWriter.flush();
				fileWriter.close();
				
				try {
					if (!uploadSFTP(file)) {
			  			Logger.error("500", "Connection Error - Unable to connect to SFTP Server!");
			  			iterResults.close();
			  			return PIPELET_ERROR;
					}		  			
				} catch(e) {
				  	var loc = e;
				    if (e.message.indexOf("java.net.UnknownHostException") > 0) {
				    	Logger.error("500", "Connection Error - Host not found!");
				    } else {
				    	Logger.error("499", "Unexpected/Unhandled error occurred: " + e.message);
				    }
				    iterResults.close();
				    return PIPELET_ERROR;
				}
    		}
    		
    		filePos++;
			var date : Calendar = new Calendar();
			var timestamp = StringUtils.formatCalendar(date, "MMddyyyyHHmmss");
			var file : File = new File(dw.io.File.IMPEX + File.SEPARATOR + "upload" + File.SEPARATOR + "GMCustomer_" + dw.system.Site.getCurrent().ID + "_" + timestamp + "_" + filePos + ".xml");
	
			fileWriter = new FileWriter(file, "utf-8");
			xmlWriter = new XMLIndentingStreamWriter(fileWriter);
	    		    	
			xmlWriter.writeStartDocument("UTF-8", "1.0");
			xmlWriter.writeStartElement("GlobalMerchant");
    	}
		
		pos++;
    	
    	var customer = iterResults.next();
		try {
			var preferredAddress : String = '';

			xmlWriter.writeStartElement("User");					
			addXMLElement(xmlWriter, "ClientID", GMClientID);
			addXMLElement(xmlWriter, "UserName", customer.customerNo);
			addXMLElement(xmlWriter, "Description", customer.firstName + " " + customer.lastName);
			addXMLElement(xmlWriter, "UserTypeID", "3");
			
			var customerLocale : String;
			if (customer.preferredLocale != "") { 
				try {
					customerLocale = dw.web.Resource.msg("locale." + customer.preferredLocale, "locales", "1");
				} catch (e) {
					customerLocale = "1";
				}
				addXMLElement(xmlWriter, "LocaleID", customerLocale);
			} else {
				addXMLElement(xmlWriter, "LocaleID", "1");
			}
				
			addXMLElement(xmlWriter, "CurrencyID", "1");
			addXMLElement(xmlWriter, "CatalogID", "1");
			addXMLElement(xmlWriter, "Active", "1");
			addXMLElement(xmlWriter, "Email", customer.email);
			addXMLElement(xmlWriter, "GeneralUseColumn6", customer.email);

			//#########################################################################################
			//Add Custom Attributes of Profile if existing in attribute group called iCA
			//#########################################################################################
			if (attDefs != null) {
				insertProfileCustomAttrs(customer, xmlWriter, attDefs);					
			}
			//#########################################################################################
				
			xmlWriter.writeStartElement("Addresses");					
				
			if (customer.addressBook.preferredAddress != null) {
				preferredAddress = customer.addressBook.preferredAddress.ID;
				xmlWriter.writeStartElement("Address");
				addXMLElement(xmlWriter, "ClientID", GMClientID);
				addXMLElement(xmlWriter, "Address1", customer.addressBook.preferredAddress.address1);
				addXMLElement(xmlWriter, "Address2", customer.addressBook.preferredAddress.address2);
				addXMLElement(xmlWriter, "City", customer.addressBook.preferredAddress.city);
				addXMLElement(xmlWriter, "State", customer.addressBook.preferredAddress.stateCode);
				addXMLElement(xmlWriter, "PostalCode", customer.addressBook.preferredAddress.postalCode);
				addXMLElement(xmlWriter, "Country", customer.addressBook.preferredAddress.countryCode.value);
				addXMLElement(xmlWriter, "Phone1", customer.addressBook.preferredAddress.phone);
				addXMLElement(xmlWriter, "Email", customer.email);
				addXMLElement(xmlWriter, "FirstName", customer.addressBook.preferredAddress.firstName);
				addXMLElement(xmlWriter, "MiddleName", customer.addressBook.preferredAddress.secondName);
				addXMLElement(xmlWriter, "LastName", customer.addressBook.preferredAddress.lastName);
				addXMLElement(xmlWriter, "Suffix",customer.addressBook.preferredAddress.suffix);
				addXMLElement(xmlWriter, "AttributeName", "BILLTO");
				if (addiCaNotes) {
					insertNotesFields(customer.addressBook.preferredAddress, xmlWriter,noteAttributes,GMClientID);
				}
				xmlWriter.writeEndElement(); //Address
			}
				
			for( k in customer.addressBook.addresses ) {
				xmlWriter.writeStartElement("Address");
				addXMLElement(xmlWriter, "ClientID", GMClientID);
				addXMLElement(xmlWriter, "Address1", customer.addressBook.addresses[k].address1);
				addXMLElement(xmlWriter, "Address2", customer.addressBook.addresses[k].address2);
				addXMLElement(xmlWriter, "City", customer.addressBook.addresses[k].city);
				addXMLElement(xmlWriter, "State", customer.addressBook.addresses[k].stateCode);
				addXMLElement(xmlWriter, "PostalCode", customer.addressBook.addresses[k].postalCode);
				addXMLElement(xmlWriter, "Country", customer.addressBook.addresses[k].countryCode.value);
				addXMLElement(xmlWriter, "Phone1", customer.addressBook.addresses[k].phone);
				addXMLElement(xmlWriter, "Email", customer.email);
				addXMLElement(xmlWriter, "FirstName", customer.addressBook.addresses[k].firstName);
				addXMLElement(xmlWriter, "MiddleName", customer.addressBook.addresses[k].secondName);
				addXMLElement(xmlWriter, "LastName", customer.addressBook.addresses[k].lastName);
				addXMLElement(xmlWriter, "Suffix",customer.addressBook.addresses[k].suffix);
				addXMLElement(xmlWriter, "AttributeName", "SHIPTO");
				var isPreferred : Boolean = (customer.addressBook.addresses[k].ID == preferredAddress);
				if (addiCaNotes && !isPreferred) {
					insertNotesFields(customer.addressBook.addresses[k], xmlWriter,noteAttributes,GMClientID);
				}
				xmlWriter.writeEndElement(); //Address
			}
		
			xmlWriter.writeEndElement(); //Addresses
			xmlWriter.writeEndElement(); //User

		} catch(e) {
			Logger.error("CSS Customer Export Feed Error, Customer Number:{0} Error: {1}", customer.customerNo, e.message);
		}
    		
    }
    
    xmlWriter.writeEndElement(); //GlobalMerchant
	xmlWriter.writeEndDocument();
	xmlWriter.flush();
	xmlWriter.close();
	fileWriter.flush();
	fileWriter.close();
	iterResults.close();
	try {
 		if (uploadSFTP(file)) {

  		} else {
  			Logger.error("500", "Connection Error - Unable to connect to SFTP Server!");
  			return PIPELET_ERROR;		  			
  		}
  	} catch(e) {
  		var loc = e;
    	if (e.message.indexOf("java.net.UnknownHostException") > 0) {
      		Logger.error("500", "Connection Error - Host not found!");
    	} else {
      		Logger.error("499", "Unexpected/Unhandled error occurred: " + e.message);
    	}
    	return PIPELET_ERROR;
  	}
    
	return PIPELET_NEXT;
}

 function addXMLElement( xWriter : XMLIndentingStreamWriter, nodeName : string, content : string) {
   	xWriter.writeStartElement(nodeName);
   	if (content != null) {
   		xWriter.writeCharacters(content);
   	}
   	else {
   		xWriter.writeCharacters("");	
   	}
   	xWriter.writeEndElement();
 }
 
 function addXMLElementCDATA( xWriter : XMLIndentingStreamWriter, nodeName : string, content : string) {
   	xWriter.writeStartElement(nodeName);
   	if (content != null) {
   		xWriter.writeCData(content);
   	}
   	else {
   		xWriter.writeCharacters("");	
   	}
   	xWriter.writeEndElement();
 }
 
function uploadSFTP(file : File) : Boolean {
	var isSuccess : Boolean = false;

	if (file == null || !file.isFile()) {
    	Logger.error("CSS Customer Feed SFTP Error: file object is not a file!");
    	return PIPELET_ERROR;
  	}

  	var ftpServer   = Site.getCurrent().preferences.custom.CSSServiceFTPHost;
  	var ftpUser     = Site.getCurrent().preferences.custom.CSSServiceFTPUser;
  	var ftpPassword = Site.getCurrent().preferences.custom.CSSServiceFTPPassword;
  	var ftpPath     = Site.getCurrent().preferences.custom.CSSServiceFTPPath;
  	var ftpPort     = 22;
  	try {
    	ftpPort 	= Site.getCurrent().preferences.custom.CSSServiceFTPPort;
  	} catch (e) {}

  	if (empty(ftpServer) || empty(ftpUser) || empty(ftpPassword) || empty(ftpPath)) {
    	Logger.error("CSS Customer Feed SFTP ERROR: site preferences not defined - server/{0};port/{1};user/{2};password/{3};path/{4} not set!\n", ftpServer, ftpPort, ftpUser, ftpPassword, ftpPath);
    	return PIPELET_ERROR;
  	}

  	//
  	// ftp each file and afterwards delete it from the server
  	//
  	var sftp : SFTPClient = new SFTPClient();
  	sftp.setTimeout(10000);
  	if (sftp.connect(ftpServer, ftpPort, ftpUser, ftpPassword) && sftp.connected) {

    	var path = ftpPath; // + (ftpPath.match(/\/$/) ? '' : '/');
    	var isUploaded = sftp.putBinary(path + "/" + file.name, file);
    	if (!isUploaded) {
    		var errSFTP = sftp.errorMessage;
    		Logger.error("CSS Customer Feed SFTP ERROR: Failed to upload file " + file.fullPath + " : " + errSFTP);
    		isSuccess = false;
    	}
    	else {
    		// SUCCESS - set orders to Exported
    		isSuccess = true;	
    	}
    	
  	} 
  	else {
    	Logger.error("CSS Customer Feed SFTP ERROR: Can not establish ftp connection to {0}!", ftpServer);
    	isSuccess = false;
  	}
  	sftp.disconnect();
  	return isSuccess;
}

//if attributes exist in "iCaNotes" attribute grouping, add a <Notes> section to xml
function insertNotesFields(address, xmlWriter, noteAttributes, GMClientID) {
	var allAttrs = address;
	var indx = 0;
	for each (var attr in noteAttributes) {
		var found = null;
		//try to find our attribute, attr.  Look first in CustomerAddress, then in CustomerAddress.custom
		if (attr.ID in allAttrs) {
			found = allAttrs[attr.ID];
		}
		else if (attr.ID in allAttrs.custom) {
			found = allAttrs.custom[attr.ID];
		}
		if (found != null) {
			if (indx==0) {
				xmlWriter.writeStartElement("Notes");
			}
			//if attr type is multi-value (e.g. set of strings), create a unique Note for each, appending "_[index]" to Note Name
			if (attr.multiValueType) {
				for (var key in found) {
					if (found.hasOwnProperty(key)) {
						xmlWriter.writeStartElement("Note");
						addXMLElement(xmlWriter, "ClientID", GMClientID);
						addXMLElement(xmlWriter, "Name", attr.ID+'_'+key);
						addXMLElement(xmlWriter, "Value", found[key]);
						addXMLElement(xmlWriter, "TableID", 1);
						xmlWriter.writeEndElement(); //Note
					}
				}
			} else {
				xmlWriter.writeStartElement("Note");
				addXMLElement(xmlWriter, "ClientID", GMClientID);
				addXMLElement(xmlWriter, "Name", attr.ID);
				addXMLElement(xmlWriter, "Value", found);
				addXMLElement(xmlWriter, "TableID", 1);
				xmlWriter.writeEndElement(); //Note
			}
			indx++;
		}
	}
	if (indx > 0) {
		xmlWriter.writeEndElement(); //Notes
	}
}

//if attributes exist in "iCaNotes" attribute grouping, add a <Notes> section to xml
function insertProfileCustomAttrs(profile, xmlWriter, noteAttributes) {
	var allAttrs = profile;
	var indx = 0;
	for each (var attr in noteAttributes) {
		var found = null;
		//try to find our attribute, attr.  Look first in CustomerAddress, then in CustomerAddress.custom
		if (attr.ID in allAttrs) {
			found = allAttrs[attr.ID];
		}
		else if (attr.ID in allAttrs.custom) {
			found = allAttrs.custom[attr.ID];
		}
		if (found != null) {
			if (indx==0) {
				xmlWriter.writeStartElement("Notes");
			}
			//if attr type is multi-value (e.g. set of strings), create a unique Note for each, appending "_[index]" to Note Name
			if (attr.multiValueType) {
				for (var key in found) {
					if (found.hasOwnProperty(key)) {
						xmlWriter.writeStartElement("Note");
						addXMLElement(xmlWriter, "Name", attr.ID+'_'+key);
						addXMLElement(xmlWriter, "Value", found[key]);
						addXMLElement(xmlWriter, "Sequence", 1);
						xmlWriter.writeEndElement(); //Note
					}
				}
			} else {
				xmlWriter.writeStartElement("Note");
				addXMLElement(xmlWriter, "Name", attr.ID);
				addXMLElement(xmlWriter, "Value", found);
				addXMLElement(xmlWriter, "Sequence", 1);
				xmlWriter.writeEndElement(); //Note
			}
			indx++;
		}
	}
	if (indx > 0) {
		xmlWriter.writeEndElement(); //Notes
	}
} 