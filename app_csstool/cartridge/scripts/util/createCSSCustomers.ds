/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
* @input CustomersPerFile : String
* @input UpperBound : String  Date formatted in 2010-01-01T00:00:00 yyyy-MM-ddTHH:MM:SS format.
* @input LowerBound : String	Date formatted in 2010-01-01T00:00:00 yyyy-MM-ddTHH:MM:SS format.
*
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.catalog );

function execute( args : PipelineDictionary ) : Number {

   		//Allow for users per file override from job parameter
   		var iterLimit = args.CustomersPerFile;
   		
	    if (!empty(args.LowerBound) && !empty(args.UpperBound)) {
	       	var sql = "custom.readyForExport = true AND creationDate >= "+ args.LowerBound + " AND creationDate <= "+ args.UpperBound;
		} else { 
	 		var sql = "custom.readyForExport = true";
	    }
	    		
	    var totalCount = CustomerMgr.queryProfiles(sql,"customerNo ASC").count;
	    var iteration = ( totalCount / iterLimit ).toFixed(0);
	    var GMClientID = Site.getCurrent().getCustomPreferenceValue("CSSServiceClientID");
	    
	    for( i = 0 ; i <= iteration ; i++ ){
	    	var customersFound : Collection = CustomerMgr.queryProfiles(sql,"customerNo ASC").asList(0, iterLimit);	
			var date : Calendar = new Calendar();
			var timestamp = StringUtils.formatCalendar(date, "MMddyyyyHHmmss");
			var file : File = new File(dw.io.File.IMPEX + File.SEPARATOR + "upload" + File.SEPARATOR + "GMCustomer_" + dw.system.Site.getCurrent().ID + "_" + timestamp + "_" + i + ".xml");
			
			if (customersFound.length<1) {
				break;	
			}
					
			var fileWriter : FileWriter = new FileWriter(file, "utf-8");
  			var xmlWriter : XMLIndentingStreamWriter = new XMLIndentingStreamWriter(fileWriter);
	    		    	
  			xmlWriter.writeStartDocument("UTF-8", "1.0");
  			xmlWriter.writeStartElement("GlobalMerchant");
	    	
	    	for( j in customersFound ){
				try {
					xmlWriter.writeStartElement("User");					
					addXMLElement(xmlWriter, "ClientID", GMClientID);
					addXMLElement(xmlWriter, "UserName", customersFound[j].customerNo);
					addXMLElement(xmlWriter, "Description", customersFound[j].firstName + " " + customersFound[j].lastName);
					addXMLElement(xmlWriter, "UserTypeID", "3");
					
					if (customersFound[j].preferredLocale != "") { 
						addXMLElement(xmlWriter, "LocaleID", customersFound[j].preferredLocale);
					} else {
						addXMLElement(xmlWriter, "LocaleID", "1");
					}
					
					addXMLElement(xmlWriter, "CurrencyID", "1");
					addXMLElement(xmlWriter, "CatalogID", "1");
					addXMLElement(xmlWriter, "Active", "1");
					addXMLElement(xmlWriter, "Email", customersFound[j].email);
					addXMLElement(xmlWriter, "GeneralUseColumn6", customersFound[j].email);
					
					xmlWriter.writeStartElement("Addresses");					
					
					if (customersFound[j].addressBook.preferredAddress != null) {
						xmlWriter.writeStartElement("Address");
						addXMLElement(xmlWriter, "ClientID", GMClientID);
						addXMLElement(xmlWriter, "Address1", customersFound[j].addressBook.preferredAddress.address1);
						addXMLElement(xmlWriter, "Address2", customersFound[j].addressBook.preferredAddress.address2);
						addXMLElement(xmlWriter, "City", customersFound[j].addressBook.preferredAddress.city);
						addXMLElement(xmlWriter, "State", customersFound[j].addressBook.preferredAddress.stateCode);
						addXMLElement(xmlWriter, "PostalCode", customersFound[j].addressBook.preferredAddress.postalCode);
						addXMLElement(xmlWriter, "Country", customersFound[j].addressBook.preferredAddress.countryCode.value);
						addXMLElement(xmlWriter, "Phone1", customersFound[j].addressBook.preferredAddress.phone);
						addXMLElement(xmlWriter, "Email", customersFound[j].email);
						addXMLElement(xmlWriter, "FirstName", customersFound[j].addressBook.preferredAddress.firstName);
						addXMLElement(xmlWriter, "MiddleName", customersFound[j].addressBook.preferredAddress.secondName);
						addXMLElement(xmlWriter, "LastName", customersFound[j].addressBook.preferredAddress.lastName);
						addXMLElement(xmlWriter, "Suffix",customersFound[j].addressBook.preferredAddress.suffix);
						addXMLElement(xmlWriter, "AttributeName", "BILLTO");
						xmlWriter.writeEndElement();
					}
					
					for( k in customersFound[j].addressBook.addresses ) {
						xmlWriter.writeStartElement("Address");
						addXMLElement(xmlWriter, "ClientID", GMClientID);
						addXMLElement(xmlWriter, "Address1", customersFound[j].addressBook.addresses[k].address1);
						addXMLElement(xmlWriter, "Address2", customersFound[j].addressBook.addresses[k].address2);
						addXMLElement(xmlWriter, "City", customersFound[j].addressBook.addresses[k].city);
						addXMLElement(xmlWriter, "State", customersFound[j].addressBook.addresses[k].stateCode);
						addXMLElement(xmlWriter, "PostalCode", customersFound[j].addressBook.addresses[k].postalCode);
						addXMLElement(xmlWriter, "Country", customersFound[j].addressBook.addresses[k].countryCode.value);
						addXMLElement(xmlWriter, "Phone1", customersFound[j].addressBook.addresses[k].phone);
						addXMLElement(xmlWriter, "Email", customersFound[j].email);
						addXMLElement(xmlWriter, "FirstName", customersFound[j].addressBook.addresses[k].firstName);
						addXMLElement(xmlWriter, "MiddleName", customersFound[j].addressBook.addresses[k].secondName);
						addXMLElement(xmlWriter, "LastName", customersFound[j].addressBook.addresses[k].lastName);
						addXMLElement(xmlWriter, "Suffix",customersFound[j].addressBook.addresses[k].suffix);
						addXMLElement(xmlWriter, "AttributeName", "SHIPTO");
						xmlWriter.writeEndElement();
					}
				
					xmlWriter.writeEndElement();
					xmlWriter.writeEndElement();

					var updateCustomer : Profile = dw.customer.CustomerMgr.getProfile( customersFound[j].customerNo);
					updateCustomer.custom.readyForExport = false;

				} catch(e) {
					Logger.error("CSS Customer Export Feed Error, Customer Number:{0} Error: {1}",customersFound[j].customerNo ,e.message);
				}
			}
	    		
			xmlWriter.writeEndElement();
			xmlWriter.writeEndDocument();
			xmlWriter.flush();
			xmlWriter.close();
			fileWriter.flush();
			fileWriter.close();
		    		
	    	}


   return PIPELET_NEXT;
}

 function addXMLElement( xWriter : XMLIndentingStreamWriter, nodeName : string, content : string) {
   	xWriter.writeStartElement(nodeName);
   	if (content != null) {
   		xWriter.writeCharacters(content);
   	}
   	else {
   		xWriter.writeCharacters("");	
   	}
   	xWriter.writeEndElement();
 }
 
 function addXMLElementCDATA( xWriter : XMLIndentingStreamWriter, nodeName : string, content : string) {
   	xWriter.writeStartElement(nodeName);
   	if (content != null) {
   		xWriter.writeCData(content);
   	}
   	else {
   		xWriter.writeCharacters("");	
   	}
   	xWriter.writeEndElement();
 }