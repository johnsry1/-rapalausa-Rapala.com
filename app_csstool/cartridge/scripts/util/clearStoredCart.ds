/**
*
*   @input Basket : dw.order.Basket
*
*/
importPackage( dw.system   );
importPackage( dw.order    );
importPackage( dw.campaign );
importPackage( dw.util     );

function execute( args : PipelineDictionary ) : Number
{
	if (!empty(args.Basket)) { 
		
		try { 
			//First we will remove all of the Product Line Items
			var ProductLineItems : LineItemCtnr = args.Basket.getProductLineItems();
			if (!empty(ProductLineItems)) {
				for each (var lineItem : ProductLineItem in ProductLineItems) {
					try { 
						args.Basket.removeProductLineItem(lineItem);
					} catch (e) {
						var error = e.message;
						Logger.error("Unable to remove product line item {0} from basket, error: {1}", lineItem, error);
					}	
				}
			}
			//Next we will remove any Coupons
			var CouponLineItems : LineItemCtnr = args.Basket.getCouponLineItems();
			if (!empty(CouponLineItems)) {
				for each (var coupon : CouponLineItem in CouponLineItems) {
					try { 
						args.Basket.removeCouponLineItem(coupon);
					} catch (e) {
						var error = e.message;
						Logger.error("Unable to remove coupon {0} from basket, error: {1}", coupon, error);
					}	
				}
				
			}
			
			//Next we will remove any other promotions
			var PriceAdjustments : LineItemCtnr = args.Basket.getPriceAdjustments();
			if (!empty(PriceAdjustments)) {
				for each (var adjustment : PriceAdjustment in PriceAdjustments) {
					try { 
						args.Basket.removePriceAdjustment(adjustment);
					} catch (e) {
						var error = e.message;
						Logger.error("Unable to remove price adjustment {0} from basket, error: {1}", adjustment, error);
					}	
				}
				
			}			
			//Next we will remove any shipments
			var Shipments : LineItemCtnr = args.Basket.getShipments();
			if (!empty(Shipments)) {
				for each (var shipment : Shipment in Shipments) {
					try { 
						args.Basket.removeShipment(shipment);
					} catch (e) {
						var error = e.message;
						Logger.error("Unable to remove shipment {0} from basket, error: {1}", shipment, error);
					}	
				}
				
			}			
			//Finally we will remove any payment instruments
			var PaymentInstruments : LineItemCtnr = args.Basket.getPaymentInstruments();
			if (!empty(PaymentInstruments)) {
				for each (var paymentInstrument : PaymentInstrument in PaymentInstruments) {
					try { 
						args.Basket.removePaymentInstrument(paymentInstrument);
					} catch (e) {
						Logger.error("Unable to remove payment instrument {0} from basket, error: {1}", paymentInstrument, error);
					}	
				}
				
			}			
			
		} catch (e) {
			
		}
	}
    return PIPELET_NEXT;
}
