/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
* @input OrdersPerFile : String
* @input UpperBound : String  Date formatted in 2010-01-01T00:00:00 yyyy-MM-ddTHH:MM:SS format.
* @input LowerBound : String	Date formatted in 2010-01-01T00:00:00 yyyy-MM-ddTHH:MM:SS format.
*
*/
importPackage( dw.system );
importPackage( dw.customer );
importPackage( dw.net );
importPackage( dw.io );
importPackage( dw.util );
importPackage( dw.catalog );
importPackage( dw.order );

function execute( args : PipelineDictionary ) : Number {

   		//Allow for users per file override from job parameter
   		var iterLimit = args.OrdersPerFile;
   		var sql = "";
	    if (!empty(args.LowerBound) && !empty(args.UpperBound)) {
	       	sql = "(custom.exportedToCSS = false OR custom.exportedToCSS = NULL) AND creationDate >= "+ args.LowerBound + " AND creationDate <= "+ args.UpperBound;
		} else { 
	 		sql = "custom.exportedToCSS != true OR custom.exportedToCSS = NULL";
	    }
   		
	    var totalCount = OrderMgr.queryOrders(sql,"orderNo ASC").count;
	    var iteration = ( totalCount / iterLimit ).toFixed(0);
	    var GMClientID = Site.getCurrent().getCustomPreferenceValue("CSSServiceClientID");
	    
	    for( i = 0 ; i <= iteration ; i++ ){
	    	var ordersFound : Collection = OrderMgr.queryOrders(sql,"orderNo ASC").asList(0, iterLimit);	
			var date : Calendar = new Calendar();
			var timestamp = StringUtils.formatCalendar(date, "MMddyyyyHHmmss");
			var file : File = new File(dw.io.File.IMPEX + File.SEPARATOR + "upload" + File.SEPARATOR + "GMOrder_" + dw.system.Site.getCurrent().ID + "_" + timestamp + "_" + i + ".xml");
			
			if (ordersFound.length<1) {
				break;
			}
				
			var fileWriter : FileWriter = new FileWriter(file, "utf-8");
  			var xmlWriter : XMLIndentingStreamWriter = new XMLIndentingStreamWriter(fileWriter);
	    	
  			xmlWriter.writeStartDocument("UTF-8", "1.0");
  			xmlWriter.writeStartElement("GlobalMerchant");
	    	
	    	for( j in ordersFound ){
				try {
					
					var email = '';
					if('email' in ordersFound[j].billingAddress.custom && !empty(ordersFound[j].billingAddress.custom.email)) {
		  				email = ordersFound[j].billingAddress.custom.email;
		  			} else {
		  				if(!empty(ordersFound[j].customerEmail)) {
		  					 email = ordersFound[j].customerEmail;
		  				}
		  			}
		  			
					xmlWriter.writeStartElement("User");					
					addXMLElement(xmlWriter, "ClientID", GMClientID);
					if (ordersFound[j].customer.anonymous && !ordersFound[j].customer.registered) {
						addXMLElement(xmlWriter, "UserName", email);
						addXMLElement(xmlWriter, "UserTypeID", "1");
					} else {
						addXMLElement(xmlWriter, "UserName", ordersFound[j].customerNo);
						addXMLElement(xmlWriter, "UserTypeID", "3");
					}
					
					//Addresss Header for Users
					xmlWriter.writeStartElement("Addresses");
										
					//Billing Address Information
					xmlWriter.writeStartElement("Address");
					addXMLElement(xmlWriter, "ClientID", GMClientID);
					if (!empty(ordersFound[j].billingAddress.address1)){
						addXMLElement(xmlWriter, "Address1", ordersFound[j].billingAddress.address1);
					}
					if (!empty(ordersFound[j].billingAddress.address2)){
						addXMLElement(xmlWriter, "Address2", ordersFound[j].billingAddress.address2);
					}
					if (!empty(ordersFound[j].billingAddress.city)){
						addXMLElement(xmlWriter, "City", ordersFound[j].billingAddress.city);
					}
					if (!empty(ordersFound[j].billingAddress.stateCode)){
						addXMLElement(xmlWriter, "State", ordersFound[j].billingAddress.stateCode);
					}
					if (!empty(ordersFound[j].billingAddress.postalCode)){
						addXMLElement(xmlWriter, "PostalCode", ordersFound[j].billingAddress.postalCode);
					}
					if (!empty(ordersFound[j].billingAddress.countryCode.value)){
						addXMLElement(xmlWriter, "Country", ordersFound[j].billingAddress.countryCode.value);
					}
					if (!empty(ordersFound[j].billingAddress.phone)){
						addXMLElement(xmlWriter, "Phone1", ordersFound[j].billingAddress.phone);
					}
					
					addXMLElement(xmlWriter, "Email", email);					
					
					addXMLElement(xmlWriter, "AttributeName", "BILLTO");
					
					if (!empty(ordersFound[j].billingAddress.firstName)){
						addXMLElement(xmlWriter, "FirstName", ordersFound[j].billingAddress.firstName);
					}
					if (!empty(ordersFound[j].billingAddress.lastName)){
						addXMLElement(xmlWriter, "LastName", ordersFound[j].billingAddress.lastName);
					}
					xmlWriter.writeEndElement(); //Billing Address
					
					//Close Addresses for Users
					xmlWriter.writeEndElement(); //Addresses					
					
					xmlWriter.writeStartElement("OrderHeaders");
					xmlWriter.writeStartElement("OrderHeader");
					
					addXMLElement(xmlWriter, "ClientID", GMClientID);
					if (!ordersFound[j].customer.anonymous && ordersFound[j].customer.registered) {
						addXMLElement(xmlWriter, "UserName", ordersFound[j].customerNo);
					}
					addXMLElement(xmlWriter, "OrderNumber", ordersFound[j].orderNo);					
					addXMLElement(xmlWriter, "PONumber", ordersFound[j].orderNo);
					
		  			addXMLElement(xmlWriter, "Email", email);
		  			
		  			addXMLElement(xmlWriter, "ToCurrencyID", "1");
					addXMLElement(xmlWriter, "FreightCharge", ordersFound[j].shippingTotalPrice.toNumberString());
					addXMLElement(xmlWriter, "FreightMethod", ordersFound[j].shipments[0].shippingMethod.custom.jdeID);
					addXMLElement(xmlWriter, "Status", "1");
					
					//Create Order Date and Order Time Strings
					var orderDate : Date = ordersFound[j].creationDate;
					// gets a calendar object in the timezone of the site
					var cal : Calendar = Site.getCalendar(); 
					cal.setTime(orderDate);
					var orderDateString : String = StringUtils.formatCalendar(cal, "yyyyMMdd");
					var orderTimeString : String = StringUtils.formatCalendar(cal, "HHmmss");
					
					addXMLElement(xmlWriter, "OrderDate", orderDateString);
					addXMLElement(xmlWriter, "OrderTime", orderTimeString);
					
					addXMLElement(xmlWriter, "GeneralUseColumn6", ordersFound[j].orderNo); //OrderNumber
					if (!ordersFound[j].customer.anonymous && ordersFound[j].customer.registered) {
						addXMLElement(xmlWriter, "GeneralUseColumn7", ordersFound[j].customerNo); //CustomerNumber
					}
					
					var orderCampaigns : String = "";
					var orderPromotions : String = "";
					
					for (hpli in ordersFound[j].productLineItems) {
						for (pra in ordersFound[j].productLineItems[hpli].priceAdjustments) {
							if (!empty(ordersFound[j].productLineItems[hpli].priceAdjustments[pra].campaignID)) {
								orderCampaigns = ordersFound[j].productLineItems[hpli].priceAdjustments[pra].campaignID + "|";
							}
							if (!empty(ordersFound[j].productLineItems[hpli].priceAdjustments[pra].promotionID)) {
								orderPromotions = ordersFound[j].productLineItems[hpli].priceAdjustments[pra].promotionID + "|";
							}
						} 	
					}
					
					addXMLElement(xmlWriter, "GeneralUseColumn9", orderCampaigns);	//CampaignID				
					addXMLElement(xmlWriter, "GeneralUseColumn10", orderPromotions); //PromotionID
					addXMLElement(xmlWriter, "OrderTypeID", ""); 
					
					//Addresss Header
					xmlWriter.writeStartElement("Addresses");
										
					//Billing Address Information
					xmlWriter.writeStartElement("Address");
					addXMLElement(xmlWriter, "ClientID", GMClientID);
					if (!empty(ordersFound[j].billingAddress.address1)){
						addXMLElement(xmlWriter, "Address1", ordersFound[j].billingAddress.address1);
					}
					if (!empty(ordersFound[j].billingAddress.address2)){
						addXMLElement(xmlWriter, "Address2", ordersFound[j].billingAddress.address2);
					}
					if (!empty(ordersFound[j].billingAddress.city)){
						addXMLElement(xmlWriter, "City", ordersFound[j].billingAddress.city);
					}
					if (!empty(ordersFound[j].billingAddress.stateCode)){
						addXMLElement(xmlWriter, "State", ordersFound[j].billingAddress.stateCode);
					}
					if (!empty(ordersFound[j].billingAddress.postalCode)){
						addXMLElement(xmlWriter, "PostalCode", ordersFound[j].billingAddress.postalCode);
					}
					if (!empty(ordersFound[j].billingAddress.countryCode.value)){
						addXMLElement(xmlWriter, "Country", ordersFound[j].billingAddress.countryCode.value);
					}
					if (!empty(ordersFound[j].billingAddress.phone)){
						addXMLElement(xmlWriter, "Phone1", ordersFound[j].billingAddress.phone);
					}
					
					addXMLElement(xmlWriter, "Email", email);
					
					
					addXMLElement(xmlWriter, "AttributeName", "BILLTO");
					
					if (!empty(ordersFound[j].billingAddress.firstName)){
						addXMLElement(xmlWriter, "FirstName", ordersFound[j].billingAddress.firstName);
					}
					if (!empty(ordersFound[j].billingAddress.lastName)){
						addXMLElement(xmlWriter, "LastName", ordersFound[j].billingAddress.lastName);
					}
					xmlWriter.writeEndElement(); //Billing Address
					
					//Shipping Address Information 
					for (shp in ordersFound[j].shipments) { 
						xmlWriter.writeStartElement("Address");
						addXMLElement(xmlWriter, "ClientID", GMClientID);
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.address1)){
							addXMLElement(xmlWriter, "Address1", ordersFound[j].shipments[shp].shippingAddress.address1);
						}
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.address2)){
							addXMLElement(xmlWriter, "Address2", ordersFound[j].shipments[shp].shippingAddress.address2);
						}
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.city)){
							addXMLElement(xmlWriter, "City", ordersFound[j].shipments[shp].shippingAddress.city);
						}
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.stateCode)){
							addXMLElement(xmlWriter, "State", ordersFound[j].shipments[shp].shippingAddress.stateCode);
						}
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.postalCode)){
							addXMLElement(xmlWriter, "PostalCode", ordersFound[j].shipments[shp].shippingAddress.postalCode);
						}
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.countryCode.value)){
							addXMLElement(xmlWriter, "Country", ordersFound[j].shipments[shp].shippingAddress.countryCode.value);
						}
						if (!empty(ordersFound[j].shipments[shp].shippingAddress.phone)){
							addXMLElement(xmlWriter, "Phone1", ordersFound[j].shipments[shp].shippingAddress.phone);
						}
						
						addXMLElement(xmlWriter, "Email", email);
						
						addXMLElement(xmlWriter, "AttributeName", "SHIPTO");

						if (!empty(ordersFound[j].billingAddress.firstName)){
							addXMLElement(xmlWriter, "FirstName", ordersFound[j].shipments[shp].shippingAddress.firstName);
						}
						if (!empty(ordersFound[j].billingAddress.lastName)){
							addXMLElement(xmlWriter, "LastName", ordersFound[j].shipments[shp].shippingAddress.lastName);
						}
						xmlWriter.writeEndElement(); //Shipping Address
					}
					
					//Close Addresses
					xmlWriter.writeEndElement(); //Addresses
					
					//Write Order Details Start
					xmlWriter.writeStartElement("OrderDetails");
					
					//Start Order Details
					var lineNumber = 1;
					for (pli in ordersFound[j].productLineItems) {
					xmlWriter.writeStartElement("OrderDetail");
					addXMLElement(xmlWriter, "ClientID", GMClientID);
					addXMLElement(xmlWriter, "OrderLine", lineNumber);
					addXMLElement(xmlWriter, "ProductCode", ordersFound[j].productLineItems[pli].productID);
					addXMLElement(xmlWriter, "OrderQuantity", ordersFound[j].productLineItems[pli].quantity.value);
					addXMLElement(xmlWriter, "UnitPrice", ordersFound[j].productLineItems[pli].basePrice.toNumberString());
					addXMLElement(xmlWriter, "Description", ordersFound[j].productLineItems[pli].lineItemText);
					addXMLElement(xmlWriter, "SalesTax1", ordersFound[j].productLineItems[pli].tax.value);
					addXMLElement(xmlWriter, "CatalogID", "1");
					lineNumber++;
					xmlWriter.writeEndElement(); //OrderDetail	
					} 
					xmlWriter.writeEndElement(); //OrderDetails
					
					//Write Order Payments Section Start
					xmlWriter.writeStartElement("OrderPayments");
					
					//Write Order Payment
					for (pmt in ordersFound[j].paymentInstruments) {
						xmlWriter.writeStartElement("OrderPayment");
						addXMLElement(xmlWriter, "ClientID", GMClientID);
						addXMLElement(xmlWriter, "Amount", ordersFound[j].paymentInstruments[pmt].paymentTransaction.amount.toNumberString());
						
						if (ordersFound[j].paymentInstruments[pmt].paymentMethod == "CREDIT_CARD" && !empty(ordersFound[j].paymentInstruments[pmt].creditCardType)) {
							switch(ordersFound[j].paymentInstruments[pmt].creditCardType) {
								case ("Visa") :
									addXMLElement(xmlWriter, "PaymentTypeID", "1");
									var expirationDate = ordersFound[j].paymentInstruments[pmt].creditCardExpirationMonth + "/" + ordersFound[j].paymentInstruments[pmt].creditCardExpirationYear;
									addXMLElement(xmlWriter, "ExpirationDate", expirationDate);
									addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositorySystemID);
									addXMLElement(xmlWriter, "GeneralUseColumn9", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositoryToken);
								break; 
								
								case ("Master") :
									addXMLElement(xmlWriter, "PaymentTypeID", "4");
									var expirationDate = ordersFound[j].paymentInstruments[pmt].creditCardExpirationMonth + "/" + ordersFound[j].paymentInstruments[pmt].creditCardExpirationYear;
									addXMLElement(xmlWriter, "ExpirationDate", expirationDate);
									addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositorySystemID);
									addXMLElement(xmlWriter, "GeneralUseColumn9", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositoryToken);									
								break;
								
								case ("Amex") : 
									addXMLElement(xmlWriter, "PaymentTypeID", "3");
									var expirationDate = ordersFound[j].paymentInstruments[pmt].creditCardExpirationMonth + "/" + ordersFound[j].paymentInstruments[pmt].creditCardExpirationYear;
									addXMLElement(xmlWriter, "ExpirationDate", expirationDate);
									addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositorySystemID);
									addXMLElement(xmlWriter, "GeneralUseColumn9", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositoryToken);									
								break;
								
								case ("Discover") : 
									addXMLElement(xmlWriter, "PaymentTypeID", "2");
									var expirationDate = ordersFound[j].paymentInstruments[pmt].creditCardExpirationMonth + "/" + ordersFound[j].paymentInstruments[pmt].creditCardExpirationYear;
									addXMLElement(xmlWriter, "ExpirationDate", expirationDate);
									addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositorySystemID);
									addXMLElement(xmlWriter, "GeneralUseColumn9", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.PFSRepositoryToken);									
								break;
								
								default:
								break;
							}
						}
						
						if (ordersFound[j].paymentInstruments[pmt].paymentMethod == "PROTOBASE_GIFTCARD") {
							addXMLElement(xmlWriter, "PaymentTypeID", "7");
							addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.giftCardApprovalCode);
							addXMLElement(xmlWriter, "GeneralUseColumn9", ordersFound[j].paymentInstruments[pmt].paymentTransaction.custom.GiftCardNumberPFSRepositoryToken);		
						}
						
						if (ordersFound[j].paymentInstruments[pmt].paymentMethod == "PayPal") {
							addXMLElement(xmlWriter, "PaymentTypeID", "11");
							addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].custom.paypalAuthID);									
						}
						
						if (ordersFound[j].paymentInstruments[pmt].paymentMethod == "INTERAC") {
							addXMLElement(xmlWriter, "PaymentTypeID", "13");					
							addXMLElement(xmlWriter, "AuthorizationNumber", ordersFound[j].paymentInstruments[pmt].paymentTransaction.transactionID);									
						}
						
						/*
						Place Holder for additional payment type values. This is the payment method table that exists in GM for all clients. If you need to add a payment type use the following values: 
						PaymentTypeID	Description
								1 - Visa
								2 - Discover
								3 - American Express
								4 - MasterCard
								5 - Bill Me Later
								6 - FiftyOne
								7 - ProtoBase Gift Crad
								8 - FirstData Gift Card
								9 - Ogone Credit
								10 - Ogone Debit
								11 - Paypal
								12 - C.O.D
								13 - INTERAC

						*/
						
						xmlWriter.writeEndElement(); //OrderPayment
					}
					
					xmlWriter.writeEndElement(); //OrderPayments
					xmlWriter.writeEndElement(); //OrderHeader
					xmlWriter.writeEndElement(); //OrderHeaders
					xmlWriter.writeEndElement(); //User

					var updateOrder : Order = OrderMgr.getOrder(ordersFound[j].orderNo);
					updateOrder.custom.exportedToCSS = true;

				} catch(e) {
					Logger.error("CSS Order Export Feed Error, Order Number:{0} Error: {1}",ordersFound[j].orderNo ,e.message);
				}
			}
	    		
			xmlWriter.writeEndElement();
			xmlWriter.writeEndDocument();
			xmlWriter.flush();
			xmlWriter.close();
			fileWriter.flush();
			fileWriter.close();
		    		
	    	}


   return PIPELET_NEXT;
}

 function addXMLElement( xWriter : XMLIndentingStreamWriter, nodeName : string, content : string) {
   	xWriter.writeStartElement(nodeName);
   	if (content != null) {
   		xWriter.writeCharacters(content);
   	}
   	else {
   		xWriter.writeCharacters("");	
   	}
   	xWriter.writeEndElement();
 }
 
 function addXMLElementCDATA( xWriter : XMLIndentingStreamWriter, nodeName : string, content : string) {
   	xWriter.writeStartElement(nodeName);
   	if (content != null) {
   		xWriter.writeCData(content);
   	}
   	else {
   		xWriter.writeCharacters("");	
   	}
   	xWriter.writeEndElement();
 }