importPackage(dw.system);
importPackage(dw.svc);
importPackage(dw.object);
importPackage(dw.customer);
/**
 * Initialize Create GM Customer service
 */    

ServiceRegistry.configure("csstool.http.gmcustomer.post", {
	
   createRequest: function(svc:Service, params) {
   		
   		var emptyObject : Object = params.emptyObject;
   		var customer : Customer = params.customer;
   		var $this : Object = params.$this;
   		
   		var gmCustomer : XML = new XML(emptyObject);		
		var customerName : String = customer.profile.firstName + " " + customer.profile.lastName;		
		if(customerName.length > 30) {			
			customerName = customerName.substr(0, 30);
		}
		gmCustomer.ClientID = $this.serviceClientID;
		gmCustomer.Description = customerName;
		gmCustomer.Email = customer.profile.credentials.login;

		//#########################################################################################
		//Add Custom Attributes of Profile if existing in attribute group called iCA
		//#########################################################################################
		var notesout : XML = new XML("<Notes></Notes>");
		var profileGroup : ObjectAttributeGroup = dw.object.SystemObjectMgr.describe("Profile").getAttributeGroup("iCA");
		if (profileGroup!=null) {
			var attDefs = profileGroup.getAttributeDefinitions();
			for (var i=0,len=attDefs.length;i<len;i++) {
				var oad  :  ObjectAttributeDefinition = attDefs[i];
				var attr = customer.profile.custom[oad.ID];		
				var str : String = "";
				//if attr type is multi-value (e.g. set of strings), create a unique Note for each, appending "_[index]" to Note Name
				if (oad.multiValueType) {
					for (var key in attr) {
						if (attr.hasOwnProperty(key)) {
							var pair : XML = new XML("<Note></Note>");
							var name : XML = new XML("<Name>" + oad.ID+'_'+key + "</Name>");
							var value : XML = new XML("<Value>" + attr[key] + "</Value>");
							pair.appendChild(name);
							pair.appendChild(value);
							notesout.appendChild(pair);
						}
					}
				} else {
					var pair : XML = new XML("<Note></Note>");
					var name : XML = new XML("<Name>" + oad.ID + "</Name>");
					var value : XML = new XML("<Value>" + customer.profile.custom[oad.ID] + "</Value>");
					pair.appendChild(name);
					pair.appendChild(value);
					notesout.appendChild(pair);
				}
			}
		}		
		if (notesout!="") {
			gmCustomer.Notes = notesout;
		}

		gmCustomer.UserName = customer.profile.customerNo;
		gmCustomer.UserTypeId = 3;
		gmCustomer.CatalogID = 1;
		gmCustomer.CurrencyID = 1;
		
		svc = svc.setURL($this.usersURL + "/");
		
		svc = svc.setRequestMethod("POST");
		svc = svc.addHeader("Host", $this.serviceHostName);
		svc = svc.addHeader("User-Agent", $this.serviceUserAgent);
		svc = svc.addHeader("Content-type", "text/xml");
		svc = svc.addHeader("Content-Length", gmCustomer.toXMLString().length);
		svc = svc.addHeader("Authorization", $this.getAuthenticationData("text/xml"));
		
		return gmCustomer; 
   },

   parseResponse: function(svc:Service, response: Object) {
		return response;
   }
});

/**
 * Initialize Create GM Customer service
 */    

ServiceRegistry.configure("csstool.http.getemptyobject.get", {
	
   createRequest: function(svc:Service, params) {
   		
   		var $this = params.$this;
   		svc = svc.setURL($this.usersURL + "/");
		svc = svc.setRequestMethod("GET");
		svc = svc.addHeader("Host", $this.serviceHostName);
		svc = svc.addHeader("User-Agent", $this.serviceUserAgent);
		svc = svc.addHeader("Content-type", "text/xml");
		svc = svc.addHeader("Authorization", $this.getAuthenticationData("text/xml"));
		return "";
   },
   
   parseResponse: function(svc:Service, response: Object) {
		return response;
   }
});

/**
 * Initialize Create GM Customer service
 */    

ServiceRegistry.configure("csstool.http.sessiondataretrieval.get", {
	
   createRequest: function(svc:Service, params) {
   	
   		svc = svc.setURL(params.url);
   		svc = svc.setRequestMethod("GET");
   		svc = svc.addHeader("Host", params.serviceHostName);
		svc = svc.addHeader("User-Agent", params.serviceUserAgent);
		svc = svc.addHeader("Authorization", params.authenticationData);
		return "";
   },
   
   parseResponse: function(svc:Service, response: Object) {
		return response;
   }
});