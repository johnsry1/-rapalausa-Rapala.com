/**
* libProductImage
* Helper functions for Product Images.
*
* product 		(required)					- the product from which to show a view image
* image_index	(optional, default 1)		- the index of the view to show, if more product views are defined
* scale_width 	(optional, default 120)		- the width dimension the resulting <img> element has to fit
* scale_height	(optional, default 120)		- the width dimension the resulting <img> element has to fit
* format		(optional, default jpg)		- the image format
* fallback		(optional, default true)	- fall back to default image or return null
*
*/
importPackage(dw.system);
importPackage(dw.io);
importPackage(dw.catalog);
importPackage(dw.web);
importPackage(dw.util);

function getImageURL(product : Product, options : Map) {
	if (empty(product))
		return;
		
	var imageSourceFormat = Site.getCurrent().getPreferences().custom.productImageSourceFormat;
	var imageTargetFormat = Site.getCurrent().getPreferences().custom.productImageTargetFormat;
	
	var imageAltSourceFormat = Site.getCurrent().getPreferences().custom.productAltImageSourceFormat;
	
	// initialize parameters, with default values
	var imageIndex : String = !empty(options["image_index"]) ? options["image_index"] : 1;
	var scaleWidth = !empty(options["scale_width"]) ? options["scale_width"] : 170;
	var scaleHeight = !empty(options["scale_height"]) ? options["scale_height"] : 170;
	var format = !empty(options["format"]) ? options["format"] : imageTargetFormat.value;
	var fallback : Boolean = options["fallback"] ? options["fallback"] : true;
	
	// setup image resource access 
	var catalogId = Site.current.preferences.custom.pfs_MasterCatalogID;
	var imageDir = "images/productimages/";
	var imageNameFormat = '{0}-{1}.' + imageSourceFormat.value ; // where {0} is the product id and {1} is the image index
	var imageAltNameFormat = '{0}-{1}.' + imageAltSourceFormat.value ; // where {0} is the product id and {1} is the image index
	var imageName = StringUtils.format(imageNameFormat, product.ID, imageIndex);
	var imageAltName = StringUtils.format(imageAltNameFormat, product.ID, imageIndex);	
	
	// makes sure the param is of the right type
	if (typeof(scaleWidth)== "string") {
		scaleWidth = Number(scaleWidth);
	}
	if (typeof(scaleHeight)== "string") {
		scaleHeight = Number(scaleHeight);
	}
	
	// setup scaling transformation object
	var transform = {
		scaleMode: 'fit',
		scaleWidth: scaleWidth,
		scaleHeight: scaleHeight,
		format: format
	};
	
	// get a url to the product image and product detail page
	// if no product image could be found then check for an alt image and if that does not exist then show the no-image as fallback
	var productImage = null;

	var hasVariantImage = false;
	var hasVariantAltImage = false;
	var hasMasterImage = false;
	var hasMasterAltImage = false;
	if (product.variant) {
		hasVariantImage = hasImage(catalogId, imageName);
		
		if(!hasVariantImage) {
			hasVariantAltImage = hasImage(catalogId, imageAltName);
			
			if (!hasVariantImage || !hasVariantAltImage) {						
				imageName = dw.util.StringUtils.format(imageNameFormat, product.masterProduct.ID, imageIndex);
				hasMasterImage = hasImage(catalogId, imageName);
				
				if (!hasMasterImage) {
					imageAltName = dw.util.StringUtils.format(imageAltNameFormat, product.masterProduct.ID, imageIndex);
					hasMasterAltImage = hasImage(catalogId, imageAltName);
				}
			}
		}
	}
	else {
		hasMasterImage = hasImage(catalogId, imageName);
		
		if (!hasMasterImage) {
			hasMasterAltImage = hasImage(catalogId, imageAltName);	
		}
	}
	
	if (hasVariantAltImage || hasMasterAltImage) {
		hasVariantImage = hasVariantAltImage;
		hasMasterImage = hasMasterAltImage; 
		imageName = imageAltName;
		transform['format'] = imageAltSourceFormat;
	}
	
	if(hasVariantImage || hasMasterImage) {
		productImage = URLUtils.imageURL(URLUtils.CONTEXT_CATALOG, catalogId, imageDir + imageName, transform);
	} else if(fallback) {		
		productImage = URLUtils.imageURL(URLUtils.CONTEXT_CATALOG, catalogId, imageDir + 'no-image.png', transform);
	}
	
	return productImage;
}
		
function hasImage(catalogId, imageName) {
	var hasImage = false;
	var imagePath = dw.io.File.CATALOGS + "/"+ catalogId + "/default/images/productimages/" + imageName;
	var imageFile : File = new dw.io.File(imagePath);
	
	if(imageFile.exists()) {
		hasImage = true;
	}
	
	return hasImage;
}
