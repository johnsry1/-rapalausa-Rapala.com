/**
 *   @input CurrentWorkflowComponentInstance : Object
 */
importPackage(dw.catalog);
importPackage(dw.io);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);
importPackage(dw.value);

importScript("/libGoogleProductImage.ds");
importScript("app_disbestpractice:product/ProductImageSO.ds");

function execute(args: PipelineDictionary): Number {

	//Get component parameters
    var noOfProductsPerFile: Number = args.CurrentWorkflowComponentInstance.getParameterValue('noOfProductsPerFile');
    var index: Number = args.CurrentWorkflowComponentInstance.getParameterValue('index');

	//Calculate start index of products
    var startIndex: Number = noOfProductsPerFile * index;

    //Remove all files generated by previous schedule.
    if (index === 0) {
        var directory: File = new File(dw.io.File.IMPEX + '/src/google/');
        if(!empty(directory) && directory.exists()){
        	var files: dw.util.List = directory.listFiles();
	        for (let i = 0; i < files.length; i++) {
	            files[i].remove();
	        }
        }
    }


    var counter: Number = -1;
    var outputFile: File = new File(dw.io.File.IMPEX + dw.io.File.SEPARATOR + "src"+dw.io.File.SEPARATOR + "google"+ dw.io.File.SEPARATOR + "PREVAIL_google_id_equals_sku_feed"+"_"+args.CurrentWorkflowComponentInstance.getParameterValue('index')+".txt");

	//Create directory "linkshare" if does not exists already.
    (new dw.io.File(dw.io.File.IMPEX + '/src/google/')).mkdirs();

	//Get new string writer
    var tsvWriter: StringWriter = new StringWriter();

    //Write header line
    tsvWriter.write('id\t');
    tsvWriter.write('title\t');
    tsvWriter.write('description\t');
    tsvWriter.write('size\t');
    tsvWriter.write('color\t');
    tsvWriter.write('item_group_id\t');
    tsvWriter.write('link\t');
    tsvWriter.write('image_link\t');
    tsvWriter.write('condition\t');
    tsvWriter.write('brand\t');
    tsvWriter.write('mpn\t');
    tsvWriter.write('gender\t');
    tsvWriter.write('age_group\t');
    tsvWriter.write('availability\t');
    tsvWriter.write('price\t');
    tsvWriter.write('google_product_category\t');
    tsvWriter.write('product_type\t');
    tsvWriter.write('custom_label_0\t');
    tsvWriter.write('promotion_id\t');
    tsvWriter.write('GTIN');
    tsvWriter.write('\n');

    if (!writeFile(outputFile, tsvWriter.toString(), false)) {
        return PIPELET_ERROR;
    }

	//Close the writer
    tsvWriter.close();

	//Execute search and get products.
    var PSM: ProductSearchModel = new ProductSearchModel();
    PSM.setCategoryID('root');
    PSM.setRecursiveCategorySearch(true);
    PSM.search();

	//Declare variables needed inside the loop here.
    var products = PSM.getProducts();
    var prodName: String = "";
    var prodID: String = "";
    var productStringWriter: StringWriter = null;
    var size: String = "";
    var product: Product = null;

    while (products.hasNext()) {
        product = products.next();
        if (!product.isOnline() || product.isProductSet()) {
            continue;
        }
        if (product.isMaster()) {

            counter = counter + 1;
            if (counter < startIndex) {
                continue;
            }
            if (counter == noOfProductsPerFile * (index + 1)) {
                break;
            }

            var product_type: String = '';
            if (!empty(product.primaryCategory) && product.primaryCategory != null) {
                var allCat: Collection = product.getCategories();
                var allCatIter: Iterator = allCat.iterator();
                while (allCatIter.hasNext()) {
                    var catName: Category = allCatIter.next();
                    if (product.primaryCategory.ID == catName.ID) {
                        var categoriesPath = [];
                        if ((catName.ID).indexOf("-") != -1) {
                            categoriesPath = (catName.ID).split('-');
                            for (var i = 0; i < categoriesPath.length; i++) {
                                categoriesPath[i] = categoriesPath[i].charAt(0).toUpperCase() + categoriesPath[i].slice(1);
                            }
                            product_type = categoriesPath.join(' > ');
                        } else {
                            product_type = catName.ID;
                        }
                    }
                }
            }

            var googleProductCategory: String = '';

            if (!empty(product.primaryCategory)) {
               // if (!empty(product.primaryCategory.custom.googleTaxonomy)) {
                 //   googleProductCategory = product.primaryCategory.custom.googleTaxonomy;
                //} else {
                    googleProductCategory = product_type;
                //}
            } else {
                var allCategories: Collection = product.getCategories();
                if (allCategories.length > 0) {
                    var catName: Category = allCategories[0];
                    var categoriesPath = [];
                    if ((catName.ID).indexOf("-") != -1) {
                        categoriesPath = (catName.ID).split('-');
                        for (var i = 0; i < categoriesPath.length; i++) {
                            categoriesPath[i] = categoriesPath[i].charAt(0).toUpperCase() + categoriesPath[i].slice(1);
                        }
                        googleProductCategory = categoriesPath.join(' > ');
                    } else {
                        googleProductCategory = catName.ID;
                    }
                }
            }

            var variants: Collection = product.getVariants();
            for (var indexPosition: Number = 0; indexPosition < variants.length; indexPosition++) {
                product = variants[indexPosition];
                if (!writeFile(outputFile, prepareData(product, product_type, googleProductCategory), true)) {
                    return PIPELET_ERROR;
                }
            }
        }
    }

    return PIPELET_NEXT;
}

function prepareData(product: Product, product_type: String, googleProductCategory: String): String {
    var productStringWriter: StringWriter = new StringWriter();
    var sizeCustom;
    if (!empty(product.custom.size) && product.custom.size != null) {
        sizeCustom = product.custom.size;
    }

    var colorValue: String = "";
    var colorGroup: String = "";
    if (!empty(product.custom.color) && product.custom.color != null) {
        colorValue = product.custom.color;
        for (var i = 0; i < colorValue.length; i++) {
            if (empty(colorValue[i + 1])) {
                colorGroup = colorGroup + colorValue[i];
            } else {
                colorGroup = colorGroup + colorValue[i];
            }
        }

    }

    var itemGroupId = "";

    if (product.getVariationModel().getMaster() != null) {
        itemGroupId = product.getVariationModel().getMaster().getID();
    }

    //    var imageURL = getImageURL(product, new HashMap());
    var availStatus;
    var availibility = product.availabilityModel.availabilityStatus;
    if (availibility == 'IN_STOCK') {
        availStatus = 'in stock';
    } else if (availibility == 'NOT_AVAILABLE') {
        availStatus = 'out of stock';
    } else if (availibility == 'BACKORDER') {
        availStatus = 'in stock';
    } else if (availibility == 'PREORDER') {
        availStatus = 'preorder';
    } else {
        availStatus = 'no';
    }
    var catalogId: String = CatalogMgr.getSiteCatalog().getID();

    var finaldesc: String = "";
    if (product.shortDescription != null) {
        var rex = /(<([^>]+)>)/ig;
        finaldesc = product.shortDescription.toString().replace(rex, "").trim().replace(/\t/g, ' ').replace(/\n/g, ' ').replace(/\s\s+/g, ' ');
    }

    var brandname: String = "";
    if (product.brand != null) {
        brandname = product.brand;
    }

    var mpn: String = null;
    if (!empty(product.manufacturerSKU) && product.manufacturerSKU != null) {
        mpn = product.manufacturerSKU;
    }

    var gender = product.custom.gender;
    if (gender != null && !empty(gender)) {
        gender = gender[0];
    } else {
        gender = "";
    }

    var age_group: String = "";
    if (gender != null && !empty(gender)) {
        if (gender == 'Boys') {
            age_group = 'kids';
        } else if (gender == 'Girls') {
            age_group = 'kids';
        } else if (gender == 'Infant') {
            age_group = 'infant';
        } else if (gender == 'Men') {
            age_group = 'adult';
        } else if (gender == 'Toddler') {
            age_group = 'toddler';
        } else if (gender == 'Women') {
            age_group = 'adult';
        } else if (gender == 'Youth') {
            age_group = 'kids';
        } else {
            age_group = 'adult';
        }

    }

    var created = product.getCreationDate();
    var createdMth = created.getMonth();
    var actualCreatedMonth = createdMth + 1;
    var createdMonth: String = (actualCreatedMonth.toString().length == 1) ? "0" + actualCreatedMonth.toString() : actualCreatedMonth.toString();
    var createdDate: String = (created.getDate().toString().length == 1) ? "0" + created.getDate().toString() : created.getDate().toString();
    var createdYear: String = created.getFullYear().toString();

    var dateCreation: String = createdMonth + "/" + createdDate + "/" + createdYear;

    var modified = product.getLastModified();
    var modifiedMth = modified.getMonth();
    var actualModifiedMonth = modifiedMth + 1;
    var modifiedMonth: String = (actualModifiedMonth.toString().length == 1) ? "0" + actualModifiedMonth.toString() : actualModifiedMonth.toString();
    var modifiedDate: String = (modified.getDate().toString().length == 1) ? "0" + modified.getDate().toString() : modified.getDate().toString();
    var modifiedYear: String = modified.getFullYear().toString();

    var dateModified: String = modifiedMonth + "/" + modifiedDate + "/" + modifiedYear;
    var listPrice: Number;
    var productprice: ProductPriceModel = product.getPriceModel();
    var pricemoney: Money = productprice.getPrice();
    var price = pricemoney.getValue();

    var image1 = new ProductImage('pdpdesktop', product, 0);
    if (image1 != null) {
        var image1 = image1.getURL().toString();
    }
    var upc: String = "";
    if (product.UPC != null && !empty(product.UPC)) {
        upc = product.UPC;
    }

    var manufacturer: String = null;
    if (!empty(product.manufacturerName) && product.manufacturerName != null) {
        manufacturer = product.manufacturerName;
    }
    var productname: String = null;
    if (!empty(product.name) && product.name != null) {
        productname = product.name;
    }
    var productcolor: Array = new Array();
    productcolor.push(productname);
    productcolor.push(colorGroup);
    var productnamecolor;
    if (!empty(colorGroup)) {
        productnamecolor = productcolor.join('-');
    } else {
        productnamecolor = productname;
    }
    var custom_label_0 = "";
    var promotion_id = "";
    productStringWriter.write(product.ID ? product.ID + "\t" : '' + "\t");
    productStringWriter.write(productnamecolor ? productnamecolor + "\t" : '' + "\t");
    productStringWriter.write(finaldesc ? finaldesc + "\t" : '' + "\t");
    productStringWriter.write(sizeCustom ? sizeCustom + "\t" : '' + "\t");
    productStringWriter.write(colorGroup ? colorGroup + "\t" : '' + "\t");
    productStringWriter.write(itemGroupId ? itemGroupId + "\t" : '' + "\t");
    productStringWriter.write(URLUtils.https('Product-Show', 'pid', product.ID).toString() + "\t");
    productStringWriter.write(image1 ? image1 + "\t" : '' + "\t");
    productStringWriter.write('New' + "\t");
    productStringWriter.write(brandname ? brandname + "\t" : '' + "\t");
    productStringWriter.write(mpn ? mpn + "\t" : '' + "\t");
    productStringWriter.write(gender ? gender + "\t" : '' + "\t");
    productStringWriter.write(age_group ? age_group + "\t" : '' + "\t");
    productStringWriter.write(availStatus ? availStatus + "\t" : '' + "\t");
    productStringWriter.write(price ? price + "\t" : '' + "\t");
    productStringWriter.write(googleProductCategory ? googleProductCategory + "\t" : '' + "\t");
    productStringWriter.write(product_type ? product_type + "\t" : '' + "\t");
    productStringWriter.write(custom_label_0 ? custom_label_0 + "\t" : '' + "\t");
    productStringWriter.write(promotion_id ? promotion_id + "\t" : '' + "\t");
    productStringWriter.write(upc ? upc : '');
    productStringWriter.write('' + "\n");
    return productStringWriter.toString();
}

function writeFile(tgtFile: File, content: String, isAppend: Boolean): Boolean {
    try {
        if (!tgtFile.exists()) {
            if (!tgtFile.createNewFile()) {
                Logger.error("File " + tgtFile.name + " could not be created!");
                return false;
            }
        }

        var out: FileWriter = new FileWriter(tgtFile, isAppend);
        out.write(content);
        out.flush();
        out.close();
    } catch (e) {
        Logger.error("An error occured while exporting Products {0}.", e);
        return false;
    }
    return true;
}