/**
 *   @input OutputFile : dw.io.File
 *   @output OutputFile: dw.io.File
 */
importPackage(dw.catalog);
importPackage(dw.io);
importPackage(dw.system);
importPackage(dw.util);
importPackage(dw.web);
importPackage(dw.value);

function execute(args: PipelineDictionary): Number {
	
    var outputFile: File = args.OutputFile;
    var filename: String = outputFile.getFullPath();
   
    if (!outputFile.exists()) {
        var dir: File = new File(filename.substr(0, filename.lastIndexOf(File.SEPARATOR)));
        if (!dir.exists() && !dir.mkdirs()) {
            Logger.error("Can't create the local directory {0}.", dir.name);
            return PIPELET_ERROR;
        }
        outputFile.createNewFile();
    }

    var tsvWriter: StringWriter = new StringWriter();
    tsvWriter.write('master_id\t');
    tsvWriter.write('variants\t');
    tsvWriter.write('\n');

    if (!writeFile(outputFile, tsvWriter.toString(), false)) {
        return PIPELET_ERROR;
    }

    tsvWriter.close();
   	var products: SeekableIterator = ProductMgr.queryAllSiteProductsSorted();
    var prodName: String = "";
    var prodID: String = "";
    var productStringWriter: StringWriter = null;
    var size: String = "";
    var product: Product = null;
  	var variants : Collection = null;
  	loop1:
    while (products.hasNext()) {
    	product = products.next();
        if(product.isMaster()){
        	var variants : Collection = product.getVariants();
        	if (!writeFile(outputFile, prepareData(product.ID,variants.length),true)) {
            	return PIPELET_ERROR;
       		}
        }
    }
    
    return PIPELET_NEXT;
}

function prepareData(id:String,length:Number) :String{
		var productStringWriter: StringWriter = new StringWriter();
        productStringWriter.write(id + "\t");
        productStringWriter.write(length + "\t");
        productStringWriter.write('' + "\n"); 
 		return productStringWriter.toString();
  }
   


function writeFile(tgtFile: File, content: String, isAppend: Boolean): Boolean {
    try {
        if (!tgtFile.exists()) {
            if (!tgtFile.createNewFile()) {
                Logger.error("File " + tgtFile.name + " could not be created!");
                return false;
            }
        }

        var out: FileWriter = new FileWriter(tgtFile, isAppend);
        out.write(content);
        out.flush();
        out.close();
    } catch (e) {
        Logger.error("An error occured while exporting Products {0}.", e);
        return false;
    }
    return true;
}