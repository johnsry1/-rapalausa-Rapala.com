/**
*	Save result of the GetExpressCheckout API call and update order data
*
*	@input GetExpressCheckoutDetailsResponseContainer : Object parsed response result
*	@input LineItemContainer : dw.order.LineItemCtnr order object
*	@input PaymentInstrument : dw.order.OrderPaymentInstrument current payment instrument
*	@input PaypalCheckoutFromCart : Boolean value, which indicates if transaction was made from cart
*	@input PayPalCredit : Boolean value, which indicates if PayPal credit flow is active
*
*/

var order : Object = require('dw/order');
var util : Object = require('dw/util');
var value : Object = require('dw/value');
var system : Object = require('dw/system');
var web : Object = require('dw/web');

var prefs : Object = require('../modules/util/Preferences.ds');

function execute( args : PipelineDictionary ) : Number {

	var responseDataContainer : Object = args.GetExpressCheckoutDetailsResponseContainer;
	var responseData : Object = responseDataContainer.data;
	var lineItemContainer : order.LineItemCtnr = args.LineItemContainer;
	var paymentInstrument : order.PaymentInstrument = lineItemContainer.getPaymentInstruments('PayPal').iterator().next();;
	var paymentTransaction : order.PaymentTransaction = paymentInstrument.getPaymentTransaction();
	var amount : value.Money = new value.Money(responseData.amt, lineItemContainer.getCurrencyCode());
	var paypalCheckoutFromCart : Boolean = args.PaypalCheckoutFromCart;
	var payPalCredit : Boolean = args.PayPalCredit;
	var guestMessage : String = web.Resource.msg('paypal.checkout.guest','locale',null);

	//Set customer email from PayPal account
	if (paypalCheckoutFromCart && !customer.isAuthenticated()) {
		lineItemContainer.setCustomerEmail(responseData.email);
	} else if (customer.isAuthenticated()) {
		lineItemContainer.setCustomerEmail(customer.getProfile().getEmail());
	}

	//Set PayPal Buyer ID and Token
	paymentInstrument.custom.paypalPayerID = responseData.payerid;
	paymentInstrument.custom.paypalToken = responseData.token;
	paymentInstrument.custom.paypalCredit = payPalCredit;
	paymentTransaction.setAmount(amount);
	
	if (!prefs.PP_API_ShippingAddressOverride || paypalCheckoutFromCart) {
		
		let shippingAddress : dw.customer.CustomerAddress = lineItemContainer.getDefaultShipment().getShippingAddress();
		updateCustomerAddressFromResponse(responseData, shippingAddress, 0);			
	}
	
	if (prefs.PP_API_RequestBillingAddressFromPayPal && paypalCheckoutFromCart) {
		
			let billingAddress : order.OrderAddress = lineItemContainer.getBillingAddress();
			updateOrderAddressFromResponse(responseData, billingAddress);
		}

	if (!prefs.PP_API_RequestBillingAddressFromPayPal) {
		if (!lineItemContainer.getCustomer().isAuthenticated() && empty(lineItemContainer.getBillingAddress().getFirstName())) {
			lineItemContainer.getBillingAddress().setFirstName(guestMessage);	
		}
	}	

	return PIPELET_NEXT;
}

/**
 * updateOrderAddressFromResponse() update billing address using data from GetExpressCheckout API call
 *
 * @param data {dw.util.HashMap} response data from GetExpressCheckout API call
 * @param address {dw.order.OrderAddress} current billing address
 * @returns {dw.order.OrderAddress} new billing address
 */
function updateOrderAddressFromResponse(data : util.HashMap, address : order.OrderAddress) : order.OrderAddress {

	var names : Object = parseName(data.billingname);

	address.setFirstName(names.firstName);

	if (!empty(names.secondName)) {
		billingAddress.setSecondName(names.secondName);
	}

	if (!empty(names.lastName)) {
		address.setLastName(names.lastName);
	}

	address.setAddress1(data.get('street'));
	address.setCity(data.get('city'));
	address.setPostalCode(data.get('zip'));
	address.setCountryCode(data.get('countrycode'));
	address.setStateCode(data.get('state'));
	address.setPhone(data.get('shiptophonenum'));

	return address;
}

/**
 * updateCustomerAddressFromResponse() update shipping address using data from GetExpressCheckout API call
 *
 * @param data {dw.util.HashMap} response data from GetExpressCheckout API call
 * @param address {dw.customer.CustomerAddress} current shipping address
 * @param count {Number} number, from which begins countdown
 * @returns {dw.customer.CustomerAddress} new shipping address
 */
function updateCustomerAddressFromResponse(data : util.HashMap, address : dw.customer.CustomerAddress, count : Number) : dw.customer.CustomerAddress {

	let count = count || 0;

	var names : Object = parseName(data.shiptoname);

	address.setFirstName(names.firstName);

	if (!empty(names.secondName)) {
		address.setSecondName(names.secondName);
	}

	if (!empty(names.lastName)) {
		address.setLastName(names.lastName);
	}

	address.setAddress1(data.get('paymentrequest_' + count + '_shiptostreet'));
	address.setAddress2(data.get('paymentrequest_' + count + '_shiptostreet2'));
	address.setCity(data.get('paymentrequest_' + count + '_shiptocity'));
	address.setPhone(data.get('paymentrequest_' + count + '_shiptophonenum'));
	address.setPostalCode(data.get('paymentrequest_' + count + '_shiptozip'));
	address.setCountryCode(data.get('paymentrequest_' + count + '_shiptocountrycode'));
	address.setStateCode(data.get('paymentrequest_' + count + '_shiptostate'));

	return address;
}

/**
 * updateCustomerAddressFromResponse() parse first name, second name and last name from responce object
 *
 * @param name {String} not parsed data from request object
 * @returns {Object} new shipping address
 */
function parseName(name : String) : Object {
	var names = name.split(' ');

	var firstName : String = names[0];
	var secondName : String = null;
	var lastName : String = null;

	if (names.length === 3) {
		secondName = names[1];
		lastName = names[2];
	} else if (names.length === 2) {
		lastName = names[1];
	} else {
		firstName = name;
	}

	return {
		firstName : firstName,
		secondName : secondName,
		lastName : lastName
	};
}
