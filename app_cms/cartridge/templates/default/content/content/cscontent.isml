<isset name="DecoratorTemplate" value="content/content/pt_cscontent" scope="page"/>

<isdecorate template="${DecoratorTemplate}">
<iscomment>
	Use the decorator template based on the page context. If
	the content page was requested from a search result the
	decorator search/pt_contentsearchresult is used. The default 
	decorator for the content page is content/content/pt_content.
</iscomment>

<iscache type="relative" hour="24"/>

<iscomment>
	If content was found through a search build the list
	of folders with the custom customCSSFile attribute to be
	used in loading dynamic CSS.
</iscomment>

<isscript>
	var folder : dw.content.Folder = null;
	var folderCustomCSS : dw.util.Collection = new dw.util.ArrayList();
	
	// get folder from search context
	if( !empty(pdict.ContentSearchResult) )
	{
		folder = pdict.ContentSearchResult.folder;
		
		if (folder != null)
		{
			while( folder.parent != null )
			{
				if( folder.online && ('customCSSFile' in folder.custom) && !empty(folder.custom.customCSSFile)) 
				{
					folderCustomCSS.addAt( 0, folder );
				}
				folder = folder.parent;
			}
		}
	}
</isscript>

<iscomment>Load custom CSS file on demand</iscomment>
<script type="text/javascript">/*<![CDATA[*/
	app.util.clearDynamicCSS();

	<isloop items="${folderCustomCSS}" var="folder">
		app.util.loadCSSFile("${folder.custom.customCSSFile.getURL()}");
	</isloop>

	<isif condition="${('customCSSFile' in pdict.Content.custom) && !empty(pdict.Content.custom.customCSSFile)}">
		app.util.loadCSSFile("${pdict.Content.custom.customCSSFile.getURL()}");
	</isif>
/* ]]> */</script>

<iscomment>Render a "back" link and the article title based on the page context.</iscomment>
<div class="cell-header">
<h1><isprint value="${pdict.Content.name}"/></h1>
<iscomment> Render Mail Chimp </iscomment>
<isif condition="${dw.system.Site.getCurrent().preferences.custom.hasOwnProperty('MailChimpEnable') && dw.system.Site.getCurrent().getCustomPreferenceValue('MailChimpEnable')}">
	<isset name="mailChimpContent" value=${dw.content.ContentMgr.getContent('mail-chimp-preference-center')} scope="page" />
	<isif condition="${!empty(mailChimpContent)}">
	
	    <!-- dwMarker="content" dwContentID="${htmlheader.UUID}" -->
	    <isprint value="${mailChimpContent.custom.body}" encoding="off"/>
	    <!-- End content-asset -->
	</isif>
<iselse>
	<iscomment>This content piece must deliver a valid wrapping div!</iscomment>
	<isinclude template="content/content/htmlcontentasset"/>
</isif>
</div>
</isdecorate>